                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Jun 14 2012) (Linux)
                              4 ; This file was generated Mon Oct 20 00:26:12 2014
                              5 ;--------------------------------------------------------
                              6 	.module fb_lpc922
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _eeprom
                             13 	.globl _read_obj_value
                             14 	.globl _read_value_req
                             15 	.globl _write_value_req
                             16 	.globl _P3_1
                             17 	.globl _P3_0
                             18 	.globl _P1_7
                             19 	.globl _P1_6
                             20 	.globl _P1_5
                             21 	.globl _P1_4
                             22 	.globl _P1_3
                             23 	.globl _P1_2
                             24 	.globl _P1_1
                             25 	.globl _P1_0
                             26 	.globl _P0_7
                             27 	.globl _P0_6
                             28 	.globl _P0_5
                             29 	.globl _P0_4
                             30 	.globl _P0_3
                             31 	.globl _P0_2
                             32 	.globl _P0_1
                             33 	.globl _P0_0
                             34 	.globl _I2CON_0
                             35 	.globl _I2CON_2
                             36 	.globl _I2CON_3
                             37 	.globl _I2CON_4
                             38 	.globl _I2CON_5
                             39 	.globl _I2CON_6
                             40 	.globl _SCON_7
                             41 	.globl _SCON_6
                             42 	.globl _SCON_5
                             43 	.globl _SCON_4
                             44 	.globl _SCON_3
                             45 	.globl _SCON_2
                             46 	.globl _SCON_1
                             47 	.globl _SCON_0
                             48 	.globl _IP0_0
                             49 	.globl _IP0_1
                             50 	.globl _IP0_2
                             51 	.globl _IP0_3
                             52 	.globl _IP0_4
                             53 	.globl _IP0_5
                             54 	.globl _IP0_6
                             55 	.globl _IP1_0
                             56 	.globl _IP1_1
                             57 	.globl _IP1_2
                             58 	.globl _IP1_6
                             59 	.globl _IEN1_0
                             60 	.globl _IEN1_1
                             61 	.globl _IEN1_2
                             62 	.globl _IEN0_0
                             63 	.globl _IEN0_1
                             64 	.globl _IEN0_2
                             65 	.globl _IEN0_3
                             66 	.globl _IEN0_4
                             67 	.globl _IEN0_5
                             68 	.globl _IEN0_6
                             69 	.globl _IEN0_7
                             70 	.globl _TCON_0
                             71 	.globl _TCON_1
                             72 	.globl _TCON_2
                             73 	.globl _TCON_3
                             74 	.globl _TCON_4
                             75 	.globl _TCON_5
                             76 	.globl _TCON_6
                             77 	.globl _TCON_7
                             78 	.globl _PSW_7
                             79 	.globl _PSW_6
                             80 	.globl _PSW_5
                             81 	.globl _PSW_4
                             82 	.globl _PSW_3
                             83 	.globl _PSW_2
                             84 	.globl _PSW_1
                             85 	.globl _PSW_0
                             86 	.globl _IEN1
                             87 	.globl _IP0H
                             88 	.globl _WFEED2
                             89 	.globl _WFEED1
                             90 	.globl _WDL
                             91 	.globl _WDCON
                             92 	.globl _TRIM
                             93 	.globl _TAMOD
                             94 	.globl _SSTAT
                             95 	.globl _RTCL
                             96 	.globl _RTCH
                             97 	.globl _RTCCON
                             98 	.globl _RSTSRC
                             99 	.globl _PT0AD
                            100 	.globl _PCONA
                            101 	.globl _P3M2
                            102 	.globl _P3M1
                            103 	.globl _P1M2
                            104 	.globl _P1M1
                            105 	.globl _P0M2
                            106 	.globl _P0M1
                            107 	.globl _KBPATN
                            108 	.globl _KBMASK
                            109 	.globl _KBCON
                            110 	.globl _IP1H
                            111 	.globl _IP1
                            112 	.globl _I2STAT
                            113 	.globl _I2SCLL
                            114 	.globl _I2SCLH
                            115 	.globl _I2DAT
                            116 	.globl _I2CON
                            117 	.globl _I2ADR
                            118 	.globl _FMDATA
                            119 	.globl _FMCON
                            120 	.globl _FMADRL
                            121 	.globl _FMADRH
                            122 	.globl _DIVM
                            123 	.globl _CMP2
                            124 	.globl _CMP1
                            125 	.globl _BRGCON
                            126 	.globl _BRGR1
                            127 	.globl _BRGR0
                            128 	.globl _SADEN
                            129 	.globl _SADDR
                            130 	.globl _AUXR1
                            131 	.globl _SBUF
                            132 	.globl _SCON
                            133 	.globl _IP0
                            134 	.globl _IEN0
                            135 	.globl _TH1
                            136 	.globl _TH0
                            137 	.globl _TL1
                            138 	.globl _TL0
                            139 	.globl _TMOD
                            140 	.globl _TCON
                            141 	.globl _PCON
                            142 	.globl _DPH
                            143 	.globl _DPL
                            144 	.globl _SP
                            145 	.globl _B
                            146 	.globl _ACC
                            147 	.globl _PSW
                            148 	.globl _P3
                            149 	.globl _P1
                            150 	.globl _P0
                            151 	.globl _inc_pcount
                            152 	.globl _connected
                            153 	.globl _transparency
                            154 	.globl _send_nack
                            155 	.globl _send_ack
                            156 	.globl _wait_for_ack
                            157 	.globl _fbtx_bit
                            158 	.globl _auto_ack
                            159 	.globl _tel_sent
                            160 	.globl _tel_arrived
                            161 	.globl _its_me
                            162 	.globl _nack
                            163 	.globl _ack
                            164 	.globl _fb_parity
                            165 	.globl _interrupted
                            166 	.globl _parity_ok
                            167 	.globl _connected_timeout
                            168 	.globl _status60
                            169 	.globl _tx_nextsend
                            170 	.globl _tx_nextwrite
                            171 	.globl _RAM
                            172 	.globl _repeat_count
                            173 	.globl _fb_state
                            174 	.globl _fb_pattern
                            175 	.globl _fbrx_byte
                            176 	.globl _cs
                            177 	.globl _telpos
                            178 	.globl _tx_buffer
                            179 	.globl _telegramm
                            180 	.globl _senders_pcount
                            181 	.globl _mem_adrl
                            182 	.globl _mem_adrh
                            183 	.globl _mem_length
                            184 	.globl _pcount
                            185 	.globl _conl
                            186 	.globl _conh
                            187 	.globl _X1_int
                            188 	.globl _T1_int
                            189 	.globl _init_rx
                            190 	.globl _init_tx
                            191 	.globl _gapos_in_gat
                            192 	.globl _build_tel
                            193 	.globl _send_obj_value
                            194 	.globl _process_tel
                            195 	.globl _set_pa
                            196 	.globl _read_objflags
                            197 	.globl _restart_hw
                            198 ;--------------------------------------------------------
                            199 ; special function registers
                            200 ;--------------------------------------------------------
                            201 	.area RSEG    (ABS,DATA)
   0000                     202 	.org 0x0000
                    0080    203 G$P0$0$0 == 0x0080
                    0080    204 _P0	=	0x0080
                    0090    205 G$P1$0$0 == 0x0090
                    0090    206 _P1	=	0x0090
                    00B0    207 G$P3$0$0 == 0x00b0
                    00B0    208 _P3	=	0x00b0
                    00D0    209 G$PSW$0$0 == 0x00d0
                    00D0    210 _PSW	=	0x00d0
                    00E0    211 G$ACC$0$0 == 0x00e0
                    00E0    212 _ACC	=	0x00e0
                    00F0    213 G$B$0$0 == 0x00f0
                    00F0    214 _B	=	0x00f0
                    0081    215 G$SP$0$0 == 0x0081
                    0081    216 _SP	=	0x0081
                    0082    217 G$DPL$0$0 == 0x0082
                    0082    218 _DPL	=	0x0082
                    0083    219 G$DPH$0$0 == 0x0083
                    0083    220 _DPH	=	0x0083
                    0087    221 G$PCON$0$0 == 0x0087
                    0087    222 _PCON	=	0x0087
                    0088    223 G$TCON$0$0 == 0x0088
                    0088    224 _TCON	=	0x0088
                    0089    225 G$TMOD$0$0 == 0x0089
                    0089    226 _TMOD	=	0x0089
                    008A    227 G$TL0$0$0 == 0x008a
                    008A    228 _TL0	=	0x008a
                    008B    229 G$TL1$0$0 == 0x008b
                    008B    230 _TL1	=	0x008b
                    008C    231 G$TH0$0$0 == 0x008c
                    008C    232 _TH0	=	0x008c
                    008D    233 G$TH1$0$0 == 0x008d
                    008D    234 _TH1	=	0x008d
                    00A8    235 G$IEN0$0$0 == 0x00a8
                    00A8    236 _IEN0	=	0x00a8
                    00B8    237 G$IP0$0$0 == 0x00b8
                    00B8    238 _IP0	=	0x00b8
                    0098    239 G$SCON$0$0 == 0x0098
                    0098    240 _SCON	=	0x0098
                    0099    241 G$SBUF$0$0 == 0x0099
                    0099    242 _SBUF	=	0x0099
                    00A2    243 G$AUXR1$0$0 == 0x00a2
                    00A2    244 _AUXR1	=	0x00a2
                    00A9    245 G$SADDR$0$0 == 0x00a9
                    00A9    246 _SADDR	=	0x00a9
                    00B9    247 G$SADEN$0$0 == 0x00b9
                    00B9    248 _SADEN	=	0x00b9
                    00BE    249 G$BRGR0$0$0 == 0x00be
                    00BE    250 _BRGR0	=	0x00be
                    00BF    251 G$BRGR1$0$0 == 0x00bf
                    00BF    252 _BRGR1	=	0x00bf
                    00BD    253 G$BRGCON$0$0 == 0x00bd
                    00BD    254 _BRGCON	=	0x00bd
                    00AC    255 G$CMP1$0$0 == 0x00ac
                    00AC    256 _CMP1	=	0x00ac
                    00AD    257 G$CMP2$0$0 == 0x00ad
                    00AD    258 _CMP2	=	0x00ad
                    0095    259 G$DIVM$0$0 == 0x0095
                    0095    260 _DIVM	=	0x0095
                    00E7    261 G$FMADRH$0$0 == 0x00e7
                    00E7    262 _FMADRH	=	0x00e7
                    00E6    263 G$FMADRL$0$0 == 0x00e6
                    00E6    264 _FMADRL	=	0x00e6
                    00E4    265 G$FMCON$0$0 == 0x00e4
                    00E4    266 _FMCON	=	0x00e4
                    00E5    267 G$FMDATA$0$0 == 0x00e5
                    00E5    268 _FMDATA	=	0x00e5
                    00DB    269 G$I2ADR$0$0 == 0x00db
                    00DB    270 _I2ADR	=	0x00db
                    00D8    271 G$I2CON$0$0 == 0x00d8
                    00D8    272 _I2CON	=	0x00d8
                    00DA    273 G$I2DAT$0$0 == 0x00da
                    00DA    274 _I2DAT	=	0x00da
                    00DD    275 G$I2SCLH$0$0 == 0x00dd
                    00DD    276 _I2SCLH	=	0x00dd
                    00DC    277 G$I2SCLL$0$0 == 0x00dc
                    00DC    278 _I2SCLL	=	0x00dc
                    00D9    279 G$I2STAT$0$0 == 0x00d9
                    00D9    280 _I2STAT	=	0x00d9
                    00F8    281 G$IP1$0$0 == 0x00f8
                    00F8    282 _IP1	=	0x00f8
                    00F7    283 G$IP1H$0$0 == 0x00f7
                    00F7    284 _IP1H	=	0x00f7
                    0094    285 G$KBCON$0$0 == 0x0094
                    0094    286 _KBCON	=	0x0094
                    0086    287 G$KBMASK$0$0 == 0x0086
                    0086    288 _KBMASK	=	0x0086
                    0093    289 G$KBPATN$0$0 == 0x0093
                    0093    290 _KBPATN	=	0x0093
                    0084    291 G$P0M1$0$0 == 0x0084
                    0084    292 _P0M1	=	0x0084
                    0085    293 G$P0M2$0$0 == 0x0085
                    0085    294 _P0M2	=	0x0085
                    0091    295 G$P1M1$0$0 == 0x0091
                    0091    296 _P1M1	=	0x0091
                    0092    297 G$P1M2$0$0 == 0x0092
                    0092    298 _P1M2	=	0x0092
                    00B1    299 G$P3M1$0$0 == 0x00b1
                    00B1    300 _P3M1	=	0x00b1
                    00B2    301 G$P3M2$0$0 == 0x00b2
                    00B2    302 _P3M2	=	0x00b2
                    00B5    303 G$PCONA$0$0 == 0x00b5
                    00B5    304 _PCONA	=	0x00b5
                    00F6    305 G$PT0AD$0$0 == 0x00f6
                    00F6    306 _PT0AD	=	0x00f6
                    00DF    307 G$RSTSRC$0$0 == 0x00df
                    00DF    308 _RSTSRC	=	0x00df
                    00D1    309 G$RTCCON$0$0 == 0x00d1
                    00D1    310 _RTCCON	=	0x00d1
                    00D2    311 G$RTCH$0$0 == 0x00d2
                    00D2    312 _RTCH	=	0x00d2
                    00D3    313 G$RTCL$0$0 == 0x00d3
                    00D3    314 _RTCL	=	0x00d3
                    00BA    315 G$SSTAT$0$0 == 0x00ba
                    00BA    316 _SSTAT	=	0x00ba
                    008F    317 G$TAMOD$0$0 == 0x008f
                    008F    318 _TAMOD	=	0x008f
                    0096    319 G$TRIM$0$0 == 0x0096
                    0096    320 _TRIM	=	0x0096
                    00A7    321 G$WDCON$0$0 == 0x00a7
                    00A7    322 _WDCON	=	0x00a7
                    00C1    323 G$WDL$0$0 == 0x00c1
                    00C1    324 _WDL	=	0x00c1
                    00C2    325 G$WFEED1$0$0 == 0x00c2
                    00C2    326 _WFEED1	=	0x00c2
                    00C3    327 G$WFEED2$0$0 == 0x00c3
                    00C3    328 _WFEED2	=	0x00c3
                    00B7    329 G$IP0H$0$0 == 0x00b7
                    00B7    330 _IP0H	=	0x00b7
                    00E8    331 G$IEN1$0$0 == 0x00e8
                    00E8    332 _IEN1	=	0x00e8
                            333 ;--------------------------------------------------------
                            334 ; special function bits
                            335 ;--------------------------------------------------------
                            336 	.area RSEG    (ABS,DATA)
   0000                     337 	.org 0x0000
                    00D0    338 G$PSW_0$0$0 == 0x00d0
                    00D0    339 _PSW_0	=	0x00d0
                    00D1    340 G$PSW_1$0$0 == 0x00d1
                    00D1    341 _PSW_1	=	0x00d1
                    00D2    342 G$PSW_2$0$0 == 0x00d2
                    00D2    343 _PSW_2	=	0x00d2
                    00D3    344 G$PSW_3$0$0 == 0x00d3
                    00D3    345 _PSW_3	=	0x00d3
                    00D4    346 G$PSW_4$0$0 == 0x00d4
                    00D4    347 _PSW_4	=	0x00d4
                    00D5    348 G$PSW_5$0$0 == 0x00d5
                    00D5    349 _PSW_5	=	0x00d5
                    00D6    350 G$PSW_6$0$0 == 0x00d6
                    00D6    351 _PSW_6	=	0x00d6
                    00D7    352 G$PSW_7$0$0 == 0x00d7
                    00D7    353 _PSW_7	=	0x00d7
                    008F    354 G$TCON_7$0$0 == 0x008f
                    008F    355 _TCON_7	=	0x008f
                    008E    356 G$TCON_6$0$0 == 0x008e
                    008E    357 _TCON_6	=	0x008e
                    008D    358 G$TCON_5$0$0 == 0x008d
                    008D    359 _TCON_5	=	0x008d
                    008C    360 G$TCON_4$0$0 == 0x008c
                    008C    361 _TCON_4	=	0x008c
                    008B    362 G$TCON_3$0$0 == 0x008b
                    008B    363 _TCON_3	=	0x008b
                    008A    364 G$TCON_2$0$0 == 0x008a
                    008A    365 _TCON_2	=	0x008a
                    0089    366 G$TCON_1$0$0 == 0x0089
                    0089    367 _TCON_1	=	0x0089
                    0088    368 G$TCON_0$0$0 == 0x0088
                    0088    369 _TCON_0	=	0x0088
                    00AF    370 G$IEN0_7$0$0 == 0x00af
                    00AF    371 _IEN0_7	=	0x00af
                    00AE    372 G$IEN0_6$0$0 == 0x00ae
                    00AE    373 _IEN0_6	=	0x00ae
                    00AD    374 G$IEN0_5$0$0 == 0x00ad
                    00AD    375 _IEN0_5	=	0x00ad
                    00AC    376 G$IEN0_4$0$0 == 0x00ac
                    00AC    377 _IEN0_4	=	0x00ac
                    00AB    378 G$IEN0_3$0$0 == 0x00ab
                    00AB    379 _IEN0_3	=	0x00ab
                    00AA    380 G$IEN0_2$0$0 == 0x00aa
                    00AA    381 _IEN0_2	=	0x00aa
                    00A9    382 G$IEN0_1$0$0 == 0x00a9
                    00A9    383 _IEN0_1	=	0x00a9
                    00A8    384 G$IEN0_0$0$0 == 0x00a8
                    00A8    385 _IEN0_0	=	0x00a8
                    00EA    386 G$IEN1_2$0$0 == 0x00ea
                    00EA    387 _IEN1_2	=	0x00ea
                    00E9    388 G$IEN1_1$0$0 == 0x00e9
                    00E9    389 _IEN1_1	=	0x00e9
                    00E8    390 G$IEN1_0$0$0 == 0x00e8
                    00E8    391 _IEN1_0	=	0x00e8
                    00FE    392 G$IP1_6$0$0 == 0x00fe
                    00FE    393 _IP1_6	=	0x00fe
                    00FA    394 G$IP1_2$0$0 == 0x00fa
                    00FA    395 _IP1_2	=	0x00fa
                    00F9    396 G$IP1_1$0$0 == 0x00f9
                    00F9    397 _IP1_1	=	0x00f9
                    00F8    398 G$IP1_0$0$0 == 0x00f8
                    00F8    399 _IP1_0	=	0x00f8
                    00BE    400 G$IP0_6$0$0 == 0x00be
                    00BE    401 _IP0_6	=	0x00be
                    00BD    402 G$IP0_5$0$0 == 0x00bd
                    00BD    403 _IP0_5	=	0x00bd
                    00BC    404 G$IP0_4$0$0 == 0x00bc
                    00BC    405 _IP0_4	=	0x00bc
                    00BB    406 G$IP0_3$0$0 == 0x00bb
                    00BB    407 _IP0_3	=	0x00bb
                    00BA    408 G$IP0_2$0$0 == 0x00ba
                    00BA    409 _IP0_2	=	0x00ba
                    00B9    410 G$IP0_1$0$0 == 0x00b9
                    00B9    411 _IP0_1	=	0x00b9
                    00B8    412 G$IP0_0$0$0 == 0x00b8
                    00B8    413 _IP0_0	=	0x00b8
                    0098    414 G$SCON_0$0$0 == 0x0098
                    0098    415 _SCON_0	=	0x0098
                    0099    416 G$SCON_1$0$0 == 0x0099
                    0099    417 _SCON_1	=	0x0099
                    009A    418 G$SCON_2$0$0 == 0x009a
                    009A    419 _SCON_2	=	0x009a
                    009B    420 G$SCON_3$0$0 == 0x009b
                    009B    421 _SCON_3	=	0x009b
                    009C    422 G$SCON_4$0$0 == 0x009c
                    009C    423 _SCON_4	=	0x009c
                    009D    424 G$SCON_5$0$0 == 0x009d
                    009D    425 _SCON_5	=	0x009d
                    009E    426 G$SCON_6$0$0 == 0x009e
                    009E    427 _SCON_6	=	0x009e
                    009F    428 G$SCON_7$0$0 == 0x009f
                    009F    429 _SCON_7	=	0x009f
                    00DE    430 G$I2CON_6$0$0 == 0x00de
                    00DE    431 _I2CON_6	=	0x00de
                    00DD    432 G$I2CON_5$0$0 == 0x00dd
                    00DD    433 _I2CON_5	=	0x00dd
                    00DC    434 G$I2CON_4$0$0 == 0x00dc
                    00DC    435 _I2CON_4	=	0x00dc
                    00DB    436 G$I2CON_3$0$0 == 0x00db
                    00DB    437 _I2CON_3	=	0x00db
                    00DA    438 G$I2CON_2$0$0 == 0x00da
                    00DA    439 _I2CON_2	=	0x00da
                    00D8    440 G$I2CON_0$0$0 == 0x00d8
                    00D8    441 _I2CON_0	=	0x00d8
                    0080    442 G$P0_0$0$0 == 0x0080
                    0080    443 _P0_0	=	0x0080
                    0081    444 G$P0_1$0$0 == 0x0081
                    0081    445 _P0_1	=	0x0081
                    0082    446 G$P0_2$0$0 == 0x0082
                    0082    447 _P0_2	=	0x0082
                    0083    448 G$P0_3$0$0 == 0x0083
                    0083    449 _P0_3	=	0x0083
                    0084    450 G$P0_4$0$0 == 0x0084
                    0084    451 _P0_4	=	0x0084
                    0085    452 G$P0_5$0$0 == 0x0085
                    0085    453 _P0_5	=	0x0085
                    0086    454 G$P0_6$0$0 == 0x0086
                    0086    455 _P0_6	=	0x0086
                    0087    456 G$P0_7$0$0 == 0x0087
                    0087    457 _P0_7	=	0x0087
                    0090    458 G$P1_0$0$0 == 0x0090
                    0090    459 _P1_0	=	0x0090
                    0091    460 G$P1_1$0$0 == 0x0091
                    0091    461 _P1_1	=	0x0091
                    0092    462 G$P1_2$0$0 == 0x0092
                    0092    463 _P1_2	=	0x0092
                    0093    464 G$P1_3$0$0 == 0x0093
                    0093    465 _P1_3	=	0x0093
                    0094    466 G$P1_4$0$0 == 0x0094
                    0094    467 _P1_4	=	0x0094
                    0095    468 G$P1_5$0$0 == 0x0095
                    0095    469 _P1_5	=	0x0095
                    0096    470 G$P1_6$0$0 == 0x0096
                    0096    471 _P1_6	=	0x0096
                    0097    472 G$P1_7$0$0 == 0x0097
                    0097    473 _P1_7	=	0x0097
                    00B0    474 G$P3_0$0$0 == 0x00b0
                    00B0    475 _P3_0	=	0x00b0
                    00B1    476 G$P3_1$0$0 == 0x00b1
                    00B1    477 _P3_1	=	0x00b1
                            478 ;--------------------------------------------------------
                            479 ; overlayable register banks
                            480 ;--------------------------------------------------------
                            481 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     482 	.ds 8
                            483 ;--------------------------------------------------------
                            484 ; overlayable bit register bank
                            485 ;--------------------------------------------------------
                            486 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     487 bits:
   0000                     488 	.ds 1
                    8000    489 	b0 = bits[0]
                    8100    490 	b1 = bits[1]
                    8200    491 	b2 = bits[2]
                    8300    492 	b3 = bits[3]
                    8400    493 	b4 = bits[4]
                    8500    494 	b5 = bits[5]
                    8600    495 	b6 = bits[6]
                    8700    496 	b7 = bits[7]
                            497 ;--------------------------------------------------------
                            498 ; internal ram data
                            499 ;--------------------------------------------------------
                            500 	.area DSEG    (DATA)
                    0000    501 G$conh$0$0==.
   0000                     502 _conh::
   0000                     503 	.ds 1
                    0001    504 G$conl$0$0==.
   0001                     505 _conl::
   0001                     506 	.ds 1
                    0002    507 G$pcount$0$0==.
   0002                     508 _pcount::
   0002                     509 	.ds 1
                    0003    510 G$mem_length$0$0==.
   0003                     511 _mem_length::
   0003                     512 	.ds 1
                    0004    513 G$mem_adrh$0$0==.
   0004                     514 _mem_adrh::
   0004                     515 	.ds 1
                    0005    516 G$mem_adrl$0$0==.
   0005                     517 _mem_adrl::
   0005                     518 	.ds 1
                    0006    519 G$senders_pcount$0$0==.
   0006                     520 _senders_pcount::
   0006                     521 	.ds 1
                    0007    522 G$telegramm$0$0==.
   0007                     523 _telegramm::
   0007                     524 	.ds 23
                    001E    525 G$tx_buffer$0$0==.
   001E                     526 _tx_buffer::
   001E                     527 	.ds 8
                    0026    528 G$telpos$0$0==.
   0026                     529 _telpos::
   0026                     530 	.ds 1
                    0027    531 G$cs$0$0==.
   0027                     532 _cs::
   0027                     533 	.ds 1
                    0028    534 G$fbrx_byte$0$0==.
   0028                     535 _fbrx_byte::
   0028                     536 	.ds 1
                    0029    537 G$fb_pattern$0$0==.
   0029                     538 _fb_pattern::
   0029                     539 	.ds 1
                    002A    540 G$fb_state$0$0==.
   002A                     541 _fb_state::
   002A                     542 	.ds 1
                    002B    543 G$repeat_count$0$0==.
   002B                     544 _repeat_count::
   002B                     545 	.ds 1
                    0000    546 G$RAM$0$0 == 0x0000
                    0000    547 _RAM	=	0x0000
                    002C    548 G$tx_nextwrite$0$0==.
   002C                     549 _tx_nextwrite::
   002C                     550 	.ds 1
                    002D    551 G$tx_nextsend$0$0==.
   002D                     552 _tx_nextsend::
   002D                     553 	.ds 1
                    002E    554 G$status60$0$0==.
   002E                     555 _status60::
   002E                     556 	.ds 1
                    002F    557 G$connected_timeout$0$0==.
   002F                     558 _connected_timeout::
   002F                     559 	.ds 1
                            560 ;--------------------------------------------------------
                            561 ; overlayable items in internal ram 
                            562 ;--------------------------------------------------------
                            563 	.area OSEG    (OVR,DATA)
                            564 ;--------------------------------------------------------
                            565 ; indirectly addressable internal ram data
                            566 ;--------------------------------------------------------
                            567 	.area ISEG    (DATA)
                            568 ;--------------------------------------------------------
                            569 ; absolute internal ram data
                            570 ;--------------------------------------------------------
                            571 	.area IABS    (ABS,DATA)
                            572 	.area IABS    (ABS,DATA)
                            573 ;--------------------------------------------------------
                            574 ; bit data
                            575 ;--------------------------------------------------------
                            576 	.area BSEG    (BIT)
                    0000    577 G$parity_ok$0$0==.
   0000                     578 _parity_ok::
   0000                     579 	.ds 1
                    0001    580 G$interrupted$0$0==.
   0001                     581 _interrupted::
   0001                     582 	.ds 1
                    0002    583 G$fb_parity$0$0==.
   0002                     584 _fb_parity::
   0002                     585 	.ds 1
                    0003    586 G$ack$0$0==.
   0003                     587 _ack::
   0003                     588 	.ds 1
                    0004    589 G$nack$0$0==.
   0004                     590 _nack::
   0004                     591 	.ds 1
                    0005    592 G$its_me$0$0==.
   0005                     593 _its_me::
   0005                     594 	.ds 1
                    0006    595 G$tel_arrived$0$0==.
   0006                     596 _tel_arrived::
   0006                     597 	.ds 1
                    0007    598 G$tel_sent$0$0==.
   0007                     599 _tel_sent::
   0007                     600 	.ds 1
                    0008    601 G$auto_ack$0$0==.
   0008                     602 _auto_ack::
   0008                     603 	.ds 1
                    0009    604 G$fbtx_bit$0$0==.
   0009                     605 _fbtx_bit::
   0009                     606 	.ds 1
                    000A    607 G$wait_for_ack$0$0==.
   000A                     608 _wait_for_ack::
   000A                     609 	.ds 1
                    000B    610 G$send_ack$0$0==.
   000B                     611 _send_ack::
   000B                     612 	.ds 1
                    000C    613 G$send_nack$0$0==.
   000C                     614 _send_nack::
   000C                     615 	.ds 1
                    000D    616 G$transparency$0$0==.
   000D                     617 _transparency::
   000D                     618 	.ds 1
                    000E    619 G$connected$0$0==.
   000E                     620 _connected::
   000E                     621 	.ds 1
                    000F    622 G$inc_pcount$0$0==.
   000F                     623 _inc_pcount::
   000F                     624 	.ds 1
                            625 ;--------------------------------------------------------
                            626 ; paged external ram data
                            627 ;--------------------------------------------------------
                            628 	.area PSEG    (PAG,XDATA)
                            629 ;--------------------------------------------------------
                            630 ; external ram data
                            631 ;--------------------------------------------------------
                            632 	.area XSEG    (XDATA)
                            633 ;--------------------------------------------------------
                            634 ; absolute external ram data
                            635 ;--------------------------------------------------------
                            636 	.area XABS    (ABS,XDATA)
                            637 ;--------------------------------------------------------
                            638 ; external initialized ram data
                            639 ;--------------------------------------------------------
                            640 	.area XISEG   (XDATA)
                            641 	.area HOME    (CODE)
                            642 	.area GSINIT0 (CODE)
                            643 	.area GSINIT1 (CODE)
                            644 	.area GSINIT2 (CODE)
                            645 	.area GSINIT3 (CODE)
                            646 	.area GSINIT4 (CODE)
                            647 	.area GSINIT5 (CODE)
                            648 	.area GSINIT  (CODE)
                            649 	.area GSFINAL (CODE)
                            650 	.area CSEG    (CODE)
                            651 ;--------------------------------------------------------
                            652 ; global & static initialisations
                            653 ;--------------------------------------------------------
                            654 	.area HOME    (CODE)
                            655 	.area GSINIT  (CODE)
                            656 	.area GSFINAL (CODE)
                            657 	.area GSINIT  (CODE)
                            658 ;--------------------------------------------------------
                            659 ; Home
                            660 ;--------------------------------------------------------
                            661 	.area HOME    (CODE)
                            662 	.area HOME    (CODE)
                            663 ;--------------------------------------------------------
                            664 ; code
                            665 ;--------------------------------------------------------
                            666 	.area CSEG    (CODE)
                            667 ;------------------------------------------------------------
                            668 ;Allocation info for local variables in function 'X1_int'
                            669 ;------------------------------------------------------------
                    0000    670 	G$X1_int$0$0 ==.
                    0000    671 	C$fb_lpc922.c$54$0$0 ==.
                            672 ;	../fb_lpc922.c:54: void X1_int(void) __interrupt (2)		// Flanke des Startbits löst int1 aus
                            673 ;	-----------------------------------------
                            674 ;	 function X1_int
                            675 ;	-----------------------------------------
   0000                     676 _X1_int:
                    0007    677 	ar7 = 0x07
                    0006    678 	ar6 = 0x06
                    0005    679 	ar5 = 0x05
                    0004    680 	ar4 = 0x04
                    0003    681 	ar3 = 0x03
                    0002    682 	ar2 = 0x02
                    0001    683 	ar1 = 0x01
                    0000    684 	ar0 = 0x00
   0000 C0 E0               685 	push	acc
   0002 C0 D0               686 	push	psw
                    0004    687 	C$fb_lpc922.c$57$1$1 ==.
                            688 ;	../fb_lpc922.c:57: EX1=0;			// int1 stoppen								1 cycle = 0,27127us
   0004 C2 AA               689 	clr	_IEN0_2
                    0006    690 	C$fb_lpc922.c$58$1$1 ==.
                            691 ;	../fb_lpc922.c:58: TR1=0;			// Timer 1 stoppen
   0006 C2 8E               692 	clr	_TCON_6
                    0008    693 	C$fb_lpc922.c$59$1$1 ==.
                            694 ;	../fb_lpc922.c:59: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   0008 74 0F               695 	mov	a,#0x0F
   000A 55 89               696 	anl	a,_TMOD
   000C 24 20               697 	add	a,#0x20
   000E F5 89               698 	mov	_TMOD,a
                    0010    699 	C$fb_lpc922.c$60$1$1 ==.
                            700 ;	../fb_lpc922.c:60: TL1=53;//108;//128;		// Timer laden so dass in state 2 bei 75µs abgefragt wird
   0010 75 8B 35            701 	mov	_TL1,#0x35
                    0013    702 	C$fb_lpc922.c$61$1$1 ==.
                            703 ;	../fb_lpc922.c:61: TH1=128;//128;			// autoreload auf 35µs setzen (gilt für sprung von 2 auf 3)
   0013 75 8D 80            704 	mov	_TH1,#0x80
                    0016    705 	C$fb_lpc922.c$62$1$1 ==.
                            706 ;	../fb_lpc922.c:62: TF1=0;			// Timer1-flag löschen						1 cycle
   0016 C2 8F               707 	clr	_TCON_7
                    0018    708 	C$fb_lpc922.c$63$1$1 ==.
                            709 ;	../fb_lpc922.c:63: TR1=1;			// Timer1 starten							1 cycle
   0018 D2 8E               710 	setb	_TCON_6
                    001A    711 	C$fb_lpc922.c$64$1$1 ==.
                            712 ;	../fb_lpc922.c:64: ET1=1;			// Timer1-int aktiv							1 cycle
   001A D2 AB               713 	setb	_IEN0_3
                    001C    714 	C$fb_lpc922.c$65$1$1 ==.
                            715 ;	../fb_lpc922.c:65: fb_state=2;		// nächster state
   001C 75*2A 02            716 	mov	_fb_state,#0x02
                    001F    717 	C$fb_lpc922.c$66$1$1 ==.
                            718 ;	../fb_lpc922.c:66: fb_parity=0;	// Parity Bit löschen
   001F C2*02               719 	clr	_fb_parity
                    0021    720 	C$fb_lpc922.c$67$1$1 ==.
                            721 ;	../fb_lpc922.c:67: parity_ok=1;	// wird bei Fehler gelöscht
   0021 D2*00               722 	setb	_parity_ok
                    0023    723 	C$fb_lpc922.c$68$1$1 ==.
                            724 ;	../fb_lpc922.c:68: fb_pattern=0;
   0023 75*29 00            725 	mov	_fb_pattern,#0x00
                    0026    726 	C$fb_lpc922.c$69$1$1 ==.
                            727 ;	../fb_lpc922.c:69: fbrx_byte=0;
   0026 75*28 00            728 	mov	_fbrx_byte,#0x00
                    0029    729 	C$fb_lpc922.c$70$1$1 ==.
                            730 ;	../fb_lpc922.c:70: interrupted=1;	// signalisiert app, dass unterbrochen wurde
   0029 D2*01               731 	setb	_interrupted
   002B D0 D0               732 	pop	psw
   002D D0 E0               733 	pop	acc
                    002F    734 	C$fb_lpc922.c$71$1$1 ==.
                    002F    735 	XG$X1_int$0$0 ==.
   002F 32                  736 	reti
                            737 ;	eliminated unneeded mov psw,# (no regs used in bank)
                            738 ;	eliminated unneeded push/pop dpl
                            739 ;	eliminated unneeded push/pop dph
                            740 ;	eliminated unneeded push/pop b
                            741 ;------------------------------------------------------------
                            742 ;Allocation info for local variables in function 'T1_int'
                            743 ;------------------------------------------------------------
                            744 ;fbrx_bit                  Allocated to registers b0 
                            745 ;send_byte                 Allocated to registers r7 
                            746 ;------------------------------------------------------------
                    0030    747 	G$T1_int$0$0 ==.
                    0030    748 	C$fb_lpc922.c$75$1$1 ==.
                            749 ;	../fb_lpc922.c:75: void T1_int(void) __interrupt (3) 	// Timer 1 Interrupt
                            750 ;	-----------------------------------------
                            751 ;	 function T1_int
                            752 ;	-----------------------------------------
   0030                     753 _T1_int:
   0030 C0*00               754 	push	bits
   0032 C0 E0               755 	push	acc
   0034 C0 F0               756 	push	b
   0036 C0 82               757 	push	dpl
   0038 C0 83               758 	push	dph
   003A C0 07               759 	push	(0+7)
   003C C0 06               760 	push	(0+6)
   003E C0 05               761 	push	(0+5)
   0040 C0 04               762 	push	(0+4)
   0042 C0 03               763 	push	(0+3)
   0044 C0 02               764 	push	(0+2)
   0046 C0 01               765 	push	(0+1)
   0048 C0 00               766 	push	(0+0)
   004A C0 D0               767 	push	psw
   004C 75 D0 00            768 	mov	psw,#0x00
                    004F    769 	C$fb_lpc922.c$81$1$1 ==.
                            770 ;	../fb_lpc922.c:81: switch (fb_state){
   004F E5*2A               771 	mov	a,_fb_state
   0051 FF                  772 	mov	r7,a
   0052 24 F1               773 	add	a,#0xff - 0x0E
   0054 50 03               774 	jnc	00269$
   0056 02s03r4D            775 	ljmp	00217$
   0059                     776 00269$:
   0059 EF                  777 	mov	a,r7
   005A 2F                  778 	add	a,r7
   005B 2F                  779 	add	a,r7
   005C 90s00r60            780 	mov	dptr,#00270$
   005F 73                  781 	jmp	@a+dptr
   0060                     782 00270$:
   0060 02s00r8D            783 	ljmp	00101$
   0063 02s03r4D            784 	ljmp	00217$
   0066 02s01r00            785 	ljmp	00115$
   0069 02s01rBA            786 	ljmp	00151$
   006C 02s01rC3            787 	ljmp	00152$
   006F 02s02r38            788 	ljmp	00173$
   0072 02s03r4D            789 	ljmp	00217$
   0075 02s03r4D            790 	ljmp	00217$
   0078 02s03r4D            791 	ljmp	00217$
   007B 02s03r4D            792 	ljmp	00217$
   007E 02s02r5C            793 	ljmp	00180$
   0081 02s02rC4            794 	ljmp	00201$
   0084 02s03r4D            795 	ljmp	00217$
   0087 02s02rE8            796 	ljmp	00208$
   008A 02s03r36            797 	ljmp	00216$
                    008D    798 	C$fb_lpc922.c$85$2$2 ==.
                            799 ;	../fb_lpc922.c:85: case 0:
   008D                     800 00101$:
                    008D    801 	C$fb_lpc922.c$86$2$2 ==.
                            802 ;	../fb_lpc922.c:86: TR1=0;			// Timer 1 stoppen
   008D C2 8E               803 	clr	_TCON_6
                    008F    804 	C$fb_lpc922.c$87$2$2 ==.
                            805 ;	../fb_lpc922.c:87: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   008F 74 0F               806 	mov	a,#0x0F
   0091 55 89               807 	anl	a,_TMOD
   0093 24 20               808 	add	a,#0x20
   0095 F5 89               809 	mov	_TMOD,a
                    0097    810 	C$fb_lpc922.c$88$2$2 ==.
                            811 ;	../fb_lpc922.c:88: TL1=128;		// Timer laden
   0097 75 8B 80            812 	mov	_TL1,#0x80
                    009A    813 	C$fb_lpc922.c$89$2$2 ==.
                            814 ;	../fb_lpc922.c:89: TH1=128;
   009A 75 8D 80            815 	mov	_TH1,#0x80
                    009D    816 	C$fb_lpc922.c$90$2$2 ==.
                            817 ;	../fb_lpc922.c:90: TF1=0;			// Timer1-flag löschen						1 cycle
   009D C2 8F               818 	clr	_TCON_7
                    009F    819 	C$fb_lpc922.c$91$2$2 ==.
                            820 ;	../fb_lpc922.c:91: TR1=1;			// Timer1 starten							1 cycle
   009F D2 8E               821 	setb	_TCON_6
                    00A1    822 	C$fb_lpc922.c$92$2$2 ==.
                            823 ;	../fb_lpc922.c:92: if(tx_nextsend != tx_nextwrite) { 			// wenn zu sendendes Objekt vorhanden
   00A1 E5*2C               824 	mov	a,_tx_nextwrite
   00A3 B5*2D 02            825 	cjne	a,_tx_nextsend,00271$
   00A6 80 51               826 	sjmp	00113$
   00A8                     827 00271$:
                    00A8    828 	C$fb_lpc922.c$93$3$3 ==.
                            829 ;	../fb_lpc922.c:93: if(build_tel(tx_buffer[tx_nextsend])) {	// wenn Telegramm gebildet werden konnte
   00A8 E5*2D               830 	mov	a,_tx_nextsend
   00AA 24r1E               831 	add	a,#_tx_buffer
   00AC F9                  832 	mov	r1,a
   00AD 87 82               833 	mov	dpl,@r1
   00AF 12s04r33            834 	lcall	_build_tel
   00B2 50 3D               835 	jnc	00110$
                    00B4    836 	C$fb_lpc922.c$94$4$4 ==.
                            837 ;	../fb_lpc922.c:94: EX1=0; 				//Um zu vermeiden dass man in die Abfrage hinein-empfängt
   00B4 C2 AA               838 	clr	_IEN0_2
                    00B6    839 	C$fb_lpc922.c$95$4$4 ==.
                            840 ;	../fb_lpc922.c:95: if(!fb_state) { 	//nur bilden wenn vorher kein rx_intit durch ext int kam
   00B6 E5*2A               841 	mov	a,_fb_state
   00B8 70 32               842 	jnz	00108$
                    00BA    843 	C$fb_lpc922.c$96$5$5 ==.
                            844 ;	../fb_lpc922.c:96: if((tx_buffer[tx_nextsend]&0x20)==0) {	// wenn erstmaliges Senden des Objektes
   00BA E5*2D               845 	mov	a,_tx_nextsend
   00BC 24r1E               846 	add	a,#_tx_buffer
   00BE F9                  847 	mov	r1,a
   00BF E7                  848 	mov	a,@r1
   00C0 FF                  849 	mov	r7,a
   00C1 20 E5 07            850 	jb	acc.5,00103$
                    00C4    851 	C$fb_lpc922.c$97$6$6 ==.
                            852 ;	../fb_lpc922.c:97: tx_buffer[tx_nextsend]|=0x20;		// Bit für "wird gerade gesendet"
   00C4 74 20               853 	mov	a,#0x20
   00C6 4F                  854 	orl	a,r7
   00C7 F7                  855 	mov	@r1,a
                    00C8    856 	C$fb_lpc922.c$98$6$6 ==.
                            857 ;	../fb_lpc922.c:98: repeat_count=0;						// Wiederholungszähler für nicht geackte Telegramme
   00C8 75*2B 00            858 	mov	_repeat_count,#0x00
   00CB                     859 00103$:
                    00CB    860 	C$fb_lpc922.c$100$5$5 ==.
                            861 ;	../fb_lpc922.c:100: if (repeat_count<4) init_tx();		// Senden starten
   00CB 74 FC               862 	mov	a,#0x100 - 0x04
   00CD 25*2B               863 	add	a,_repeat_count
   00CF 40 05               864 	jc	00105$
   00D1 12s03r98            865 	lcall	_init_tx
   00D4 80 16               866 	sjmp	00108$
   00D6                     867 00105$:
                    00D6    868 	C$fb_lpc922.c$102$6$7 ==.
                            869 ;	../fb_lpc922.c:102: tx_nextsend++;
   00D6 05*2D               870 	inc	_tx_nextsend
                    00D8    871 	C$fb_lpc922.c$103$6$7 ==.
                            872 ;	../fb_lpc922.c:103: tx_nextsend&=0x07;
   00D8 53*2D 07            873 	anl	_tx_nextsend,#0x07
                    00DB    874 	C$fb_lpc922.c$104$6$7 ==.
                            875 ;	../fb_lpc922.c:104: wait_for_ack=0;
   00DB C2*0A               876 	clr	_wait_for_ack
                    00DD    877 	C$fb_lpc922.c$105$6$7 ==.
                            878 ;	../fb_lpc922.c:105: inc_pcount=0;
   00DD C2*0F               879 	clr	_inc_pcount
                    00DF    880 	C$fb_lpc922.c$106$6$7 ==.
                            881 ;	../fb_lpc922.c:106: init_rx();
   00DF 12s03r6C            882 	lcall	_init_rx
                    00E2    883 	C$fb_lpc922.c$107$6$7 ==.
                            884 ;	../fb_lpc922.c:107: TR1=0;		// hier nicht noch einmal die ganze busfree Zeit warten
   00E2 C2 8E               885 	clr	_TCON_6
                    00E4    886 	C$fb_lpc922.c$108$6$7 ==.
                            887 ;	../fb_lpc922.c:108: TH1=0xF0;
   00E4 75 8D F0            888 	mov	_TH1,#0xF0
                    00E7    889 	C$fb_lpc922.c$109$6$7 ==.
                            890 ;	../fb_lpc922.c:109: TL1=0x00;
   00E7 75 8B 00            891 	mov	_TL1,#0x00
                    00EA    892 	C$fb_lpc922.c$110$6$7 ==.
                            893 ;	../fb_lpc922.c:110: TR1=1;
   00EA D2 8E               894 	setb	_TCON_6
   00EC                     895 00108$:
                    00EC    896 	C$fb_lpc922.c$113$4$4 ==.
                            897 ;	../fb_lpc922.c:113: EX1=1;	// ext1 int einschalten falls Empfang...
   00EC D2 AA               898 	setb	_IEN0_2
   00EE 02s03r4D            899 	ljmp	00217$
   00F1                     900 00110$:
                    00F1    901 	C$fb_lpc922.c$116$4$8 ==.
                            902 ;	../fb_lpc922.c:116: tx_nextsend++; //hier Zeiger erhöhen wenn Telegramm nicht gebildet werden konnte
   00F1 05*2D               903 	inc	_tx_nextsend
                    00F3    904 	C$fb_lpc922.c$117$4$8 ==.
                            905 ;	../fb_lpc922.c:117: tx_nextsend&=0x07;
   00F3 53*2D 07            906 	anl	_tx_nextsend,#0x07
   00F6 02s03r4D            907 	ljmp	00217$
   00F9                     908 00113$:
                    00F9    909 	C$fb_lpc922.c$121$3$9 ==.
                            910 ;	../fb_lpc922.c:121: TR1=0;		// nichts mehr zu tun, also statemachine stoppen
   00F9 C2 8E               911 	clr	_TCON_6
                    00FB    912 	C$fb_lpc922.c$122$3$9 ==.
                            913 ;	../fb_lpc922.c:122: EX1=1;		// sicherstellen, dass ext. Int. 1 aktiv ist
   00FB D2 AA               914 	setb	_IEN0_2
                    00FD    915 	C$fb_lpc922.c$124$2$2 ==.
                            916 ;	../fb_lpc922.c:124: break;
   00FD 02s03r4D            917 	ljmp	00217$
                    0100    918 	C$fb_lpc922.c$127$2$2 ==.
                            919 ;	../fb_lpc922.c:127: case 2: // T=75us
   0100                     920 00115$:
                    0100    921 	C$fb_lpc922.c$128$2$2 ==.
                            922 ;	../fb_lpc922.c:128: fbrx_bit=!IE1;				// Flipflop des ext. Int. 1 auslesen, ist 1 bei fallender Flanke am Pin
   0100 A2 8B               923 	mov	c,_TCON_3
   0102 B3                  924 	cpl	c
   0103 92*00               925 	mov	b0,c
                    0105    926 	C$fb_lpc922.c$129$2$2 ==.
                            927 ;	../fb_lpc922.c:129: IE1=0;						// Flipflop zurücksetzen
   0105 C2 8B               928 	clr	_TCON_3
                    0107    929 	C$fb_lpc922.c$130$2$2 ==.
                            930 ;	../fb_lpc922.c:130: fb_state=3;// nächster state: 3
   0107 75*2A 03            931 	mov	_fb_state,#0x03
                    010A    932 	C$fb_lpc922.c$131$2$2 ==.
                            933 ;	../fb_lpc922.c:131: TH1=0;// reload auf 70µs (zeit swischen state 3 und 2)
   010A 75 8D 00            934 	mov	_TH1,#0x00
                    010D    935 	C$fb_lpc922.c$132$2$2 ==.
                            936 ;	../fb_lpc922.c:132: if(fb_pattern==0) {			// fb_pattern=0 bedeutet, dass bisher nur das Startbit empfangen wurde
   010D E5*29               937 	mov	a,_fb_pattern
   010F 70 0A               938 	jnz	00149$
                    0111    939 	C$fb_lpc922.c$133$3$10 ==.
                            940 ;	../fb_lpc922.c:133: fb_pattern=1;			// 70us nach Startbit, als näcstes kommt Datenbit 0
   0111 75*29 01            941 	mov	_fb_pattern,#0x01
                    0114    942 	C$fb_lpc922.c$134$3$10 ==.
                            943 ;	../fb_lpc922.c:134: ack=0;					// Empfang eines neuen Bytes, also ack/nack Flags zurücksetzen
   0114 C2*03               944 	clr	_ack
                    0116    945 	C$fb_lpc922.c$135$3$10 ==.
                            946 ;	../fb_lpc922.c:135: nack=0;
   0116 C2*04               947 	clr	_nack
   0118 02s03r4D            948 	ljmp	00217$
   011B                     949 00149$:
                    011B    950 	C$fb_lpc922.c$138$3$11 ==.
                            951 ;	../fb_lpc922.c:138: if(fb_pattern<129) {					// Daten-Bit LSB first
   011B 74 7F               952 	mov	a,#0x100 - 0x81
   011D 25*29               953 	add	a,_fb_pattern
   011F 40 1C               954 	jc	00146$
                    0121    955 	C$fb_lpc922.c$139$4$12 ==.
                            956 ;	../fb_lpc922.c:139: if(fbrx_bit) {
   0121 30*00 08            957 	jnb	b0,00117$
                    0124    958 	C$fb_lpc922.c$140$5$13 ==.
                            959 ;	../fb_lpc922.c:140: fb_parity=!fb_parity;			// Paritybit berechnen
   0124 B2*02               960 	cpl	_fb_parity
                    0126    961 	C$fb_lpc922.c$141$5$13 ==.
                            962 ;	../fb_lpc922.c:141: fbrx_byte+=fb_pattern;			// Datenbit speichern
   0126 E5*29               963 	mov	a,_fb_pattern
   0128 25*28               964 	add	a,_fbrx_byte
   012A F5*28               965 	mov	_fbrx_byte,a
   012C                     966 00117$:
                    012C    967 	C$fb_lpc922.c$143$4$12 ==.
                            968 ;	../fb_lpc922.c:143: fb_pattern=fb_pattern<<1;			// nächstes Bit
   012C E5*29               969 	mov	a,_fb_pattern
   012E 25*29               970 	add	a,_fb_pattern
                    0130    971 	C$fb_lpc922.c$144$4$12 ==.
                            972 ;	../fb_lpc922.c:144: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gelesen, Parity-Bit folgt
   0130 F5*29               973 	mov	_fb_pattern,a
   0132 60 03               974 	jz	00279$
   0134 02s03r4D            975 	ljmp	00217$
   0137                     976 00279$:
   0137 75*29 81            977 	mov	_fb_pattern,#0x81
   013A 02s03r4D            978 	ljmp	00217$
   013D                     979 00146$:
                    013D    980 	C$fb_lpc922.c$147$4$14 ==.
                            981 ;	../fb_lpc922.c:147: TR1=0;
   013D C2 8E               982 	clr	_TCON_6
                    013F    983 	C$fb_lpc922.c$148$4$14 ==.
                            984 ;	../fb_lpc922.c:148: TF1=0; //prüfen ob erforderlich!!!
   013F C2 8F               985 	clr	_TCON_7
                    0141    986 	C$fb_lpc922.c$149$4$14 ==.
                            987 ;	../fb_lpc922.c:149: if(fb_parity==fbrx_bit) {				// Parity-Bit OK
   0141 A2*02               988 	mov	c,_fb_parity
   0143 20*00 01            989 	jb	b0,00280$
   0146 B3                  990 	cpl	c
   0147                     991 00280$:
   0147 50 26               992 	jnc	00130$
                    0149    993 	C$fb_lpc922.c$150$5$15 ==.
                            994 ;	../fb_lpc922.c:150: if (telpos==0) {						// erstes empfangenes Byte
   0149 E5*26               995 	mov	a,_telpos
   014B 70 0E               996 	jnz	00125$
                    014D    997 	C$fb_lpc922.c$151$6$16 ==.
                            998 ;	../fb_lpc922.c:151: if (fbrx_byte==0xCC) ack=1;				// ACK empfangen
   014D 74 CC               999 	mov	a,#0xCC
   014F B5*28 02           1000 	cjne	a,_fbrx_byte,00121$
   0152 D2*03              1001 	setb	_ack
   0154                    1002 00121$:
                    0154   1003 	C$fb_lpc922.c$152$6$16 ==.
                           1004 ;	../fb_lpc922.c:152: if (fbrx_byte==0x0C) nack=1;			// NACK empfangen
   0154 74 0C              1005 	mov	a,#0x0C
   0156 B5*28 02           1006 	cjne	a,_fbrx_byte,00125$
   0159 D2*04              1007 	setb	_nack
   015B                    1008 00125$:
                    015B   1009 	C$fb_lpc922.c$154$5$15 ==.
                           1010 ;	../fb_lpc922.c:154: if (!ack && !nack) {					// Datenbyte empfangen
   015B 20*03 13           1011 	jb	_ack,00131$
   015E 20*04 10           1012 	jb	_nack,00131$
                    0161   1013 	C$fb_lpc922.c$155$6$17 ==.
                           1014 ;	../fb_lpc922.c:155: telegramm[telpos]=fbrx_byte;			// Byte speichern
   0161 E5*26              1015 	mov	a,_telpos
   0163 24r07              1016 	add	a,#_telegramm
   0165 F8                 1017 	mov	r0,a
                    0166   1018 	C$fb_lpc922.c$156$6$17 ==.
                           1019 ;	../fb_lpc922.c:156: cs^=fbrx_byte;							// Checksum berechnen
   0166 E5*28              1020 	mov	a,_fbrx_byte
   0168 F6                 1021 	mov	@r0,a
   0169 62*27              1022 	xrl	_cs,a
                    016B   1023 	C$fb_lpc922.c$157$6$17 ==.
                           1024 ;	../fb_lpc922.c:157: telpos++;								// Telegrammzeiger erhöhen
   016B 05*26              1025 	inc	_telpos
   016D 80 02              1026 	sjmp	00131$
   016F                    1027 00130$:
                    016F   1028 	C$fb_lpc922.c$160$4$14 ==.
                           1029 ;	../fb_lpc922.c:160: else parity_ok=0;						// Parity Error
   016F C2*00              1030 	clr	_parity_ok
   0171                    1031 00131$:
                    0171   1032 	C$fb_lpc922.c$162$4$14 ==.
                           1033 ;	../fb_lpc922.c:162: if (wait_for_ack) {						// es wird ein ACK erwartet
                    0171   1034 	C$fb_lpc922.c$163$5$18 ==.
                           1035 ;	../fb_lpc922.c:163: wait_for_ack=0;							// Flag zurücksetzen, da wir es ja gerade abarbeiten
   0171 10*0A 02           1036 	jbc	_wait_for_ack,00289$
   0174 80 1D              1037 	sjmp	00143$
   0176                    1038 00289$:
                    0176   1039 	C$fb_lpc922.c$164$5$18 ==.
                           1040 ;	../fb_lpc922.c:164: if (ack && parity_ok) {					// ACK empfangen und auch erwartet
   0176 30*03 14           1041 	jnb	_ack,00135$
   0179 30*00 11           1042 	jnb	_parity_ok,00135$
                    017C   1043 	C$fb_lpc922.c$165$6$19 ==.
                           1044 ;	../fb_lpc922.c:165: repeat_count=4;						// keine Wiederholtelegramme mehr senden
   017C 75*2B 04           1045 	mov	_repeat_count,#0x04
                    017F   1046 	C$fb_lpc922.c$166$6$19 ==.
                           1047 ;	../fb_lpc922.c:166: if(inc_pcount) {
                    017F   1048 	C$fb_lpc922.c$167$7$20 ==.
                           1049 ;	../fb_lpc922.c:167: inc_pcount=0;
   017F 10*0F 02           1050 	jbc	_inc_pcount,00292$
   0182 80 09              1051 	sjmp	00135$
   0184                    1052 00292$:
                    0184   1053 	C$fb_lpc922.c$168$7$20 ==.
                           1054 ;	../fb_lpc922.c:168: pcount+=4;
   0184 E5*02              1055 	mov	a,_pcount
   0186 24 04              1056 	add	a,#0x04
   0188 F5*02              1057 	mov	_pcount,a
                    018A   1058 	C$fb_lpc922.c$169$7$20 ==.
                           1059 ;	../fb_lpc922.c:169: pcount&=0x3C;
   018A 53*02 3C           1060 	anl	_pcount,#0x3C
   018D                    1061 00135$:
                    018D   1062 	C$fb_lpc922.c$172$5$18 ==.
                           1063 ;	../fb_lpc922.c:172: init_rx();
   018D 12s03r6C           1064 	lcall	_init_rx
   0190 02s03r4D           1065 	ljmp	00217$
   0193                    1066 00143$:
                    0193   1067 	C$fb_lpc922.c$175$5$21 ==.
                           1068 ;	../fb_lpc922.c:175: if (parity_ok && (!ack && !nack)) {		// ganz normales Datenbyte
   0193 30*00 1E           1069 	jnb	_parity_ok,00138$
   0196 20*03 1B           1070 	jb	_ack,00138$
   0199 20*04 18           1071 	jb	_nack,00138$
                    019C   1072 	C$fb_lpc922.c$176$6$22 ==.
                           1073 ;	../fb_lpc922.c:176: TMOD=(TMOD & 0x0F) +0x10;			// Timer 1 als 16-Bit Timer
   019C 74 0F              1074 	mov	a,#0x0F
   019E 55 89              1075 	anl	a,_TMOD
   01A0 24 10              1076 	add	a,#0x10
   01A2 F5 89              1077 	mov	_TMOD,a
                    01A4   1078 	C$fb_lpc922.c$177$6$22 ==.
                           1079 ;	../fb_lpc922.c:177: TH1=0xFA;//0xFA;							// Timer 1 auf Timeout-Position setzen (370us)
   01A4 75 8D FA           1080 	mov	_TH1,#0xFA
                    01A7   1081 	C$fb_lpc922.c$178$6$22 ==.
                           1082 ;	../fb_lpc922.c:178: TL1=0x70;//4f 0xAB; (bis hierher sinds 91µs)
   01A7 75 8B 70           1083 	mov	_TL1,#0x70
                    01AA   1084 	C$fb_lpc922.c$179$6$22 ==.
                           1085 ;	../fb_lpc922.c:179: TR1=1;
   01AA D2 8E              1086 	setb	_TCON_6
                    01AC   1087 	C$fb_lpc922.c$180$6$22 ==.
                           1088 ;	../fb_lpc922.c:180: fb_state=4;							// nächster state: timeout = Telegramm fertig
   01AC 75*2A 04           1089 	mov	_fb_state,#0x04
                    01AF   1090 	C$fb_lpc922.c$181$6$22 ==.
                           1091 ;	../fb_lpc922.c:181: EX1=1;								// int1 aktiv, falls noch ein Byte kommt
   01AF D2 AA              1092 	setb	_IEN0_2
   01B1 02s03r4D           1093 	ljmp	00217$
   01B4                    1094 00138$:
                    01B4   1095 	C$fb_lpc922.c$183$5$21 ==.
                           1096 ;	../fb_lpc922.c:183: else init_rx();							// irgendwas empfangen
   01B4 12s03r6C           1097 	lcall	_init_rx
                    01B7   1098 	C$fb_lpc922.c$187$2$2 ==.
                           1099 ;	../fb_lpc922.c:187: break;
   01B7 02s03r4D           1100 	ljmp	00217$
                    01BA   1101 	C$fb_lpc922.c$189$2$2 ==.
                           1102 ;	../fb_lpc922.c:189: case 3: // T=104us=0us
   01BA                    1103 00151$:
                    01BA   1104 	C$fb_lpc922.c$190$2$2 ==.
                           1105 ;	../fb_lpc922.c:190: TH1=128;// reload auf 35µs (Zeit zwischen State 2 und 3)
   01BA 75 8D 80           1106 	mov	_TH1,#0x80
                    01BD   1107 	C$fb_lpc922.c$191$2$2 ==.
                           1108 ;	../fb_lpc922.c:191: fb_state=2;//1
   01BD 75*2A 02           1109 	mov	_fb_state,#0x02
                    01C0   1110 	C$fb_lpc922.c$192$2$2 ==.
                           1111 ;	../fb_lpc922.c:192: break;
   01C0 02s03r4D           1112 	ljmp	00217$
                    01C3   1113 	C$fb_lpc922.c$194$2$2 ==.
                           1114 ;	../fb_lpc922.c:194: case 4:	//	Timeout, d.h. Telegramm-Ende
   01C3                    1115 00152$:
                    01C3   1116 	C$fb_lpc922.c$195$2$2 ==.
                           1117 ;	../fb_lpc922.c:195: if (auto_ack && telpos>4) {		// wenn ACK gesendet werden soll und Telegramm zumindest 5 Bytes hat
   01C3 30*08 64           1118 	jnb	_auto_ack,00170$
   01C6 E5*26              1119 	mov	a,_telpos
   01C8 24 FB              1120 	add	a,#0xff - 0x04
   01CA 50 5E              1121 	jnc	00170$
                    01CC   1122 	C$fb_lpc922.c$196$3$23 ==.
                           1123 ;	../fb_lpc922.c:196: TR1=0;
   01CC C2 8E              1124 	clr	_TCON_6
                    01CE   1125 	C$fb_lpc922.c$197$3$23 ==.
                           1126 ;	../fb_lpc922.c:197: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   01CE 74 0F              1127 	mov	a,#0x0F
   01D0 55 89              1128 	anl	a,_TMOD
   01D2 24 10              1129 	add	a,#0x10
   01D4 F5 89              1130 	mov	_TMOD,a
                    01D6   1131 	C$fb_lpc922.c$198$3$23 ==.
                           1132 ;	../fb_lpc922.c:198: TH1=0xEF;					// Timer 1 auf ACK-Position setzen (15 Bit Pause = 2708µs (26 Bit) nach Beginn Startbit vom letzten Datenbyte)
   01D6 75 8D EF           1133 	mov	_TH1,#0xEF
                    01D9   1134 	C$fb_lpc922.c$199$3$23 ==.
                           1135 ;	../fb_lpc922.c:199: TL1=0x42;
   01D9 75 8B 42           1136 	mov	_TL1,#0x42
                    01DC   1137 	C$fb_lpc922.c$200$3$23 ==.
                           1138 ;	../fb_lpc922.c:200: TR1=1;
   01DC D2 8E              1139 	setb	_TCON_6
                    01DE   1140 	C$fb_lpc922.c$201$3$23 ==.
                           1141 ;	../fb_lpc922.c:201: its_me=transparency;			// indiziert, ob dieses Gerät adressiert wurde, bei transparecy=1 immer
   01DE A2*0D              1142 	mov	c,_transparency
   01E0 92*05              1143 	mov	_its_me,c
                    01E2   1144 	C$fb_lpc922.c$202$3$23 ==.
                           1145 ;	../fb_lpc922.c:202: if(telegramm[5]&0x80) {
   01E2 E5*0C              1146 	mov	a,(_telegramm + 0x0005)
   01E4 30 E7 1F           1147 	jnb	acc.7,00162$
                    01E7   1148 	C$fb_lpc922.c$203$4$24 ==.
                           1149 ;	../fb_lpc922.c:203: if (gapos_in_gat(telegramm[3],telegramm[4])!=0xFF) its_me=1;	// Gruppenadresse
   01E7 85*0A 82           1150 	mov	dpl,(_telegramm + 0x0003)
   01EA C0*0B              1151 	push	(_telegramm + 0x0004)
   01EC 12s03rE2           1152 	lcall	_gapos_in_gat
   01EF AF 82              1153 	mov	r7,dpl
   01F1 15 81              1154 	dec	sp
   01F3 BF FF 02           1155 	cjne	r7,#0xFF,00299$
   01F6 80 02              1156 	sjmp	00154$
   01F8                    1157 00299$:
   01F8 D2*05              1158 	setb	_its_me
   01FA                    1159 00154$:
                    01FA   1160 	C$fb_lpc922.c$204$4$24 ==.
                           1161 ;	../fb_lpc922.c:204: if (telegramm[3]==0 && telegramm[4]==0) its_me=1;				// Broadcast
   01FA E5*0A              1162 	mov	a,(_telegramm + 0x0003)
   01FC 70 1C              1163 	jnz	00163$
   01FE E5*0B              1164 	mov	a,(_telegramm + 0x0004)
   0200 70 18              1165 	jnz	00163$
   0202 D2*05              1166 	setb	_its_me
   0204 80 14              1167 	sjmp	00163$
   0206                    1168 00162$:
                    0206   1169 	C$fb_lpc922.c$206$3$23 ==.
                           1170 ;	../fb_lpc922.c:206: else if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) its_me=1;	// phys. Adresse
   0206 90 1D 17           1171 	mov	dptr,#(_eeprom + 0x0017)
   0209 E4                 1172 	clr	a
   020A 93                 1173 	movc	a,@a+dptr
   020B FF                 1174 	mov	r7,a
   020C B5*0A 0B           1175 	cjne	a,(_telegramm + 0x0003),00163$
   020F 90 1D 18           1176 	mov	dptr,#(_eeprom + 0x0018)
   0212 E4                 1177 	clr	a
   0213 93                 1178 	movc	a,@a+dptr
   0214 FF                 1179 	mov	r7,a
   0215 B5*0B 02           1180 	cjne	a,(_telegramm + 0x0004),00163$
   0218 D2*05              1181 	setb	_its_me
   021A                    1182 00163$:
                    021A   1183 	C$fb_lpc922.c$207$3$23 ==.
                           1184 ;	../fb_lpc922.c:207: if ((cs==0xFF) && its_me) tel_arrived=1;
   021A 74 FF              1185 	mov	a,#0xFF
   021C B5*27 05           1186 	cjne	a,_cs,00165$
   021F 30*05 02           1187 	jnb	_its_me,00165$
   0222 D2*06              1188 	setb	_tel_arrived
   0224                    1189 00165$:
                    0224   1190 	C$fb_lpc922.c$208$3$23 ==.
                           1191 ;	../fb_lpc922.c:208: fb_state=5;					// nächster state: ACK-Position erreicht
   0224 75*2A 05           1192 	mov	_fb_state,#0x05
   0227 02s03r4D           1193 	ljmp	00217$
   022A                    1194 00170$:
                    022A   1195 	C$fb_lpc922.c$212$3$25 ==.
                           1196 ;	../fb_lpc922.c:212: if (telpos>1) tel_arrived=1;	// trotzdem den Eingang eines Telegramms anzeigen
   022A E5*26              1197 	mov	a,_telpos
   022C 24 FE              1198 	add	a,#0xff - 0x01
   022E 50 02              1199 	jnc	00168$
   0230 D2*06              1200 	setb	_tel_arrived
   0232                    1201 00168$:
                    0232   1202 	C$fb_lpc922.c$213$3$25 ==.
                           1203 ;	../fb_lpc922.c:213: init_rx();						// wieder in den Empfang zurück
   0232 12s03r6C           1204 	lcall	_init_rx
                    0235   1205 	C$fb_lpc922.c$215$2$2 ==.
                           1206 ;	../fb_lpc922.c:215: break;
   0235 02s03r4D           1207 	ljmp	00217$
                    0238   1208 	C$fb_lpc922.c$217$2$2 ==.
                           1209 ;	../fb_lpc922.c:217: case 5:	// ACK-Position erreicht
   0238                    1210 00173$:
                    0238   1211 	C$fb_lpc922.c$218$2$2 ==.
                           1212 ;	../fb_lpc922.c:218: TR1=0;
   0238 C2 8E              1213 	clr	_TCON_6
                    023A   1214 	C$fb_lpc922.c$219$2$2 ==.
                           1215 ;	../fb_lpc922.c:219: if (cs==0xFF) {	// Checksum OK
   023A 74 FF              1216 	mov	a,#0xFF
   023C B5*27 13           1217 	cjne	a,_cs,00178$
                    023F   1218 	C$fb_lpc922.c$220$3$26 ==.
                           1219 ;	../fb_lpc922.c:220: if (its_me) {					// Gerät adressiert
   023F 30*05 0A           1220 	jnb	_its_me,00175$
                    0242   1221 	C$fb_lpc922.c$221$4$27 ==.
                           1222 ;	../fb_lpc922.c:221: send_ack=1;
   0242 D2*0B              1223 	setb	_send_ack
                    0244   1224 	C$fb_lpc922.c$222$4$27 ==.
                           1225 ;	../fb_lpc922.c:222: init_tx();						// Senden initiieren
   0244 12s03r98           1226 	lcall	_init_tx
                    0247   1227 	C$fb_lpc922.c$223$4$27 ==.
                           1228 ;	../fb_lpc922.c:223: wait_for_ack=0;					// bei ACK senden nicht erneut auf ACK warten
   0247 C2*0A              1229 	clr	_wait_for_ack
   0249 02s03r4D           1230 	ljmp	00217$
   024C                    1231 00175$:
                    024C   1232 	C$fb_lpc922.c$225$3$26 ==.
                           1233 ;	../fb_lpc922.c:225: else init_rx();					// Gerät nicht adressiert, also zurück zu Empfang
   024C 12s03r6C           1234 	lcall	_init_rx
   024F 02s03r4D           1235 	ljmp	00217$
   0252                    1236 00178$:
                    0252   1237 	C$fb_lpc922.c$228$3$28 ==.
                           1238 ;	../fb_lpc922.c:228: send_nack=1;
   0252 D2*0C              1239 	setb	_send_nack
                    0254   1240 	C$fb_lpc922.c$229$3$28 ==.
                           1241 ;	../fb_lpc922.c:229: init_tx();
   0254 12s03r98           1242 	lcall	_init_tx
                    0257   1243 	C$fb_lpc922.c$230$3$28 ==.
                           1244 ;	../fb_lpc922.c:230: wait_for_ack=0;					// bei NACK senden nicht erneut auf ACK warten
   0257 C2*0A              1245 	clr	_wait_for_ack
                    0259   1246 	C$fb_lpc922.c$232$2$2 ==.
                           1247 ;	../fb_lpc922.c:232: break;
   0259 02s03r4D           1248 	ljmp	00217$
                    025C   1249 	C$fb_lpc922.c$236$2$2 ==.
                           1250 ;	../fb_lpc922.c:236: case 10:	// Byte Senden, T=0us
   025C                    1251 00180$:
                    025C   1252 	C$fb_lpc922.c$237$2$2 ==.
                           1253 ;	../fb_lpc922.c:237: send_byte=telegramm[telpos];
   025C E5*26              1254 	mov	a,_telpos
   025E 24r07              1255 	add	a,#_telegramm
   0260 F9                 1256 	mov	r1,a
   0261 87 07              1257 	mov	ar7,@r1
                    0263   1258 	C$fb_lpc922.c$238$2$2 ==.
                           1259 ;	../fb_lpc922.c:238: if (send_ack) send_byte=0xCC;
   0263 30*0B 02           1260 	jnb	_send_ack,00182$
   0266 7F CC              1261 	mov	r7,#0xCC
   0268                    1262 00182$:
                    0268   1263 	C$fb_lpc922.c$239$2$2 ==.
                           1264 ;	../fb_lpc922.c:239: if (send_nack) send_byte=0x0C;
   0268 30*0C 02           1265 	jnb	_send_nack,00184$
   026B 7F 0C              1266 	mov	r7,#0x0C
   026D                    1267 00184$:
                    026D   1268 	C$fb_lpc922.c$240$2$2 ==.
                           1269 ;	../fb_lpc922.c:240: EX1=0;					// Empfang verhindern
   026D C2 AA              1270 	clr	_IEN0_2
                    026F   1271 	C$fb_lpc922.c$241$2$2 ==.
                           1272 ;	../fb_lpc922.c:241: if(fb_state==10){
   026F 74 0A              1273 	mov	a,#0x0A
   0271 B5*2A 02           1274 	cjne	a,_fb_state,00315$
   0274 80 03              1275 	sjmp	00316$
   0276                    1276 00315$:
   0276 02s03r4D           1277 	ljmp	00217$
   0279                    1278 00316$:
                    0279   1279 	C$fb_lpc922.c$242$3$29 ==.
                           1280 ;	../fb_lpc922.c:242: if (fb_pattern<=128) {			// Startbit und Datenbits (pattern=0:startbit, 1 2 4 8 .. 128 Datenbits, 129 parity)
   0279 E5*29              1281 	mov	a,_fb_pattern
   027B 24 7F              1282 	add	a,#0xff - 0x80
   027D 40 2C              1283 	jc	00197$
                    027F   1284 	C$fb_lpc922.c$243$4$30 ==.
                           1285 ;	../fb_lpc922.c:243: if ((send_byte & fb_pattern)==0) {	// wenn Bit logisch 0 ist
   027F E5*29              1286 	mov	a,_fb_pattern
   0281 5F                 1287 	anl	a,r7
   0282 70 08              1288 	jnz	00186$
                    0284   1289 	C$fb_lpc922.c$245$5$31 ==.
                           1290 ;	../fb_lpc922.c:245: FBOUTC=1;						// Bus runter ziehen
   0284 D2 96              1291 	setb	_P1_6
                    0286   1292 	C$fb_lpc922.c$247$5$31 ==.
                           1293 ;	../fb_lpc922.c:247: fbtx_bit=0;						// fbtx_bit dient zur späteren Kollisionsprüfung
   0286 C2*09              1294 	clr	_fbtx_bit
                    0288   1295 	C$fb_lpc922.c$248$5$31 ==.
                           1296 ;	../fb_lpc922.c:248: fb_parity=!fb_parity;			// Parity-Bit berechnen
   0288 B2*02              1297 	cpl	_fb_parity
   028A 80 02              1298 	sjmp	00187$
   028C                    1299 00186$:
                    028C   1300 	C$fb_lpc922.c$250$4$30 ==.
                           1301 ;	../fb_lpc922.c:250: else fbtx_bit=1;
   028C D2*09              1302 	setb	_fbtx_bit
   028E                    1303 00187$:
                    028E   1304 	C$fb_lpc922.c$251$4$30 ==.
                           1305 ;	../fb_lpc922.c:251: if (fb_pattern==0) {				// wenn Startbit: parity zurücksetzen
   028E E5*29              1306 	mov	a,_fb_pattern
   0290 70 07              1307 	jnz	00189$
                    0292   1308 	C$fb_lpc922.c$252$5$32 ==.
                           1309 ;	../fb_lpc922.c:252: fb_pattern=1;					// auf erstes Datenbit zeigen
   0292 75*29 01           1310 	mov	_fb_pattern,#0x01
                    0295   1311 	C$fb_lpc922.c$253$5$32 ==.
                           1312 ;	../fb_lpc922.c:253: fb_parity=0;
   0295 C2*02              1313 	clr	_fb_parity
   0297 80 06              1314 	sjmp	00190$
   0299                    1315 00189$:
                    0299   1316 	C$fb_lpc922.c$255$4$30 ==.
                           1317 ;	../fb_lpc922.c:255: else fb_pattern=fb_pattern<<1;		// nächstes Datenbit
   0299 E5*29              1318 	mov	a,_fb_pattern
   029B 25*29              1319 	add	a,_fb_pattern
   029D F5*29              1320 	mov	_fb_pattern,a
   029F                    1321 00190$:
                    029F   1322 	C$fb_lpc922.c$256$4$30 ==.
                           1323 ;	../fb_lpc922.c:256: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gesendet, Parity-Bit folgt
   029F E5*29              1324 	mov	a,_fb_pattern
   02A1 70 03              1325 	jnz	00192$
   02A3 75*29 81           1326 	mov	_fb_pattern,#0x81
   02A6                    1327 00192$:
                    02A6   1328 	C$fb_lpc922.c$257$4$30 ==.
                           1329 ;	../fb_lpc922.c:257: fb_state=11;
   02A6 75*2A 0B           1330 	mov	_fb_state,#0x0B
   02A9 80 13              1331 	sjmp	00198$
   02AB                    1332 00197$:
                    02AB   1333 	C$fb_lpc922.c$260$4$33 ==.
                           1334 ;	../fb_lpc922.c:260: if (!fb_parity) {				// wenn Parity-Bit logisch 0
   02AB 20*02 06           1335 	jb	_fb_parity,00194$
                    02AE   1336 	C$fb_lpc922.c$261$5$34 ==.
                           1337 ;	../fb_lpc922.c:261: FBOUTC=1;						// Bus runterziehen
   02AE D2 96              1338 	setb	_P1_6
                    02B0   1339 	C$fb_lpc922.c$262$5$34 ==.
                           1340 ;	../fb_lpc922.c:262: fbtx_bit=0;						// fbtx_bit dient zur späteren Kollisionsprüfung
   02B0 C2*09              1341 	clr	_fbtx_bit
   02B2 80 02              1342 	sjmp	00195$
   02B4                    1343 00194$:
                    02B4   1344 	C$fb_lpc922.c$264$4$33 ==.
                           1345 ;	../fb_lpc922.c:264: else fbtx_bit=1;
   02B4 D2*09              1346 	setb	_fbtx_bit
   02B6                    1347 00195$:
                    02B6   1348 	C$fb_lpc922.c$265$4$33 ==.
                           1349 ;	../fb_lpc922.c:265: telpos++;					// nächstes Byte
   02B6 05*26              1350 	inc	_telpos
                    02B8   1351 	C$fb_lpc922.c$266$4$33 ==.
                           1352 ;	../fb_lpc922.c:266: fb_pattern=0;				// wieder mit Startbit beginnen
   02B8 75*29 00           1353 	mov	_fb_pattern,#0x00
                    02BB   1354 	C$fb_lpc922.c$267$4$33 ==.
                           1355 ;	../fb_lpc922.c:267: fb_state=13;				// Prüfen ob Telegramm fertig
   02BB 75*2A 0D           1356 	mov	_fb_state,#0x0D
   02BE                    1357 00198$:
                    02BE   1358 	C$fb_lpc922.c$269$3$29 ==.
                           1359 ;	../fb_lpc922.c:269: TH1=18; //reload 70µ -delay interrupt (von state 11 auf 13)
   02BE 75 8D 12           1360 	mov	_TH1,#0x12
                    02C1   1361 	C$fb_lpc922.c$271$2$2 ==.
                           1362 ;	../fb_lpc922.c:271: break;
   02C1 02s03r4D           1363 	ljmp	00217$
                    02C4   1364 	C$fb_lpc922.c$273$2$2 ==.
                           1365 ;	../fb_lpc922.c:273: case 11:	// Sendestufe aus, T=35us
   02C4                    1366 00201$:
                    02C4   1367 	C$fb_lpc922.c$274$2$2 ==.
                           1368 ;	../fb_lpc922.c:274: if(telpos==0 && fb_pattern==1) {	// 1. Byte Startbit
   02C4 E5*26              1369 	mov	a,_telpos
   02C6 70 07              1370 	jnz	00203$
   02C8 74 01              1371 	mov	a,#0x01
   02CA B5*29 02           1372 	cjne	a,_fb_pattern,00203$
                    02CD   1373 	C$fb_lpc922.c$275$3$35 ==.
                           1374 ;	../fb_lpc922.c:275: repeat_count++;		// angefangener Sendeversuch, also Zähler erhöhen
   02CD 05*2B              1375 	inc	_repeat_count
   02CF                    1376 00203$:
                    02CF   1377 	C$fb_lpc922.c$277$2$2 ==.
                           1378 ;	../fb_lpc922.c:277: FBOUTC=0;				// Sendestufe aus
   02CF C2 96              1379 	clr	_P1_6
                    02D1   1380 	C$fb_lpc922.c$278$2$2 ==.
                           1381 ;	../fb_lpc922.c:278: if (fbtx_bit & IE1) {	// Kollision
   02D1 A2*09              1382 	mov	c,_fbtx_bit
   02D3 82 8B              1383 	anl	c,_TCON_3
   02D5 50 07              1384 	jnc	00206$
                    02D7   1385 	C$fb_lpc922.c$279$3$36 ==.
                           1386 ;	../fb_lpc922.c:279: wait_for_ack=0;
   02D7 C2*0A              1387 	clr	_wait_for_ack
                    02D9   1388 	C$fb_lpc922.c$280$3$36 ==.
                           1389 ;	../fb_lpc922.c:280: init_rx();				// Senden abbrechen und Empfang initialisieren
   02D9 12s03r6C           1390 	lcall	_init_rx
   02DC 80 06              1391 	sjmp	00207$
   02DE                    1392 00206$:
                    02DE   1393 	C$fb_lpc922.c$283$3$37 ==.
                           1394 ;	../fb_lpc922.c:283: fb_state=10;//12;
   02DE 75*2A 0A           1395 	mov	_fb_state,#0x0A
                    02E1   1396 	C$fb_lpc922.c$284$3$37 ==.
                           1397 ;	../fb_lpc922.c:284: TH1=110;// 35µs + delay (von state 10 auf 11)
   02E1 75 8D 6E           1398 	mov	_TH1,#0x6E
   02E4                    1399 00207$:
                    02E4   1400 	C$fb_lpc922.c$286$2$2 ==.
                           1401 ;	../fb_lpc922.c:286: IE1=0;					// Flipflop löschen
   02E4 C2 8B              1402 	clr	_TCON_3
                    02E6   1403 	C$fb_lpc922.c$287$2$2 ==.
                           1404 ;	../fb_lpc922.c:287: break;
                    02E6   1405 	C$fb_lpc922.c$293$2$2 ==.
                           1406 ;	../fb_lpc922.c:293: case 13:	// Byte übertragen, T=35us, prüfen ob Telegramm fertig
   02E6 80 65              1407 	sjmp	00217$
   02E8                    1408 00208$:
                    02E8   1409 	C$fb_lpc922.c$294$2$2 ==.
                           1410 ;	../fb_lpc922.c:294: FBOUTC=0;
   02E8 C2 96              1411 	clr	_P1_6
                    02EA   1412 	C$fb_lpc922.c$295$2$2 ==.
                           1413 ;	../fb_lpc922.c:295: TR1=0;
   02EA C2 8E              1414 	clr	_TCON_6
                    02EC   1415 	C$fb_lpc922.c$296$2$2 ==.
                           1416 ;	../fb_lpc922.c:296: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   02EC 74 0F              1417 	mov	a,#0x0F
   02EE 55 89              1418 	anl	a,_TMOD
   02F0 24 10              1419 	add	a,#0x10
   02F2 F5 89              1420 	mov	_TMOD,a
                    02F4   1421 	C$fb_lpc922.c$297$2$2 ==.
                           1422 ;	../fb_lpc922.c:297: TH1=0xFB;					// Timer 1 auf Interbyte Abstand setzen (3 Bit Pause = 312µs
   02F4 75 8D FB           1423 	mov	_TH1,#0xFB
                    02F7   1424 	C$fb_lpc922.c$298$2$2 ==.
                           1425 ;	../fb_lpc922.c:298: TL1=0x90;
   02F7 75 8B 90           1426 	mov	_TL1,#0x90
                    02FA   1427 	C$fb_lpc922.c$299$2$2 ==.
                           1428 ;	../fb_lpc922.c:299: TR1=1;
   02FA D2 8E              1429 	setb	_TCON_6
                    02FC   1430 	C$fb_lpc922.c$300$2$2 ==.
                           1431 ;	../fb_lpc922.c:300: if (send_ack || send_nack) {	// ACK/NACK senden
   02FC 20*0B 03           1432 	jb	_send_ack,00212$
   02FF 30*0C 05           1433 	jnb	_send_nack,00213$
   0302                    1434 00212$:
                    0302   1435 	C$fb_lpc922.c$301$3$38 ==.
                           1436 ;	../fb_lpc922.c:301: init_rx();					// ACK senden abgeschlossen, also statemachine auf Anfang
   0302 12s03r6C           1437 	lcall	_init_rx
   0305 80 2B              1438 	sjmp	00214$
   0307                    1439 00213$:
                    0307   1440 	C$fb_lpc922.c$304$3$39 ==.
                           1441 ;	../fb_lpc922.c:304: if (telpos>((telegramm[5]&0x0F)+7)) {		// Telegramm fertig gesendet
   0307 74 0F              1442 	mov	a,#0x0F
   0309 55*0C              1443 	anl	a,(_telegramm + 0x0005)
   030B FF                 1444 	mov	r7,a
   030C 7E 00              1445 	mov	r6,#0x00
   030E 74 07              1446 	mov	a,#0x07
   0310 2F                 1447 	add	a,r7
   0311 FF                 1448 	mov	r7,a
   0312 E4                 1449 	clr	a
   0313 3E                 1450 	addc	a,r6
   0314 FE                 1451 	mov	r6,a
   0315 AC*26              1452 	mov	r4,_telpos
   0317 7D 00              1453 	mov	r5,#0x00
   0319 C3                 1454 	clr	c
   031A EF                 1455 	mov	a,r7
   031B 9C                 1456 	subb	a,r4
   031C EE                 1457 	mov	a,r6
   031D 64 80              1458 	xrl	a,#0x80
   031F 8D F0              1459 	mov	b,r5
   0321 63 F0 80           1460 	xrl	b,#0x80
   0324 95 F0              1461 	subb	a,b
   0326 50 07              1462 	jnc	00210$
                    0328   1463 	C$fb_lpc922.c$305$4$40 ==.
                           1464 ;	../fb_lpc922.c:305: tel_sent=1;
   0328 D2*07              1465 	setb	_tel_sent
                    032A   1466 	C$fb_lpc922.c$306$4$40 ==.
                           1467 ;	../fb_lpc922.c:306: init_rx();	// Telegramm senden abgeschlossen, ggf. wiederholen wenn nicht geackt wird
   032A 12s03r6C           1468 	lcall	_init_rx
   032D 80 03              1469 	sjmp	00214$
   032F                    1470 00210$:
                    032F   1471 	C$fb_lpc922.c$308$3$39 ==.
                           1472 ;	../fb_lpc922.c:308: else fb_state=14;		// nächstes Byte: Interbyte Abstand einhalten
   032F 75*2A 0E           1473 	mov	_fb_state,#0x0E
   0332                    1474 00214$:
                    0332   1475 	C$fb_lpc922.c$310$2$2 ==.
                           1476 ;	../fb_lpc922.c:310: IE1=0;
   0332 C2 8B              1477 	clr	_TCON_3
                    0334   1478 	C$fb_lpc922.c$311$2$2 ==.
                           1479 ;	../fb_lpc922.c:311: break;
                    0334   1480 	C$fb_lpc922.c$313$2$2 ==.
                           1481 ;	../fb_lpc922.c:313: case 14:	// Interbyte Abstand erreicht (=Stopbit + 2 Bit)
   0334 80 17              1482 	sjmp	00217$
   0336                    1483 00216$:
                    0336   1484 	C$fb_lpc922.c$314$2$2 ==.
                           1485 ;	../fb_lpc922.c:314: TR1=0;
   0336 C2 8E              1486 	clr	_TCON_6
                    0338   1487 	C$fb_lpc922.c$315$2$2 ==.
                           1488 ;	../fb_lpc922.c:315: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   0338 74 0F              1489 	mov	a,#0x0F
   033A 55 89              1490 	anl	a,_TMOD
   033C 24 20              1491 	add	a,#0x20
   033E F5 89              1492 	mov	_TMOD,a
                    0340   1493 	C$fb_lpc922.c$316$2$2 ==.
                           1494 ;	../fb_lpc922.c:316: TH1=110;							// Timer 1 auf 104/3 us laden
   0340 75 8D 6E           1495 	mov	_TH1,#0x6E
                    0343   1496 	C$fb_lpc922.c$317$2$2 ==.
                           1497 ;	../fb_lpc922.c:317: TL1=128;
   0343 75 8B 80           1498 	mov	_TL1,#0x80
                    0346   1499 	C$fb_lpc922.c$318$2$2 ==.
                           1500 ;	../fb_lpc922.c:318: TF1=0;
   0346 C2 8F              1501 	clr	_TCON_7
                    0348   1502 	C$fb_lpc922.c$319$2$2 ==.
                           1503 ;	../fb_lpc922.c:319: TR1=1;
   0348 D2 8E              1504 	setb	_TCON_6
                    034A   1505 	C$fb_lpc922.c$320$2$2 ==.
                           1506 ;	../fb_lpc922.c:320: fb_state=10;
   034A 75*2A 0A           1507 	mov	_fb_state,#0x0A
                    034D   1508 	C$fb_lpc922.c$325$1$1 ==.
                           1509 ;	../fb_lpc922.c:325: }
   034D                    1510 00217$:
                    034D   1511 	C$fb_lpc922.c$326$1$1 ==.
                           1512 ;	../fb_lpc922.c:326: interrupted=1;			// zeigt der app, dass sie unterbrochen wurde
   034D D2*01              1513 	setb	_interrupted
   034F D0 D0              1514 	pop	psw
   0351 D0 00              1515 	pop	(0+0)
   0353 D0 01              1516 	pop	(0+1)
   0355 D0 02              1517 	pop	(0+2)
   0357 D0 03              1518 	pop	(0+3)
   0359 D0 04              1519 	pop	(0+4)
   035B D0 05              1520 	pop	(0+5)
   035D D0 06              1521 	pop	(0+6)
   035F D0 07              1522 	pop	(0+7)
   0361 D0 83              1523 	pop	dph
   0363 D0 82              1524 	pop	dpl
   0365 D0 F0              1525 	pop	b
   0367 D0 E0              1526 	pop	acc
   0369 D0*00              1527 	pop	bits
                    036B   1528 	C$fb_lpc922.c$327$1$1 ==.
                    036B   1529 	XG$T1_int$0$0 ==.
   036B 32                 1530 	reti
                           1531 ;------------------------------------------------------------
                           1532 ;Allocation info for local variables in function 'init_rx'
                           1533 ;------------------------------------------------------------
                    036C   1534 	G$init_rx$0$0 ==.
                    036C   1535 	C$fb_lpc922.c$330$1$1 ==.
                           1536 ;	../fb_lpc922.c:330: void init_rx(void) 	// Empfangen initiieren (statemachine auf Anfang)
                           1537 ;	-----------------------------------------
                           1538 ;	 function init_rx
                           1539 ;	-----------------------------------------
   036C                    1540 _init_rx:
                    036C   1541 	C$fb_lpc922.c$332$1$1 ==.
                           1542 ;	../fb_lpc922.c:332: fb_state=0;
   036C 75*2A 00           1543 	mov	_fb_state,#0x00
                    036F   1544 	C$fb_lpc922.c$333$1$1 ==.
                           1545 ;	../fb_lpc922.c:333: IE1=0;
   036F C2 8B              1546 	clr	_TCON_3
                    0371   1547 	C$fb_lpc922.c$334$1$1 ==.
                           1548 ;	../fb_lpc922.c:334: TR1=0;
   0371 C2 8E              1549 	clr	_TCON_6
                    0373   1550 	C$fb_lpc922.c$335$1$1 ==.
                           1551 ;	../fb_lpc922.c:335: ET1=0;
   0373 C2 AB              1552 	clr	_IEN0_3
                    0375   1553 	C$fb_lpc922.c$336$1$1 ==.
                           1554 ;	../fb_lpc922.c:336: cs=0;
   0375 75*27 00           1555 	mov	_cs,#0x00
                    0378   1556 	C$fb_lpc922.c$337$1$1 ==.
                           1557 ;	../fb_lpc922.c:337: telpos=0;
   0378 75*26 00           1558 	mov	_telpos,#0x00
                    037B   1559 	C$fb_lpc922.c$338$1$1 ==.
                           1560 ;	../fb_lpc922.c:338: TR1=0;
   037B C2 8E              1561 	clr	_TCON_6
                    037D   1562 	C$fb_lpc922.c$339$1$1 ==.
                           1563 ;	../fb_lpc922.c:339: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   037D 74 0F              1564 	mov	a,#0x0F
   037F 55 89              1565 	anl	a,_TMOD
   0381 24 10              1566 	add	a,#0x10
   0383 F5 89              1567 	mov	_TMOD,a
                    0385   1568 	C$fb_lpc922.c$340$1$1 ==.
                           1569 ;	../fb_lpc922.c:340: TH1=0x89;					// busfree Zeit = 15 Bit (auf ACK) + 11 Bit (ACK) + 53 Bit
   0385 75 8D 89           1570 	mov	_TH1,#0x89
                    0388   1571 	C$fb_lpc922.c$341$1$1 ==.
                           1572 ;	../fb_lpc922.c:341: TL1=0xAF;
   0388 75 8B AF           1573 	mov	_TL1,#0xAF
                    038B   1574 	C$fb_lpc922.c$342$1$1 ==.
                           1575 ;	../fb_lpc922.c:342: send_ack=0;
   038B C2*0B              1576 	clr	_send_ack
                    038D   1577 	C$fb_lpc922.c$343$1$1 ==.
                           1578 ;	../fb_lpc922.c:343: send_nack=0;
   038D C2*0C              1579 	clr	_send_nack
                    038F   1580 	C$fb_lpc922.c$344$1$1 ==.
                           1581 ;	../fb_lpc922.c:344: TF1=0;
   038F C2 8F              1582 	clr	_TCON_7
                    0391   1583 	C$fb_lpc922.c$345$1$1 ==.
                           1584 ;	../fb_lpc922.c:345: TR1=1;
   0391 D2 8E              1585 	setb	_TCON_6
                    0393   1586 	C$fb_lpc922.c$346$1$1 ==.
                           1587 ;	../fb_lpc922.c:346: EX1=1;
   0393 D2 AA              1588 	setb	_IEN0_2
                    0395   1589 	C$fb_lpc922.c$347$1$1 ==.
                           1590 ;	../fb_lpc922.c:347: ET1=1;
   0395 D2 AB              1591 	setb	_IEN0_3
                    0397   1592 	C$fb_lpc922.c$348$1$1 ==.
                    0397   1593 	XG$init_rx$0$0 ==.
   0397 22                 1594 	ret
                           1595 ;------------------------------------------------------------
                           1596 ;Allocation info for local variables in function 'init_tx'
                           1597 ;------------------------------------------------------------
                           1598 ;n                         Allocated to registers r6 
                           1599 ;cs_pos                    Allocated to registers r7 
                           1600 ;------------------------------------------------------------
                    0398   1601 	G$init_tx$0$0 ==.
                    0398   1602 	C$fb_lpc922.c$351$1$1 ==.
                           1603 ;	../fb_lpc922.c:351: void init_tx(void) 		// Checksum des Telegramms berechnen und Senden initiieren
                           1604 ;	-----------------------------------------
                           1605 ;	 function init_tx
                           1606 ;	-----------------------------------------
   0398                    1607 _init_tx:
                    0398   1608 	C$fb_lpc922.c$355$1$1 ==.
                           1609 ;	../fb_lpc922.c:355: TR1=0;
   0398 C2 8E              1610 	clr	_TCON_6
                    039A   1611 	C$fb_lpc922.c$356$1$1 ==.
                           1612 ;	../fb_lpc922.c:356: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   039A 74 0F              1613 	mov	a,#0x0F
   039C 55 89              1614 	anl	a,_TMOD
   039E 24 20              1615 	add	a,#0x20
   03A0 F5 89              1616 	mov	_TMOD,a
                    03A2   1617 	C$fb_lpc922.c$357$1$1 ==.
                           1618 ;	../fb_lpc922.c:357: TH1=110;							// von state 10 auf 11
   03A2 75 8D 6E           1619 	mov	_TH1,#0x6E
                    03A5   1620 	C$fb_lpc922.c$358$1$1 ==.
                           1621 ;	../fb_lpc922.c:358: TL1=128;							// von hier bis state 10
   03A5 75 8B 80           1622 	mov	_TL1,#0x80
                    03A8   1623 	C$fb_lpc922.c$359$1$1 ==.
                           1624 ;	../fb_lpc922.c:359: TF1=0;
   03A8 C2 8F              1625 	clr	_TCON_7
                    03AA   1626 	C$fb_lpc922.c$361$1$1 ==.
                           1627 ;	../fb_lpc922.c:361: cs_pos=(telegramm[5]&0x0F)+7;		// Position der Checksum im Telegramm
   03AA 74 0F              1628 	mov	a,#0x0F
   03AC 55*0C              1629 	anl	a,(_telegramm + 0x0005)
   03AE 24 07              1630 	add	a,#0x07
   03B0 FF                 1631 	mov	r7,a
                    03B1   1632 	C$fb_lpc922.c$362$1$1 ==.
                           1633 ;	../fb_lpc922.c:362: cs=0xFF;
   03B1 75*27 FF           1634 	mov	_cs,#0xFF
                    03B4   1635 	C$fb_lpc922.c$363$1$1 ==.
                           1636 ;	../fb_lpc922.c:363: for(n=0;n<cs_pos;n++) {
   03B4 7E 00              1637 	mov	r6,#0x00
   03B6                    1638 00101$:
   03B6 C3                 1639 	clr	c
   03B7 EE                 1640 	mov	a,r6
   03B8 9F                 1641 	subb	a,r7
   03B9 50 0B              1642 	jnc	00104$
                    03BB   1643 	C$fb_lpc922.c$364$2$2 ==.
                           1644 ;	../fb_lpc922.c:364: cs^=telegramm[n];				// Checksum berechnen
   03BB EE                 1645 	mov	a,r6
   03BC 24r07              1646 	add	a,#_telegramm
   03BE F9                 1647 	mov	r1,a
   03BF E7                 1648 	mov	a,@r1
   03C0 FD                 1649 	mov	r5,a
   03C1 62*27              1650 	xrl	_cs,a
                    03C3   1651 	C$fb_lpc922.c$363$1$1 ==.
                           1652 ;	../fb_lpc922.c:363: for(n=0;n<cs_pos;n++) {
   03C3 0E                 1653 	inc	r6
   03C4 80 F0              1654 	sjmp	00101$
   03C6                    1655 00104$:
                    03C6   1656 	C$fb_lpc922.c$366$1$1 ==.
                           1657 ;	../fb_lpc922.c:366: telegramm[cs_pos]=cs;				// Checksum hinter Nutzdaten anfügen
   03C6 EF                 1658 	mov	a,r7
   03C7 24r07              1659 	add	a,#_telegramm
   03C9 F8                 1660 	mov	r0,a
   03CA A6*27              1661 	mov	@r0,_cs
                    03CC   1662 	C$fb_lpc922.c$367$1$1 ==.
                           1663 ;	../fb_lpc922.c:367: ack=0;
   03CC C2*03              1664 	clr	_ack
                    03CE   1665 	C$fb_lpc922.c$368$1$1 ==.
                           1666 ;	../fb_lpc922.c:368: nack=0;
   03CE C2*04              1667 	clr	_nack
                    03D0   1668 	C$fb_lpc922.c$369$1$1 ==.
                           1669 ;	../fb_lpc922.c:369: wait_for_ack=1;
   03D0 D2*0A              1670 	setb	_wait_for_ack
                    03D2   1671 	C$fb_lpc922.c$371$1$1 ==.
                           1672 ;	../fb_lpc922.c:371: fb_state=10;						// nächster state: senden
   03D2 75*2A 0A           1673 	mov	_fb_state,#0x0A
                    03D5   1674 	C$fb_lpc922.c$372$1$1 ==.
                           1675 ;	../fb_lpc922.c:372: fb_pattern=0;						// nächstes zu sendendes Bit, 0=Startbit
   03D5 75*29 00           1676 	mov	_fb_pattern,#0x00
                    03D8   1677 	C$fb_lpc922.c$373$1$1 ==.
                           1678 ;	../fb_lpc922.c:373: telpos=0;							// nächstes zu sendende Byte
   03D8 75*26 00           1679 	mov	_telpos,#0x00
                    03DB   1680 	C$fb_lpc922.c$374$1$1 ==.
                           1681 ;	../fb_lpc922.c:374: EX1=0;								// ext. int1 inaktiv
   03DB C2 AA              1682 	clr	_IEN0_2
                    03DD   1683 	C$fb_lpc922.c$375$1$1 ==.
                           1684 ;	../fb_lpc922.c:375: TR1=1;								// Timer 1 starten
   03DD D2 8E              1685 	setb	_TCON_6
                    03DF   1686 	C$fb_lpc922.c$376$1$1 ==.
                           1687 ;	../fb_lpc922.c:376: ET1=1;								// Timer 1 int. aktiv
   03DF D2 AB              1688 	setb	_IEN0_3
                    03E1   1689 	C$fb_lpc922.c$377$1$1 ==.
                    03E1   1690 	XG$init_tx$0$0 ==.
   03E1 22                 1691 	ret
                           1692 ;------------------------------------------------------------
                           1693 ;Allocation info for local variables in function 'gapos_in_gat'
                           1694 ;------------------------------------------------------------
                           1695 ;gal                       Allocated to stack - _bp -3
                           1696 ;gah                       Allocated to registers r7 
                           1697 ;ga_position               Allocated to registers r6 
                           1698 ;n                         Allocated to registers r5 
                           1699 ;------------------------------------------------------------
                    03E2   1700 	G$gapos_in_gat$0$0 ==.
                    03E2   1701 	C$fb_lpc922.c$384$1$1 ==.
                           1702 ;	../fb_lpc922.c:384: unsigned char gapos_in_gat(unsigned char gah, unsigned char gal)
                           1703 ;	-----------------------------------------
                           1704 ;	 function gapos_in_gat
                           1705 ;	-----------------------------------------
   03E2                    1706 _gapos_in_gat:
   03E2 C0*00              1707 	push	_bp
   03E4 85 81*00           1708 	mov	_bp,sp
   03E7 AF 82              1709 	mov	r7,dpl
                    03E9   1710 	C$fb_lpc922.c$388$1$1 ==.
                           1711 ;	../fb_lpc922.c:388: ga_position=0xFF; 			// default return Wert 0xFF = nicht gefunden
   03E9 7E FF              1712 	mov	r6,#0xFF
                    03EB   1713 	C$fb_lpc922.c$389$1$1 ==.
                           1714 ;	../fb_lpc922.c:389: if (eeprom[ADDRTAB]<0xFF && !transparency){
   03EB 90 1D 16           1715 	mov	dptr,#(_eeprom + 0x0016)
   03EE E4                 1716 	clr	a
   03EF 93                 1717 	movc	a,@a+dptr
   03F0 FD                 1718 	mov	r5,a
   03F1 BD FF 00           1719 	cjne	r5,#0xFF,00123$
   03F4                    1720 00123$:
   03F4 50 38              1721 	jnc	00107$
   03F6 20*0D 35           1722 	jb	_transparency,00107$
                    03F9   1723 	C$fb_lpc922.c$390$2$2 ==.
                           1724 ;	../fb_lpc922.c:390: if (eeprom[ADDRTAB]) {
   03F9 90 1D 16           1725 	mov	dptr,#(_eeprom + 0x0016)
   03FC E4                 1726 	clr	a
   03FD 93                 1727 	movc	a,@a+dptr
   03FE 60 2E              1728 	jz	00107$
                    0400   1729 	C$fb_lpc922.c$391$3$3 ==.
                           1730 ;	../fb_lpc922.c:391: for (n=eeprom[ADDRTAB]-1;n;n--) {
   0400 90 1D 16           1731 	mov	dptr,#(_eeprom + 0x0016)
   0403 E4                 1732 	clr	a
   0404 93                 1733 	movc	a,@a+dptr
   0405 FD                 1734 	mov	r5,a
   0406 1D                 1735 	dec	r5
   0407                    1736 00109$:
   0407 ED                 1737 	mov	a,r5
   0408 60 24              1738 	jz	00107$
                    040A   1739 	C$fb_lpc922.c$392$4$4 ==.
                           1740 ;	../fb_lpc922.c:392: if (gah==eeprom[ADDRTAB+n*2+1] && gal==eeprom[ADDRTAB+n*2+2])
   040A ED                 1741 	mov	a,r5
   040B 2D                 1742 	add	a,r5
   040C FC                 1743 	mov	r4,a
   040D 24 17              1744 	add	a,#0x17
   040F 90 1D 00           1745 	mov	dptr,#_eeprom
   0412 93                 1746 	movc	a,@a+dptr
   0413 FB                 1747 	mov	r3,a
   0414 EF                 1748 	mov	a,r7
   0415 B5 03 13           1749 	cjne	a,ar3,00111$
   0418 74 18              1750 	mov	a,#0x18
   041A 2C                 1751 	add	a,r4
   041B 90 1D 00           1752 	mov	dptr,#_eeprom
   041E 93                 1753 	movc	a,@a+dptr
   041F FC                 1754 	mov	r4,a
   0420 E5*00              1755 	mov	a,_bp
   0422 24 FD              1756 	add	a,#0xfd
   0424 F8                 1757 	mov	r0,a
   0425 E6                 1758 	mov	a,@r0
   0426 B5 04 02           1759 	cjne	a,ar4,00111$
                    0429   1760 	C$fb_lpc922.c$393$4$4 ==.
                           1761 ;	../fb_lpc922.c:393: ga_position=n;
   0429 8D 06              1762 	mov	ar6,r5
   042B                    1763 00111$:
                    042B   1764 	C$fb_lpc922.c$391$3$3 ==.
                           1765 ;	../fb_lpc922.c:391: for (n=eeprom[ADDRTAB]-1;n;n--) {
   042B 1D                 1766 	dec	r5
   042C 80 D9              1767 	sjmp	00109$
   042E                    1768 00107$:
                    042E   1769 	C$fb_lpc922.c$397$1$1 ==.
                           1770 ;	../fb_lpc922.c:397: return (ga_position);
   042E 8E 82              1771 	mov	dpl,r6
   0430 D0*00              1772 	pop	_bp
                    0432   1773 	C$fb_lpc922.c$398$1$1 ==.
                    0432   1774 	XG$gapos_in_gat$0$0 ==.
   0432 22                 1775 	ret
                           1776 ;------------------------------------------------------------
                           1777 ;Allocation info for local variables in function 'build_tel'
                           1778 ;------------------------------------------------------------
                           1779 ;objno                     Allocated to registers r7 
                           1780 ;build_ok                  Allocated to registers b0 
                           1781 ;objvalue                  Allocated to stack - _bp +1
                           1782 ;gapos                     Allocated to registers r5 r6 
                           1783 ;objtype                   Allocated to registers r6 
                           1784 ;n                         Allocated to registers r7 
                           1785 ;length                    Allocated to registers r6 
                           1786 ;asspos                    Allocated to registers r4 
                           1787 ;type                      Allocated to registers b2 
                           1788 ;repeatflag                Allocated to registers b1 
                           1789 ;------------------------------------------------------------
                    0433   1790 	G$build_tel$0$0 ==.
                    0433   1791 	C$fb_lpc922.c$403$1$1 ==.
                           1792 ;	../fb_lpc922.c:403: __bit build_tel(unsigned char objno)
                           1793 ;	-----------------------------------------
                           1794 ;	 function build_tel
                           1795 ;	-----------------------------------------
   0433                    1796 _build_tel:
   0433 C0*00              1797 	push	_bp
   0435 E5 81              1798 	mov	a,sp
   0437 F5*00              1799 	mov	_bp,a
   0439 24 04              1800 	add	a,#0x04
   043B F5 81              1801 	mov	sp,a
   043D AF 82              1802 	mov	r7,dpl
                    043F   1803 	C$fb_lpc922.c$405$1$1 ==.
                           1804 ;	../fb_lpc922.c:405: __bit build_ok=0;
   043F C2*00              1805 	clr	b0
                    0441   1806 	C$fb_lpc922.c$407$1$1 ==.
                           1807 ;	../fb_lpc922.c:407: unsigned int gapos=0xFE;
   0441 7D FE              1808 	mov	r5,#0xFE
   0443 7E 00              1809 	mov	r6,#0x00
                    0445   1810 	C$fb_lpc922.c$412$1$1 ==.
                           1811 ;	../fb_lpc922.c:412: repeatflag=objno&0x20;
   0445 EF                 1812 	mov	a,r7
   0446 A2 E5              1813 	mov	c,acc[5]
   0448 E4                 1814 	clr	a
   0449 33                 1815 	rlc	a
   044A FC                 1816 	mov	r4,a
   044B 24 FF              1817 	add	a,#0xff
   044D 92*00              1818 	mov	b1,c
                    044F   1819 	C$fb_lpc922.c$414$1$1 ==.
                           1820 ;	../fb_lpc922.c:414: if(objno<128) {		// Multicast
   044F BF 80 00           1821 	cjne	r7,#0x80,00158$
   0452                    1822 00158$:
   0452 40 03              1823 	jc	00159$
   0454 02s05r7F           1824 	ljmp	00132$
   0457                    1825 00159$:
                    0457   1826 	C$fb_lpc922.c$415$1$1 ==.
                           1827 ;	../fb_lpc922.c:415: type=(objno&0x40);	// bei Multicast ist type0 normal und type1 response telegramm
   0457 C0 05              1828 	push	ar5
   0459 C0 06              1829 	push	ar6
   045B EF                 1830 	mov	a,r7
   045C 23                 1831 	rl	a
   045D 23                 1832 	rl	a
   045E 54 01              1833 	anl	a,#0x01
   0460 24 FF              1834 	add	a,#0xff
   0462 92*00              1835 	mov	b2,c
                    0464   1836 	C$fb_lpc922.c$416$2$2 ==.
                           1837 ;	../fb_lpc922.c:416: objno&=0x1F;
   0464 53 07 1F           1838 	anl	ar7,#0x1F
                    0467   1839 	C$fb_lpc922.c$418$2$2 ==.
                           1840 ;	../fb_lpc922.c:418: objvalue=read_obj_value(objno);		// Objektwert lesen
   0467 8F 82              1841 	mov	dpl,r7
   0469 C0 07              1842 	push	ar7
   046B C0 05              1843 	push	ar5
   046D C0*00              1844 	push	bits
   046F 12s00r00           1845 	lcall	_read_obj_value
   0472 AA 82              1846 	mov	r2,dpl
   0474 AB 83              1847 	mov	r3,dph
   0476 AC F0              1848 	mov	r4,b
   0478 FE                 1849 	mov	r6,a
   0479 D0*00              1850 	pop	bits
   047B D0 05              1851 	pop	ar5
   047D D0 07              1852 	pop	ar7
   047F A8*00              1853 	mov	r0,_bp
   0481 08                 1854 	inc	r0
   0482 A6 02              1855 	mov	@r0,ar2
   0484 08                 1856 	inc	r0
   0485 A6 03              1857 	mov	@r0,ar3
   0487 08                 1858 	inc	r0
   0488 A6 04              1859 	mov	@r0,ar4
   048A 08                 1860 	inc	r0
   048B A6 06              1861 	mov	@r0,ar6
                    048D   1862 	C$fb_lpc922.c$421$2$2 ==.
                           1863 ;	../fb_lpc922.c:421: asspos=eeprom[ASSOCTABPTR]+1+2*objno;
   048D 90 1D 11           1864 	mov	dptr,#(_eeprom + 0x0011)
   0490 E4                 1865 	clr	a
   0491 93                 1866 	movc	a,@a+dptr
   0492 FE                 1867 	mov	r6,a
   0493 0E                 1868 	inc	r6
   0494 EF                 1869 	mov	a,r7
   0495 2F                 1870 	add	a,r7
   0496 FD                 1871 	mov	r5,a
   0497 2E                 1872 	add	a,r6
                    0498   1873 	C$fb_lpc922.c$422$2$2 ==.
                           1874 ;	../fb_lpc922.c:422: if(eeprom[asspos+1]==objno) gapos=eeprom[asspos];
   0498 FC                 1875 	mov	r4,a
   0499 04                 1876 	inc	a
   049A 90 1D 00           1877 	mov	dptr,#_eeprom
   049D 93                 1878 	movc	a,@a+dptr
   049E FE                 1879 	mov	r6,a
   049F B5 07 02           1880 	cjne	a,ar7,00160$
   04A2 80 06              1881 	sjmp	00161$
   04A4                    1882 00160$:
   04A4 D0 06              1883 	pop	ar6
   04A6 D0 05              1884 	pop	ar5
   04A8 80 0F              1885 	sjmp	00102$
   04AA                    1886 00161$:
   04AA D0 06              1887 	pop	ar6
   04AC D0 05              1888 	pop	ar5
   04AE 8C 82              1889 	mov	dpl,r4
   04B0 75 83 1D           1890 	mov	dph,#(_eeprom >> 8)
   04B3 E4                 1891 	clr	a
   04B4 93                 1892 	movc	a,@a+dptr
   04B5 FC                 1893 	mov	r4,a
   04B6 FD                 1894 	mov	r5,a
   04B7 7E 00              1895 	mov	r6,#0x00
   04B9                    1896 00102$:
                    04B9   1897 	C$fb_lpc922.c$424$2$2 ==.
                           1898 ;	../fb_lpc922.c:424: if (gapos!=0xFE) // wenn keine Gruppenadresse hinterlegt nix tun
   04B9 BD FE 06           1899 	cjne	r5,#0xFE,00162$
   04BC BE 00 03           1900 	cjne	r6,#0x00,00162$
   04BF 02s06r5A           1901 	ljmp	00133$
   04C2                    1902 00162$:
                    04C2   1903 	C$fb_lpc922.c$426$3$3 ==.
                           1904 ;	../fb_lpc922.c:426: telegramm[0]=0xBC;
   04C2 75*07 BC           1905 	mov	_telegramm,#0xBC
                    04C5   1906 	C$fb_lpc922.c$427$3$3 ==.
                           1907 ;	../fb_lpc922.c:427: telegramm[1]=eeprom[ADDRTAB+1];
   04C5 90 1D 17           1908 	mov	dptr,#(_eeprom + 0x0017)
   04C8 E4                 1909 	clr	a
   04C9 93                 1910 	movc	a,@a+dptr
   04CA FC                 1911 	mov	r4,a
   04CB 8C*08              1912 	mov	(_telegramm + 0x0001),r4
                    04CD   1913 	C$fb_lpc922.c$428$3$3 ==.
                           1914 ;	../fb_lpc922.c:428: telegramm[2]=eeprom[ADDRTAB+2];
   04CD 90 1D 18           1915 	mov	dptr,#(_eeprom + 0x0018)
   04D0 E4                 1916 	clr	a
   04D1 93                 1917 	movc	a,@a+dptr
   04D2 FC                 1918 	mov	r4,a
   04D3 8C*09              1919 	mov	(_telegramm + 0x0002),r4
                    04D5   1920 	C$fb_lpc922.c$429$3$3 ==.
                           1921 ;	../fb_lpc922.c:429: telegramm[3]=eeprom[ADDRTAB+1+gapos*2];
   04D5 ED                 1922 	mov	a,r5
   04D6 2D                 1923 	add	a,r5
   04D7 FD                 1924 	mov	r5,a
   04D8 24 17              1925 	add	a,#0x17
   04DA 90 1D 00           1926 	mov	dptr,#_eeprom
   04DD 93                 1927 	movc	a,@a+dptr
   04DE FE                 1928 	mov	r6,a
   04DF 8E*0A              1929 	mov	(_telegramm + 0x0003),r6
                    04E1   1930 	C$fb_lpc922.c$430$3$3 ==.
                           1931 ;	../fb_lpc922.c:430: telegramm[4]=eeprom[ADDRTAB+2+gapos*2];
   04E1 74 18              1932 	mov	a,#0x18
   04E3 2D                 1933 	add	a,r5
   04E4 90 1D 00           1934 	mov	dptr,#_eeprom
   04E7 93                 1935 	movc	a,@a+dptr
   04E8 FE                 1936 	mov	r6,a
   04E9 8E*0B              1937 	mov	(_telegramm + 0x0004),r6
                    04EB   1938 	C$fb_lpc922.c$431$3$3 ==.
                           1939 ;	../fb_lpc922.c:431: telegramm[6]=0x00;
   04EB 75*0D 00           1940 	mov	(_telegramm + 0x0006),#0x00
                    04EE   1941 	C$fb_lpc922.c$432$3$3 ==.
                           1942 ;	../fb_lpc922.c:432: if (type) telegramm[7]=0x40;		// read_value_response Telegramm (angefordert)
   04EE 30*00 05           1943 	jnb	b2,00104$
   04F1 75*0E 40           1944 	mov	(_telegramm + 0x0007),#0x40
   04F4 80 03              1945 	sjmp	00105$
   04F6                    1946 00104$:
                    04F6   1947 	C$fb_lpc922.c$433$3$3 ==.
                           1948 ;	../fb_lpc922.c:433: else telegramm[7]=0x80;				// write_value_request Telegramm (nicht angefordert)
   04F6 75*0E 80           1949 	mov	(_telegramm + 0x0007),#0x80
   04F9                    1950 00105$:
                    04F9   1951 	C$fb_lpc922.c$435$3$3 ==.
                           1952 ;	../fb_lpc922.c:435: objtype=eeprom[eeprom[COMMSTABPTR]+objno+objno+objno+4];
   04F9 90 1D 12           1953 	mov	dptr,#(_eeprom + 0x0012)
   04FC E4                 1954 	clr	a
   04FD 93                 1955 	movc	a,@a+dptr
   04FE 2F                 1956 	add	a,r7
   04FF 2F                 1957 	add	a,r7
   0500 FE                 1958 	mov	r6,a
   0501 2F                 1959 	add	a,r7
   0502 24 04              1960 	add	a,#0x04
   0504 90 1D 00           1961 	mov	dptr,#_eeprom
   0507 93                 1962 	movc	a,@a+dptr
                    0508   1963 	C$fb_lpc922.c$437$3$3 ==.
                           1964 ;	../fb_lpc922.c:437: if(objtype>6) length=objtype-5; else length=1;
   0508 FE                 1965 	mov  r6,a
   0509 24 F9              1966 	add	a,#0xff - 0x06
   050B 50 06              1967 	jnc	00107$
   050D EE                 1968 	mov	a,r6
   050E 24 FB              1969 	add	a,#0xFB
   0510 FE                 1970 	mov	r6,a
   0511 80 02              1971 	sjmp	00108$
   0513                    1972 00107$:
   0513 7E 01              1973 	mov	r6,#0x01
   0515                    1974 00108$:
                    0515   1975 	C$fb_lpc922.c$438$3$3 ==.
                           1976 ;	../fb_lpc922.c:438: telegramm[5]=0xE0+length;
   0515 74 E0              1977 	mov	a,#0xE0
   0517 2E                 1978 	add	a,r6
   0518 F5*0C              1979 	mov	(_telegramm + 0x0005),a
                    051A   1980 	C$fb_lpc922.c$439$3$3 ==.
                           1981 ;	../fb_lpc922.c:439: if (length>1) telegramm[length+6]=objvalue; else telegramm[7]+=(objvalue&0x3F);
   051A EE                 1982 	mov	a,r6
   051B 24 FE              1983 	add	a,#0xff - 0x01
   051D 50 0F              1984 	jnc	00110$
   051F 74 06              1985 	mov	a,#0x06
   0521 2E                 1986 	add	a,r6
   0522 24r07              1987 	add	a,#_telegramm
   0524 F9                 1988 	mov	r1,a
   0525 A8*00              1989 	mov	r0,_bp
   0527 08                 1990 	inc	r0
   0528 86 05              1991 	mov	ar5,@r0
   052A A7 05              1992 	mov	@r1,ar5
   052C 80 10              1993 	sjmp	00111$
   052E                    1994 00110$:
   052E A8*00              1995 	mov	r0,_bp
   0530 08                 1996 	inc	r0
   0531 74 3F              1997 	mov	a,#0x3F
   0533 56                 1998 	anl	a,@r0
   0534 FA                 1999 	mov	r2,a
   0535 E4                 2000 	clr	a
   0536 FB                 2001 	mov	r3,a
   0537 FC                 2002 	mov	r4,a
   0538 FD                 2003 	mov	r5,a
   0539 EA                 2004 	mov	a,r2
   053A 25*0E              2005 	add	a,(_telegramm + 0x0007)
   053C F5*0E              2006 	mov	(_telegramm + 0x0007),a
   053E                    2007 00111$:
                    053E   2008 	C$fb_lpc922.c$440$3$3 ==.
                           2009 ;	../fb_lpc922.c:440: if (length>2) telegramm[length+5]=objvalue>>8;
   053E EE                 2010 	mov	a,r6
   053F 24 FD              2011 	add	a,#0xff - 0x02
   0541 50 0E              2012 	jnc	00113$
   0543 74 05              2013 	mov	a,#0x05
   0545 2E                 2014 	add	a,r6
   0546 24r07              2015 	add	a,#_telegramm
   0548 F9                 2016 	mov	r1,a
   0549 A8*00              2017 	mov	r0,_bp
   054B 08                 2018 	inc	r0
   054C 08                 2019 	inc	r0
   054D 86 05              2020 	mov	ar5,@r0
   054F A7 05              2021 	mov	@r1,ar5
   0551                    2022 00113$:
                    0551   2023 	C$fb_lpc922.c$441$3$3 ==.
                           2024 ;	../fb_lpc922.c:441: if (length>3) telegramm[length+4]=objvalue>>16;
   0551 EE                 2025 	mov	a,r6
   0552 24 FC              2026 	add	a,#0xff - 0x03
   0554 50 0F              2027 	jnc	00115$
   0556 74 04              2028 	mov	a,#0x04
   0558 2E                 2029 	add	a,r6
   0559 24r07              2030 	add	a,#_telegramm
   055B F9                 2031 	mov	r1,a
   055C A8*00              2032 	mov	r0,_bp
   055E 08                 2033 	inc	r0
   055F 08                 2034 	inc	r0
   0560 08                 2035 	inc	r0
   0561 86 05              2036 	mov	ar5,@r0
   0563 A7 05              2037 	mov	@r1,ar5
   0565                    2038 00115$:
                    0565   2039 	C$fb_lpc922.c$442$3$3 ==.
                           2040 ;	../fb_lpc922.c:442: if (length>4) telegramm[length+3]=objvalue>>24;
   0565 EE                 2041 	mov	a,r6
   0566 24 FB              2042 	add	a,#0xff - 0x04
   0568 50 10              2043 	jnc	00117$
   056A 74 03              2044 	mov	a,#0x03
   056C 2E                 2045 	add	a,r6
   056D 24r07              2046 	add	a,#_telegramm
   056F F9                 2047 	mov	r1,a
   0570 A8*00              2048 	mov	r0,_bp
   0572 08                 2049 	inc	r0
   0573 08                 2050 	inc	r0
   0574 08                 2051 	inc	r0
   0575 08                 2052 	inc	r0
   0576 86 06              2053 	mov	ar6,@r0
   0578 A7 06              2054 	mov	@r1,ar6
   057A                    2055 00117$:
                    057A   2056 	C$fb_lpc922.c$444$3$3 ==.
                           2057 ;	../fb_lpc922.c:444: build_ok=1;
   057A D2*00              2058 	setb	b0
   057C 02s06r5A           2059 	ljmp	00133$
   057F                    2060 00132$:
                    057F   2061 	C$fb_lpc922.c$448$2$4 ==.
                           2062 ;	../fb_lpc922.c:448: telegramm[0]=0xB0;				// Control Byte
   057F 75*07 B0           2063 	mov	_telegramm,#0xB0
                    0582   2064 	C$fb_lpc922.c$449$2$4 ==.
                           2065 ;	../fb_lpc922.c:449: telegramm[1]=eeprom[ADDRTAB+1];	// Quelladresse ist phys. Adresse
   0582 90 1D 17           2066 	mov	dptr,#(_eeprom + 0x0017)
   0585 E4                 2067 	clr	a
   0586 93                 2068 	movc	a,@a+dptr
   0587 FE                 2069 	mov	r6,a
   0588 8E*08              2070 	mov	(_telegramm + 0x0001),r6
                    058A   2071 	C$fb_lpc922.c$450$2$4 ==.
                           2072 ;	../fb_lpc922.c:450: telegramm[2]=eeprom[ADDRTAB+2];
   058A 90 1D 18           2073 	mov	dptr,#(_eeprom + 0x0018)
   058D E4                 2074 	clr	a
   058E 93                 2075 	movc	a,@a+dptr
   058F FE                 2076 	mov	r6,a
   0590 8E*09              2077 	mov	(_telegramm + 0x0002),r6
                    0592   2078 	C$fb_lpc922.c$451$2$4 ==.
                           2079 ;	../fb_lpc922.c:451: telegramm[3]=conh;
   0592 85*00*0A           2080 	mov	(_telegramm + 0x0003),_conh
                    0595   2081 	C$fb_lpc922.c$452$2$4 ==.
                           2082 ;	../fb_lpc922.c:452: telegramm[4]=conl;
   0595 85*01*0B           2083 	mov	(_telegramm + 0x0004),_conl
                    0598   2084 	C$fb_lpc922.c$454$2$4 ==.
                           2085 ;	../fb_lpc922.c:454: switch(objno&0x1F) {
   0598 53 07 1F           2086 	anl	ar7,#0x1F
   059B EF                 2087 	mov	a,r7
   059C 24 FA              2088 	add	a,#0xff - 0x05
   059E 50 03              2089 	jnc	00169$
   05A0 02s06r58           2090 	ljmp	00130$
   05A3                    2091 00169$:
   05A3 EF                 2092 	mov	a,r7
   05A4 2F                 2093 	add	a,r7
   05A5 2F                 2094 	add	a,r7
   05A6 90s05rAA           2095 	mov	dptr,#00170$
   05A9 73                 2096 	jmp	@a+dptr
   05AA                    2097 00170$:
   05AA 02s06r58           2098 	ljmp	00130$
   05AD 02s05rBC           2099 	ljmp	00120$
   05B0 02s05rC8           2100 	ljmp	00121$
   05B3 02s05rDF           2101 	ljmp	00122$
   05B6 02s05rF0           2102 	ljmp	00123$
   05B9 02s06r50           2103 	ljmp	00129$
                    05BC   2104 	C$fb_lpc922.c$455$3$5 ==.
                           2105 ;	../fb_lpc922.c:455: case 1:	// NCD ACK Quittierung (129)
   05BC                    2106 00120$:
                    05BC   2107 	C$fb_lpc922.c$456$3$5 ==.
                           2108 ;	../fb_lpc922.c:456: telegramm[5]=0x60;					// DRL
   05BC 75*0C 60           2109 	mov	(_telegramm + 0x0005),#0x60
                    05BF   2110 	C$fb_lpc922.c$457$3$5 ==.
                           2111 ;	../fb_lpc922.c:457: telegramm[6]=senders_pcount + 0xC2;	// Bit 6,7(TCPI = 11 NCD Quittierung) und Bit 0,1 (10=ACK)
   05BF 74 C2              2112 	mov	a,#0xC2
   05C1 25*06              2113 	add	a,_senders_pcount
   05C3 F5*0D              2114 	mov	(_telegramm + 0x0006),a
                    05C5   2115 	C$fb_lpc922.c$459$3$5 ==.
                           2116 ;	../fb_lpc922.c:459: break;
   05C5 02s06r58           2117 	ljmp	00130$
                    05C8   2118 	C$fb_lpc922.c$460$3$5 ==.
                           2119 ;	../fb_lpc922.c:460: case 2:	// read mask response (130)
   05C8                    2120 00121$:
                    05C8   2121 	C$fb_lpc922.c$461$3$5 ==.
                           2122 ;	../fb_lpc922.c:461: telegramm[5]=0x63;					// DRL
   05C8 75*0C 63           2123 	mov	(_telegramm + 0x0005),#0x63
                    05CB   2124 	C$fb_lpc922.c$462$3$5 ==.
                           2125 ;	../fb_lpc922.c:462: telegramm[6]=pcount + 0x43;			// bei response immer eigene Paketnummer senden
   05CB 74 43              2126 	mov	a,#0x43
   05CD 25*02              2127 	add	a,_pcount
   05CF F5*0D              2128 	mov	(_telegramm + 0x0006),a
                    05D1   2129 	C$fb_lpc922.c$463$3$5 ==.
                           2130 ;	../fb_lpc922.c:463: telegramm[7]=0x40;
   05D1 75*0E 40           2131 	mov	(_telegramm + 0x0007),#0x40
                    05D4   2132 	C$fb_lpc922.c$464$3$5 ==.
                           2133 ;	../fb_lpc922.c:464: telegramm[8]=0x00;
   05D4 75*0F 00           2134 	mov	(_telegramm + 0x0008),#0x00
                    05D7   2135 	C$fb_lpc922.c$465$3$5 ==.
                           2136 ;	../fb_lpc922.c:465: telegramm[9]=0x12;					// Maskenversion 1 = BCU1
   05D7 75*10 12           2137 	mov	(_telegramm + 0x0009),#0x12
                    05DA   2138 	C$fb_lpc922.c$466$3$5 ==.
                           2139 ;	../fb_lpc922.c:466: inc_pcount=1;
   05DA D2*0F              2140 	setb	_inc_pcount
                    05DC   2141 	C$fb_lpc922.c$467$3$5 ==.
                           2142 ;	../fb_lpc922.c:467: break;
   05DC 02s06r58           2143 	ljmp	00130$
                    05DF   2144 	C$fb_lpc922.c$468$3$5 ==.
                           2145 ;	../fb_lpc922.c:468: case 3:	// read PA response (131)
   05DF                    2146 00122$:
                    05DF   2147 	C$fb_lpc922.c$469$3$5 ==.
                           2148 ;	../fb_lpc922.c:469: telegramm[3]=0x00;			// Zieladresse auf 0000, da Broadcast
   05DF 75*0A 00           2149 	mov	(_telegramm + 0x0003),#0x00
                    05E2   2150 	C$fb_lpc922.c$470$3$5 ==.
                           2151 ;	../fb_lpc922.c:470: telegramm[4]=0x00;
   05E2 75*0B 00           2152 	mov	(_telegramm + 0x0004),#0x00
                    05E5   2153 	C$fb_lpc922.c$471$3$5 ==.
                           2154 ;	../fb_lpc922.c:471: telegramm[5]=0xE1;			// DRL
   05E5 75*0C E1           2155 	mov	(_telegramm + 0x0005),#0xE1
                    05E8   2156 	C$fb_lpc922.c$472$3$5 ==.
                           2157 ;	../fb_lpc922.c:472: telegramm[6]=0x01;
   05E8 75*0D 01           2158 	mov	(_telegramm + 0x0006),#0x01
                    05EB   2159 	C$fb_lpc922.c$473$3$5 ==.
                           2160 ;	../fb_lpc922.c:473: telegramm[7]=0x40;
   05EB 75*0E 40           2161 	mov	(_telegramm + 0x0007),#0x40
                    05EE   2162 	C$fb_lpc922.c$474$3$5 ==.
                           2163 ;	../fb_lpc922.c:474: break;
                    05EE   2164 	C$fb_lpc922.c$475$3$5 ==.
                           2165 ;	../fb_lpc922.c:475: case 4:	// memory_read_response (132)
   05EE 80 68              2166 	sjmp	00130$
   05F0                    2167 00123$:
                    05F0   2168 	C$fb_lpc922.c$476$1$1 ==.
                           2169 ;	../fb_lpc922.c:476: for(n=0;n<mem_length;n++) {
   05F0 7F 00              2170 	mov	r7,#0x00
   05F2                    2171 00136$:
   05F2 C3                 2172 	clr	c
   05F3 EF                 2173 	mov	a,r7
   05F4 95*03              2174 	subb	a,_mem_length
   05F6 50 3C              2175 	jnc	00139$
                    05F8   2176 	C$fb_lpc922.c$477$4$6 ==.
                           2177 ;	../fb_lpc922.c:477: if (mem_adrh==0) {
   05F8 E5*04              2178 	mov	a,_mem_adrh
   05FA 70 26              2179 	jnz	00127$
                    05FC   2180 	C$fb_lpc922.c$478$5$7 ==.
                           2181 ;	../fb_lpc922.c:478: telegramm[n+10]=0;//userram[mem_adrl+n];
   05FC 74 0A              2182 	mov	a,#0x0A
   05FE 2F                 2183 	add	a,r7
   05FF 24r07              2184 	add	a,#_telegramm
   0601 F8                 2185 	mov	r0,a
   0602 76 00              2186 	mov	@r0,#0x00
                    0604   2187 	C$fb_lpc922.c$479$5$7 ==.
                           2188 ;	../fb_lpc922.c:479: if(mem_adrl+n==0x60) telegramm[n+10]=status60;	// ausser bei 0x60
   0604 AD*05              2189 	mov	r5,_mem_adrl
   0606 7E 00              2190 	mov	r6,#0x00
   0608 8F 03              2191 	mov	ar3,r7
   060A 7C 00              2192 	mov	r4,#0x00
   060C EB                 2193 	mov	a,r3
   060D 2D                 2194 	add	a,r5
   060E FD                 2195 	mov	r5,a
   060F EC                 2196 	mov	a,r4
   0610 3E                 2197 	addc	a,r6
   0611 FE                 2198 	mov	r6,a
   0612 BD 60 1C           2199 	cjne	r5,#0x60,00138$
   0615 BE 00 19           2200 	cjne	r6,#0x00,00138$
   0618 74 0A              2201 	mov	a,#0x0A
   061A 2F                 2202 	add	a,r7
   061B 24r07              2203 	add	a,#_telegramm
   061D F8                 2204 	mov	r0,a
   061E A6*2E              2205 	mov	@r0,_status60
   0620 80 0F              2206 	sjmp	00138$
   0622                    2207 00127$:
                    0622   2208 	C$fb_lpc922.c$481$4$6 ==.
                           2209 ;	../fb_lpc922.c:481: else telegramm[n+10]=eeprom[mem_adrl+n];//else if (mem_adrh==1)
   0622 74 0A              2210 	mov	a,#0x0A
   0624 2F                 2211 	add	a,r7
   0625 24r07              2212 	add	a,#_telegramm
   0627 F9                 2213 	mov	r1,a
   0628 EF                 2214 	mov	a,r7
   0629 25*05              2215 	add	a,_mem_adrl
   062B 90 1D 00           2216 	mov	dptr,#_eeprom
   062E 93                 2217 	movc	a,@a+dptr
   062F FE                 2218 	mov	r6,a
   0630 F7                 2219 	mov	@r1,a
   0631                    2220 00138$:
                    0631   2221 	C$fb_lpc922.c$476$3$5 ==.
                           2222 ;	../fb_lpc922.c:476: for(n=0;n<mem_length;n++) {
   0631 0F                 2223 	inc	r7
   0632 80 BE              2224 	sjmp	00136$
   0634                    2225 00139$:
                    0634   2226 	C$fb_lpc922.c$484$3$5 ==.
                           2227 ;	../fb_lpc922.c:484: telegramm[5]=mem_length+0x63;		// DRL (Anzahl Bytes + 3)
   0634 74 63              2228 	mov	a,#0x63
   0636 25*03              2229 	add	a,_mem_length
   0638 F5*0C              2230 	mov	(_telegramm + 0x0005),a
                    063A   2231 	C$fb_lpc922.c$485$3$5 ==.
                           2232 ;	../fb_lpc922.c:485: telegramm[6]=pcount|0x42;			// eigener Paketzaehler, TCPI und ersten beiden Befehlsbits
   063A 74 42              2233 	mov	a,#0x42
   063C 45*02              2234 	orl	a,_pcount
   063E F5*0D              2235 	mov	(_telegramm + 0x0006),a
                    0640   2236 	C$fb_lpc922.c$486$3$5 ==.
                           2237 ;	../fb_lpc922.c:486: telegramm[7]=mem_length|0x40;		// letzten 2 Befehlsbits
   0640 74 40              2238 	mov	a,#0x40
   0642 45*03              2239 	orl	a,_mem_length
   0644 F5*0E              2240 	mov	(_telegramm + 0x0007),a
                    0646   2241 	C$fb_lpc922.c$487$3$5 ==.
                           2242 ;	../fb_lpc922.c:487: telegramm[8]=mem_adrh;
   0646 85*04*0F           2243 	mov	(_telegramm + 0x0008),_mem_adrh
                    0649   2244 	C$fb_lpc922.c$488$3$5 ==.
                           2245 ;	../fb_lpc922.c:488: telegramm[9]=mem_adrl;
   0649 85*05*10           2246 	mov	(_telegramm + 0x0009),_mem_adrl
                    064C   2247 	C$fb_lpc922.c$489$3$5 ==.
                           2248 ;	../fb_lpc922.c:489: inc_pcount=1;
   064C D2*0F              2249 	setb	_inc_pcount
                    064E   2250 	C$fb_lpc922.c$490$3$5 ==.
                           2251 ;	../fb_lpc922.c:490: break;
                    064E   2252 	C$fb_lpc922.c$491$3$5 ==.
                           2253 ;	../fb_lpc922.c:491: case 5:	// T-disconnect (133)
   064E 80 08              2254 	sjmp	00130$
   0650                    2255 00129$:
                    0650   2256 	C$fb_lpc922.c$492$3$5 ==.
                           2257 ;	../fb_lpc922.c:492: telegramm[5]=0x60;
   0650 75*0C 60           2258 	mov	(_telegramm + 0x0005),#0x60
                    0653   2259 	C$fb_lpc922.c$493$3$5 ==.
                           2260 ;	../fb_lpc922.c:493: telegramm[6]=0x81;
   0653 75*0D 81           2261 	mov	(_telegramm + 0x0006),#0x81
                    0656   2262 	C$fb_lpc922.c$494$3$5 ==.
                           2263 ;	../fb_lpc922.c:494: connected=0;
   0656 C2*0E              2264 	clr	_connected
                    0658   2265 	C$fb_lpc922.c$496$2$4 ==.
                           2266 ;	../fb_lpc922.c:496: }
   0658                    2267 00130$:
                    0658   2268 	C$fb_lpc922.c$497$2$4 ==.
                           2269 ;	../fb_lpc922.c:497: build_ok=1;
   0658 D2*00              2270 	setb	b0
   065A                    2271 00133$:
                    065A   2272 	C$fb_lpc922.c$499$1$1 ==.
                           2273 ;	../fb_lpc922.c:499: if(repeatflag) telegramm[0]&=0xDF;		// Wiederholungsbit löschen für Wiederholtelegramm
   065A 30*00 06           2274 	jnb	b1,00135$
   065D 74 DF              2275 	mov	a,#0xDF
   065F 55*07              2276 	anl	a,_telegramm
   0661 F5*07              2277 	mov	_telegramm,a
   0663                    2278 00135$:
                    0663   2279 	C$fb_lpc922.c$500$1$1 ==.
                           2280 ;	../fb_lpc922.c:500: return(build_ok);
   0663 A2*00              2281 	mov	c,b0
   0665 85*00 81           2282 	mov	sp,_bp
   0668 D0*00              2283 	pop	_bp
                    066A   2284 	C$fb_lpc922.c$501$1$1 ==.
                    066A   2285 	XG$build_tel$0$0 ==.
   066A 22                 2286 	ret
                           2287 ;------------------------------------------------------------
                           2288 ;Allocation info for local variables in function 'send_obj_value'
                           2289 ;------------------------------------------------------------
                           2290 ;objno                     Allocated to registers r7 
                           2291 ;success                   Allocated to registers b0 
                           2292 ;------------------------------------------------------------
                    066B   2293 	G$send_obj_value$0$0 ==.
                    066B   2294 	C$fb_lpc922.c$504$1$1 ==.
                           2295 ;	../fb_lpc922.c:504: __bit send_obj_value(unsigned char objno)
                           2296 ;	-----------------------------------------
                           2297 ;	 function send_obj_value
                           2298 ;	-----------------------------------------
   066B                    2299 _send_obj_value:
   066B AF 82              2300 	mov	r7,dpl
                    066D   2301 	C$fb_lpc922.c$506$1$1 ==.
                           2302 ;	../fb_lpc922.c:506: __bit success=0;
   066D C2*00              2303 	clr	b0
                    066F   2304 	C$fb_lpc922.c$508$1$1 ==.
                           2305 ;	../fb_lpc922.c:508: if (objno < 0x40 && (read_objflags(objno) & 0x44) != 0x44)
   066F BF 40 00           2306 	cjne	r7,#0x40,00112$
   0672                    2307 00112$:
   0672 50 1B              2308 	jnc	00104$
   0674 8F 82              2309 	mov	dpl,r7
   0676 C0 07              2310 	push	ar7
   0678 C0*00              2311 	push	bits
   067A 12s09rB7           2312 	lcall	_read_objflags
   067D E5 82              2313 	mov	a,dpl
   067F D0*00              2314 	pop	bits
   0681 D0 07              2315 	pop	ar7
   0683 54 44              2316 	anl	a,#0x44
   0685 FE                 2317 	mov	r6,a
   0686 BE 44 02           2318 	cjne	r6,#0x44,00114$
   0689 80 04              2319 	sjmp	00104$
   068B                    2320 00114$:
                    068B   2321 	C$fb_lpc922.c$510$2$2 ==.
                           2322 ;	../fb_lpc922.c:510: success=1;
   068B D2*00              2323 	setb	b0
   068D 80 2A              2324 	sjmp	00105$
   068F                    2325 00104$:
                    068F   2326 	C$fb_lpc922.c$512$1$1 ==.
                           2327 ;	../fb_lpc922.c:512: else if(tx_nextsend!=((tx_nextwrite+1)&0x07)) {
   068F AD*2C              2328 	mov	r5,_tx_nextwrite
   0691 7E 00              2329 	mov	r6,#0x00
   0693 0D                 2330 	inc	r5
   0694 BD 00 01           2331 	cjne	r5,#0x00,00115$
   0697 0E                 2332 	inc	r6
   0698                    2333 00115$:
   0698 53 05 07           2334 	anl	ar5,#0x07
   069B 7E 00              2335 	mov	r6,#0x00
   069D AB*2D              2336 	mov	r3,_tx_nextsend
   069F 7C 00              2337 	mov	r4,#0x00
   06A1 EB                 2338 	mov	a,r3
   06A2 B5 05 06           2339 	cjne	a,ar5,00116$
   06A5 EC                 2340 	mov	a,r4
   06A6 B5 06 02           2341 	cjne	a,ar6,00116$
   06A9 80 0E              2342 	sjmp	00105$
   06AB                    2343 00116$:
                    06AB   2344 	C$fb_lpc922.c$513$2$3 ==.
                           2345 ;	../fb_lpc922.c:513: tx_buffer[tx_nextwrite]=objno;
   06AB E5*2C              2346 	mov	a,_tx_nextwrite
   06AD 24r1E              2347 	add	a,#_tx_buffer
   06AF F8                 2348 	mov	r0,a
   06B0 A6 07              2349 	mov	@r0,ar7
                    06B2   2350 	C$fb_lpc922.c$514$2$3 ==.
                           2351 ;	../fb_lpc922.c:514: tx_nextwrite++;
   06B2 05*2C              2352 	inc	_tx_nextwrite
                    06B4   2353 	C$fb_lpc922.c$515$2$3 ==.
                           2354 ;	../fb_lpc922.c:515: tx_nextwrite&=0x07;
   06B4 53*2C 07           2355 	anl	_tx_nextwrite,#0x07
                    06B7   2356 	C$fb_lpc922.c$516$2$3 ==.
                           2357 ;	../fb_lpc922.c:516: success=1;
   06B7 D2*00              2358 	setb	b0
   06B9                    2359 00105$:
                    06B9   2360 	C$fb_lpc922.c$519$1$1 ==.
                           2361 ;	../fb_lpc922.c:519: TR1=1;	// statemachine starten falls vorher in state 0 gestoppt
   06B9 D2 8E              2362 	setb	_TCON_6
                    06BB   2363 	C$fb_lpc922.c$520$1$1 ==.
                           2364 ;	../fb_lpc922.c:520: return(success);
   06BB A2*00              2365 	mov	c,b0
                    06BD   2366 	C$fb_lpc922.c$521$1$1 ==.
                    06BD   2367 	XG$send_obj_value$0$0 ==.
   06BD 22                 2368 	ret
                           2369 ;------------------------------------------------------------
                           2370 ;Allocation info for local variables in function 'process_tel'
                           2371 ;------------------------------------------------------------
                           2372 ;tpdu                      Allocated to registers r6 
                           2373 ;apdu                      Allocated to stack - _bp +1
                           2374 ;ab                        Allocated to registers r7 
                           2375 ;n                         Allocated to stack - _bp +2
                           2376 ;objno                     Allocated to registers r3 
                           2377 ;objflags                  Allocated to registers r2 
                           2378 ;gapos                     Allocated to registers r7 
                           2379 ;atp                       Allocated to registers r6 
                           2380 ;assmax                    Allocated to registers r5 
                           2381 ;asspos                    Allocated to registers r6 
                           2382 ;sloc0                     Allocated to stack - _bp +11
                           2383 ;sloc1                     Allocated to stack - _bp +12
                           2384 ;sloc2                     Allocated to stack - _bp +3
                           2385 ;------------------------------------------------------------
                    06BE   2386 	G$process_tel$0$0 ==.
                    06BE   2387 	C$fb_lpc922.c$526$1$1 ==.
                           2388 ;	../fb_lpc922.c:526: void process_tel(void)
                           2389 ;	-----------------------------------------
                           2390 ;	 function process_tel
                           2391 ;	-----------------------------------------
   06BE                    2392 _process_tel:
   06BE C0*00              2393 	push	_bp
   06C0 E5 81              2394 	mov	a,sp
   06C2 F5*00              2395 	mov	_bp,a
   06C4 24 04              2396 	add	a,#0x04
   06C6 F5 81              2397 	mov	sp,a
                    06C8   2398 	C$fb_lpc922.c$530$1$1 ==.
                           2399 ;	../fb_lpc922.c:530: tel_arrived=0;
   06C8 C2*06              2400 	clr	_tel_arrived
                    06CA   2401 	C$fb_lpc922.c$531$1$1 ==.
                           2402 ;	../fb_lpc922.c:531: tpdu=telegramm[6]&0xC3;
   06CA AF*0D              2403 	mov	r7,(_telegramm + 0x0006)
   06CC 74 C3              2404 	mov	a,#0xC3
   06CE 5F                 2405 	anl	a,r7
   06CF FE                 2406 	mov	r6,a
                    06D0   2407 	C$fb_lpc922.c$532$1$1 ==.
                           2408 ;	../fb_lpc922.c:532: apdu=telegramm[7];
   06D0 A8*00              2409 	mov	r0,_bp
   06D2 08                 2410 	inc	r0
   06D3 A6*0E              2411 	mov	@r0,(_telegramm + 0x0007)
                    06D5   2412 	C$fb_lpc922.c$535$1$1 ==.
                           2413 ;	../fb_lpc922.c:535: if(telegramm[3]==0 && telegramm[4]==0) {	// nur wenn wenn Zieladresse = 0
   06D5 E5*0A              2414 	mov	a,(_telegramm + 0x0003)
   06D7 FC                 2415 	mov	r4,a
   06D8 70 36              2416 	jnz	00167$
   06DA E5*0B              2417 	mov	a,(_telegramm + 0x0004)
   06DC 70 32              2418 	jnz	00167$
                    06DE   2419 	C$fb_lpc922.c$536$2$2 ==.
                           2420 ;	../fb_lpc922.c:536: if(status60 & 0x01) {					// und nur im prog mode
   06DE E5*2E              2421 	mov	a,_status60
   06E0 20 E0 03           2422 	jb	acc.0,00220$
   06E3 02s09r96           2423 	ljmp	00174$
   06E6                    2424 00220$:
                    06E6   2425 	C$fb_lpc922.c$537$3$3 ==.
                           2426 ;	../fb_lpc922.c:537: if(tpdu==BROADCAST_PDU_SET_PA_REQ && apdu==SET_PHYSADDR_REQUEST) set_pa();				// 00000000 11000000
   06E6 EE                 2427 	mov	a,r6
   06E7 70 0D              2428 	jnz	00102$
   06E9 A8*00              2429 	mov	r0,_bp
   06EB 08                 2430 	inc	r0
   06EC B6 C0 07           2431 	cjne	@r0,#0xC0,00102$
   06EF C0 06              2432 	push	ar6
   06F1 12s09r9C           2433 	lcall	_set_pa
   06F4 D0 06              2434 	pop	ar6
   06F6                    2435 00102$:
                    06F6   2436 	C$fb_lpc922.c$538$3$3 ==.
                           2437 ;	../fb_lpc922.c:538: if(tpdu==BROADCAST_PDU_READ_PA && apdu==READ_PHYSADDR_REQUEST) send_obj_value(READ_PHYSADDR_RESPONSE);	// 00000001 00000000
   06F6 BE 01 02           2438 	cjne	r6,#0x01,00224$
   06F9 80 03              2439 	sjmp	00225$
   06FB                    2440 00224$:
   06FB 02s09r96           2441 	ljmp	00174$
   06FE                    2442 00225$:
   06FE A8*00              2443 	mov	r0,_bp
   0700 08                 2444 	inc	r0
   0701 E6                 2445 	mov	a,@r0
   0702 60 03              2446 	jz	00226$
   0704 02s09r96           2447 	ljmp	00174$
   0707                    2448 00226$:
   0707 75 82 83           2449 	mov	dpl,#0x83
   070A 12s06r6B           2450 	lcall	_send_obj_value
   070D 02s09r96           2451 	ljmp	00174$
   0710                    2452 00167$:
                    0710   2453 	C$fb_lpc922.c$543$2$4 ==.
                           2454 ;	../fb_lpc922.c:543: if((telegramm[5]&0x80)==0x00) {	// Destination Adress Flag Bit 7, 0=phys. Adr., 1=Gruppenadr.
   0710 E5*0C              2455 	mov	a,(_telegramm + 0x0005)
   0712 30 E7 03           2456 	jnb	acc.7,00227$
   0715 02s08rE1           2457 	ljmp	00164$
   0718                    2458 00227$:
                    0718   2459 	C$fb_lpc922.c$544$3$5 ==.
                           2460 ;	../fb_lpc922.c:544: if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) {	// nur wenn es die eigene phys. Adr. ist
   0718 90 1D 17           2461 	mov	dptr,#(_eeprom + 0x0017)
   071B E4                 2462 	clr	a
   071C 93                 2463 	movc	a,@a+dptr
   071D FB                 2464 	mov	r3,a
   071E EC                 2465 	mov	a,r4
   071F B5 03 02           2466 	cjne	a,ar3,00228$
   0722 80 03              2467 	sjmp	00229$
   0724                    2468 00228$:
   0724 02s09r96           2469 	ljmp	00174$
   0727                    2470 00229$:
   0727 90 1D 18           2471 	mov	dptr,#(_eeprom + 0x0018)
   072A E4                 2472 	clr	a
   072B 93                 2473 	movc	a,@a+dptr
   072C FB                 2474 	mov	r3,a
   072D B5*0B 02           2475 	cjne	a,(_telegramm + 0x0004),00230$
   0730 80 03              2476 	sjmp	00231$
   0732                    2477 00230$:
   0732 02s09r96           2478 	ljmp	00174$
   0735                    2479 00231$:
                    0735   2480 	C$fb_lpc922.c$545$4$6 ==.
                           2481 ;	../fb_lpc922.c:545: connected_timeout=0;//wenn ein unicast uns betrifft den timeout rücksetzen
   0735 75*2F 00           2482 	mov	_connected_timeout,#0x00
                    0738   2483 	C$fb_lpc922.c$548$4$6 ==.
                           2484 ;	../fb_lpc922.c:548: switch (tpdu) {	// transport layer control field
   0738 BE 42 02           2485 	cjne	r6,#0x42,00232$
   073B 80 1B              2486 	sjmp	00109$
   073D                    2487 00232$:
   073D BE 43 03           2488 	cjne	r6,#0x43,00233$
   0740 02s08r75           2489 	ljmp	00128$
   0743                    2490 00233$:
   0743 BE 80 03           2491 	cjne	r6,#0x80,00234$
   0746 02s08r9B           2492 	ljmp	00133$
   0749                    2493 00234$:
   0749 BE 81 03           2494 	cjne	r6,#0x81,00235$
   074C 02s08rBD           2495 	ljmp	00136$
   074F                    2496 00235$:
   074F BE 83 03           2497 	cjne	r6,#0x83,00236$
   0752 02s08rD6           2498 	ljmp	00140$
   0755                    2499 00236$:
   0755 02s09r96           2500 	ljmp	00174$
                    0758   2501 	C$fb_lpc922.c$550$5$7 ==.
                           2502 ;	../fb_lpc922.c:550: case DATA_PDU_MEMORY_OPERATIONS:
   0758                    2503 00109$:
                    0758   2504 	C$fb_lpc922.c$551$5$7 ==.
                           2505 ;	../fb_lpc922.c:551: if(connected){
   0758 20*0E 03           2506 	jb	_connected,00237$
   075B 02s09r96           2507 	ljmp	00174$
   075E                    2508 00237$:
                    075E   2509 	C$fb_lpc922.c$552$6$8 ==.
                           2510 ;	../fb_lpc922.c:552: senders_pcount=telegramm[6]&0x3C;
   075E 74 3C              2511 	mov	a,#0x3C
   0760 5F                 2512 	anl	a,r7
   0761 F5*06              2513 	mov	_senders_pcount,a
                    0763   2514 	C$fb_lpc922.c$553$6$8 ==.
                           2515 ;	../fb_lpc922.c:553: apdu &= 0xF0;						// da bei memory operations nur obere 4 Bits aktiv
   0763 A8*00              2516 	mov	r0,_bp
   0765 08                 2517 	inc	r0
   0766 E6                 2518 	mov	a,@r0
   0767 54 F0              2519 	anl	a,#0xF0
   0769 F6                 2520 	mov	@r0,a
                    076A   2521 	C$fb_lpc922.c$554$6$8 ==.
                           2522 ;	../fb_lpc922.c:554: if(apdu==WRITE_MEMORY_REQUEST) {	// 01pppp10 1000xxxx
   076A A8*00              2523 	mov	r0,_bp
   076C 08                 2524 	inc	r0
   076D B6 80 02           2525 	cjne	@r0,#0x80,00238$
   0770 80 03              2526 	sjmp	00239$
   0772                    2527 00238$:
   0772 02s08r54           2528 	ljmp	00123$
   0775                    2529 00239$:
                    0775   2530 	C$fb_lpc922.c$555$7$9 ==.
                           2531 ;	../fb_lpc922.c:555: send_obj_value(NCD_ACK);
   0775 75 82 81           2532 	mov	dpl,#0x81
   0778 12s06r6B           2533 	lcall	_send_obj_value
                    077B   2534 	C$fb_lpc922.c$560$8$10 ==.
                           2535 ;	../fb_lpc922.c:560: if(telegramm[8]){
   077B E5*0F              2536 	mov	a,(_telegramm + 0x0008)
   077D FB                 2537 	mov	r3,a
   077E 70 03              2538 	jnz	00240$
   0780 02s08r54           2539 	ljmp	00123$
   0783                    2540 00240$:
                    0783   2541 	C$fb_lpc922.c$561$9$11 ==.
                           2542 ;	../fb_lpc922.c:561: ab=telegramm[7]&0x0F;		// Anzahl Bytes
   0783 74 0F              2543 	mov	a,#0x0F
   0785 55*0E              2544 	anl	a,(_telegramm + 0x0007)
   0787 FF                 2545 	mov	r7,a
                    0788   2546 	C$fb_lpc922.c$563$9$11 ==.
                           2547 ;	../fb_lpc922.c:563: while(fb_state!=0);					// warten falls noch gesendet wird
   0788                    2548 00110$:
   0788 E5*2A              2549 	mov	a,_fb_state
   078A 70 FC              2550 	jnz	00110$
                    078C   2551 	C$fb_lpc922.c$565$9$11 ==.
                           2552 ;	../fb_lpc922.c:565: EA=0;
   078C C2 AF              2553 	clr	_IEN0_7
                    078E   2554 	C$fb_lpc922.c$566$9$11 ==.
                           2555 ;	../fb_lpc922.c:566: START_WRITECYCLE;					// load command, leert das pageregister
   078E 75 E4 00           2556 	mov	_FMCON,#0x00
                    0791   2557 	C$fb_lpc922.c$567$10$12 ==.
                           2558 ;	../fb_lpc922.c:567: for(n=0;n<ab;n++) {
   0791 AE*10              2559 	mov	r6,(_telegramm + 0x0009)
   0793 74 01              2560 	mov	a,#0x01
   0795 5B                 2561 	anl	a,r3
   0796 24 1C              2562 	add	a,#0x1C
   0798 FC                 2563 	mov	r4,a
   0799 A8*00              2564 	mov	r0,_bp
   079B 08                 2565 	inc	r0
   079C 08                 2566 	inc	r0
   079D 76 00              2567 	mov	@r0,#0x00
   079F                    2568 00170$:
   079F A8*00              2569 	mov	r0,_bp
   07A1 08                 2570 	inc	r0
   07A2 08                 2571 	inc	r0
   07A3 C3                 2572 	clr	c
   07A4 E6                 2573 	mov	a,@r0
   07A5 9F                 2574 	subb	a,r7
   07A6 40 03              2575 	jc	00242$
   07A8 02s08r4F           2576 	ljmp	00173$
   07AB                    2577 00242$:
                    07AB   2578 	C$fb_lpc922.c$568$10$12 ==.
                           2579 ;	../fb_lpc922.c:568: if(telegramm[8]==0 && (telegramm[9]+n)==0x60) status60=telegramm[10+n];
   07AB EB                 2580 	mov	a,r3
   07AC 70 3C              2581 	jnz	00114$
   07AE C0 03              2582 	push	ar3
   07B0 E5*00              2583 	mov	a,_bp
   07B2 24 03              2584 	add	a,#0x03
   07B4 F8                 2585 	mov	r0,a
   07B5 A6 06              2586 	mov	@r0,ar6
   07B7 08                 2587 	inc	r0
   07B8 76 00              2588 	mov	@r0,#0x00
   07BA A8*00              2589 	mov	r0,_bp
   07BC 08                 2590 	inc	r0
   07BD 08                 2591 	inc	r0
   07BE 86 02              2592 	mov	ar2,@r0
   07C0 7D 00              2593 	mov	r5,#0x00
   07C2 E5*00              2594 	mov	a,_bp
   07C4 24 03              2595 	add	a,#0x03
   07C6 F8                 2596 	mov	r0,a
   07C7 EA                 2597 	mov	a,r2
   07C8 26                 2598 	add	a,@r0
   07C9 FA                 2599 	mov	r2,a
   07CA ED                 2600 	mov	a,r5
   07CB 08                 2601 	inc	r0
   07CC 36                 2602 	addc	a,@r0
   07CD FD                 2603 	mov	r5,a
   07CE BA 60 05           2604 	cjne	r2,#0x60,00244$
   07D1 BD 00 02           2605 	cjne	r5,#0x00,00244$
   07D4 80 04              2606 	sjmp	00245$
   07D6                    2607 00244$:
   07D6 D0 03              2608 	pop	ar3
   07D8 80 10              2609 	sjmp	00114$
   07DA                    2610 00245$:
   07DA D0 03              2611 	pop	ar3
   07DC A8*00              2612 	mov	r0,_bp
   07DE 08                 2613 	inc	r0
   07DF 08                 2614 	inc	r0
   07E0 74 0A              2615 	mov	a,#0x0A
   07E2 26                 2616 	add	a,@r0
   07E3 24r07              2617 	add	a,#_telegramm
   07E5 F9                 2618 	mov	r1,a
   07E6 87*2E              2619 	mov	_status60,@r1
   07E8 80 16              2620 	sjmp	00115$
   07EA                    2621 00114$:
                    07EA   2622 	C$fb_lpc922.c$578$11$13 ==.
                           2623 ;	../fb_lpc922.c:578: WRITE_BYTE(telegramm[8],telegramm[9]+n,telegramm[n+10]);
   07EA 8C E7              2624 	mov	_FMADRH,r4
   07EC A8*00              2625 	mov	r0,_bp
   07EE 08                 2626 	inc	r0
   07EF 08                 2627 	inc	r0
   07F0 E6                 2628 	mov	a,@r0
   07F1 2E                 2629 	add	a,r6
   07F2 F5 E6              2630 	mov	_FMADRL,a
   07F4 A8*00              2631 	mov	r0,_bp
   07F6 08                 2632 	inc	r0
   07F7 08                 2633 	inc	r0
   07F8 74 0A              2634 	mov	a,#0x0A
   07FA 26                 2635 	add	a,@r0
   07FB 24r07              2636 	add	a,#_telegramm
   07FD F9                 2637 	mov	r1,a
   07FE 87 E5              2638 	mov	_FMDATA,@r1
   0800                    2639 00115$:
                    0800   2640 	C$fb_lpc922.c$580$10$12 ==.
                           2641 ;	../fb_lpc922.c:580: if ((((telegramm[9]+n)&0x3F)==0x3F) && n!=(ab-1)) {		// Ende des 64-Byte Pageregisters, also zwischendurch flashen
   0800 8E 02              2642 	mov	ar2,r6
   0802 7D 00              2643 	mov	r5,#0x00
   0804 A8*00              2644 	mov	r0,_bp
   0806 08                 2645 	inc	r0
   0807 08                 2646 	inc	r0
   0808 E5*00              2647 	mov	a,_bp
   080A 24 03              2648 	add	a,#0x03
   080C F9                 2649 	mov	r1,a
   080D E6                 2650 	mov	a,@r0
   080E F7                 2651 	mov	@r1,a
   080F 09                 2652 	inc	r1
   0810 77 00              2653 	mov	@r1,#0x00
   0812 E5*00              2654 	mov	a,_bp
   0814 24 03              2655 	add	a,#0x03
   0816 F8                 2656 	mov	r0,a
   0817 E6                 2657 	mov	a,@r0
   0818 2A                 2658 	add	a,r2
   0819 FA                 2659 	mov	r2,a
   081A 08                 2660 	inc	r0
   081B E6                 2661 	mov	a,@r0
   081C 3D                 2662 	addc	a,r5
   081D 53 02 3F           2663 	anl	ar2,#0x3F
   0820 7D 00              2664 	mov	r5,#0x00
   0822 BA 3F 22           2665 	cjne	r2,#0x3F,00172$
   0825 BD 00 1F           2666 	cjne	r5,#0x00,00172$
   0828 8F 02              2667 	mov	ar2,r7
   082A 7D 00              2668 	mov	r5,#0x00
   082C 1A                 2669 	dec	r2
   082D BA FF 01           2670 	cjne	r2,#0xFF,00248$
   0830 1D                 2671 	dec	r5
   0831                    2672 00248$:
   0831 E5*00              2673 	mov	a,_bp
   0833 24 03              2674 	add	a,#0x03
   0835 F8                 2675 	mov	r0,a
   0836 E6                 2676 	mov	a,@r0
   0837 B5 02 07           2677 	cjne	a,ar2,00249$
   083A 08                 2678 	inc	r0
   083B E6                 2679 	mov	a,@r0
   083C B5 05 02           2680 	cjne	a,ar5,00249$
   083F 80 06              2681 	sjmp	00172$
   0841                    2682 00249$:
                    0841   2683 	C$fb_lpc922.c$581$11$14 ==.
                           2684 ;	../fb_lpc922.c:581: STOP_WRITECYCLE;			// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   0841 75 E4 68           2685 	mov	_FMCON,#0x68
                    0844   2686 	C$fb_lpc922.c$582$11$14 ==.
                           2687 ;	../fb_lpc922.c:582: START_WRITECYCLE;		// load command, leert das pageregister
   0844 75 E4 00           2688 	mov	_FMCON,#0x00
   0847                    2689 00172$:
                    0847   2690 	C$fb_lpc922.c$567$9$11 ==.
                           2691 ;	../fb_lpc922.c:567: for(n=0;n<ab;n++) {
   0847 A8*00              2692 	mov	r0,_bp
   0849 08                 2693 	inc	r0
   084A 08                 2694 	inc	r0
   084B 06                 2695 	inc	@r0
   084C 02s07r9F           2696 	ljmp	00170$
   084F                    2697 00173$:
                    084F   2698 	C$fb_lpc922.c$585$9$11 ==.
                           2699 ;	../fb_lpc922.c:585: STOP_WRITECYCLE;					// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   084F 75 E4 68           2700 	mov	_FMCON,#0x68
                    0852   2701 	C$fb_lpc922.c$586$9$11 ==.
                           2702 ;	../fb_lpc922.c:586: EA=1;
   0852 D2 AF              2703 	setb	_IEN0_7
   0854                    2704 00123$:
                    0854   2705 	C$fb_lpc922.c$590$6$8 ==.
                           2706 ;	../fb_lpc922.c:590: if(apdu==READ_MEMORY_REQUEST) {		// 01pppp10 0000xxxx
   0854 A8*00              2707 	mov	r0,_bp
   0856 08                 2708 	inc	r0
   0857 E6                 2709 	mov	a,@r0
   0858 60 03              2710 	jz	00250$
   085A 02s09r96           2711 	ljmp	00174$
   085D                    2712 00250$:
                    085D   2713 	C$fb_lpc922.c$591$7$15 ==.
                           2714 ;	../fb_lpc922.c:591: mem_length=telegramm[7];		// Anzahl Bytes für späteres(!) memory Auslesen
   085D 85*0E*03           2715 	mov	_mem_length,(_telegramm + 0x0007)
                    0860   2716 	C$fb_lpc922.c$592$7$15 ==.
                           2717 ;	../fb_lpc922.c:592: mem_adrh = telegramm[8];		// Adresse
   0860 85*0F*04           2718 	mov	_mem_adrh,(_telegramm + 0x0008)
                    0863   2719 	C$fb_lpc922.c$593$7$15 ==.
                           2720 ;	../fb_lpc922.c:593: mem_adrl = telegramm[9];
   0863 85*10*05           2721 	mov	_mem_adrl,(_telegramm + 0x0009)
                    0866   2722 	C$fb_lpc922.c$594$7$15 ==.
                           2723 ;	../fb_lpc922.c:594: send_obj_value(NCD_ACK);
   0866 75 82 81           2724 	mov	dpl,#0x81
   0869 12s06r6B           2725 	lcall	_send_obj_value
                    086C   2726 	C$fb_lpc922.c$595$7$15 ==.
                           2727 ;	../fb_lpc922.c:595: send_obj_value(READ_MEMORY_RESPONSE);
   086C 75 82 84           2728 	mov	dpl,#0x84
   086F 12s06r6B           2729 	lcall	_send_obj_value
                    0872   2730 	C$fb_lpc922.c$598$5$7 ==.
                           2731 ;	../fb_lpc922.c:598: break;
   0872 02s09r96           2732 	ljmp	00174$
                    0875   2733 	C$fb_lpc922.c$600$5$7 ==.
                           2734 ;	../fb_lpc922.c:600: case DATA_PDU_MISC_OPERATIONS:
   0875                    2735 00128$:
                    0875   2736 	C$fb_lpc922.c$601$5$7 ==.
                           2737 ;	../fb_lpc922.c:601: senders_pcount=telegramm[6]&0x3C;
   0875 74 3C              2738 	mov	a,#0x3C
   0877 5F                 2739 	anl	a,r7
   0878 F5*06              2740 	mov	_senders_pcount,a
                    087A   2741 	C$fb_lpc922.c$602$5$7 ==.
                           2742 ;	../fb_lpc922.c:602: if(apdu==RESTART_REQUEST) {		// 01pppp11 10000000
   087A A8*00              2743 	mov	r0,_bp
   087C 08                 2744 	inc	r0
   087D B6 80 03           2745 	cjne	@r0,#0x80,00130$
                    0880   2746 	C$fb_lpc922.c$603$6$16 ==.
                           2747 ;	../fb_lpc922.c:603: AUXR1|=0x08;				// Software Reset
   0880 43 A2 08           2748 	orl	_AUXR1,#0x08
   0883                    2749 00130$:
                    0883   2750 	C$fb_lpc922.c$605$5$7 ==.
                           2751 ;	../fb_lpc922.c:605: if(apdu==READ_MASK_VERSION_REQUEST) {		// 01pppp11 00000000
   0883 A8*00              2752 	mov	r0,_bp
   0885 08                 2753 	inc	r0
   0886 E6                 2754 	mov	a,@r0
   0887 60 03              2755 	jz	00253$
   0889 02s09r96           2756 	ljmp	00174$
   088C                    2757 00253$:
                    088C   2758 	C$fb_lpc922.c$606$6$17 ==.
                           2759 ;	../fb_lpc922.c:606: send_obj_value(NCD_ACK);
   088C 75 82 81           2760 	mov	dpl,#0x81
   088F 12s06r6B           2761 	lcall	_send_obj_value
                    0892   2762 	C$fb_lpc922.c$607$6$17 ==.
                           2763 ;	../fb_lpc922.c:607: send_obj_value(READ_MASK_VERSION_RESPONSE);
   0892 75 82 82           2764 	mov	dpl,#0x82
   0895 12s06r6B           2765 	lcall	_send_obj_value
                    0898   2766 	C$fb_lpc922.c$609$5$7 ==.
                           2767 ;	../fb_lpc922.c:609: break;
   0898 02s09r96           2768 	ljmp	00174$
                    089B   2769 	C$fb_lpc922.c$611$5$7 ==.
                           2770 ;	../fb_lpc922.c:611: case CONNECT_PDU:	// 10000000 xxxxxxxx
   089B                    2771 00133$:
                    089B   2772 	C$fb_lpc922.c$612$5$7 ==.
                           2773 ;	../fb_lpc922.c:612: if(!connected) {				// wenn bereits verbunden: ignorieren
   089B 30*0E 03           2774 	jnb	_connected,00254$
   089E 02s09r96           2775 	ljmp	00174$
   08A1                    2776 00254$:
                    08A1   2777 	C$fb_lpc922.c$613$6$18 ==.
                           2778 ;	../fb_lpc922.c:613: connected=1;
   08A1 D2*0E              2779 	setb	_connected
                    08A3   2780 	C$fb_lpc922.c$614$6$18 ==.
                           2781 ;	../fb_lpc922.c:614: conh=telegramm[1];			// phys. Adresse des Verbindungspartners
   08A3 85*08*00           2782 	mov	_conh,(_telegramm + 0x0001)
                    08A6   2783 	C$fb_lpc922.c$615$6$18 ==.
                           2784 ;	../fb_lpc922.c:615: conl=telegramm[2];
   08A6 85*09*01           2785 	mov	_conl,(_telegramm + 0x0002)
                    08A9   2786 	C$fb_lpc922.c$616$6$18 ==.
                           2787 ;	../fb_lpc922.c:616: pcount=0;					// Paketzaehler zuruecksetzen
   08A9 75*02 00           2788 	mov	_pcount,#0x00
                    08AC   2789 	C$fb_lpc922.c$617$6$18 ==.
                           2790 ;	../fb_lpc922.c:617: inc_pcount=0;
   08AC C2*0F              2791 	clr	_inc_pcount
                    08AE   2792 	C$fb_lpc922.c$618$6$18 ==.
                           2793 ;	../fb_lpc922.c:618: RTCCON=0x60;	//RTC stoppen
   08AE 75 D1 60           2794 	mov	_RTCCON,#0x60
                    08B1   2795 	C$fb_lpc922.c$619$6$18 ==.
                           2796 ;	../fb_lpc922.c:619: RTCH=0x0B;      // reload Real Time Clock, 52ms
   08B1 75 D2 0B           2797 	mov	_RTCH,#0x0B
                    08B4   2798 	C$fb_lpc922.c$620$6$18 ==.
                           2799 ;	../fb_lpc922.c:620: RTCL=0xB3;
   08B4 75 D3 B3           2800 	mov	_RTCL,#0xB3
                    08B7   2801 	C$fb_lpc922.c$621$6$18 ==.
                           2802 ;	../fb_lpc922.c:621: RTCCON=0x61;	// RTC starten
   08B7 75 D1 61           2803 	mov	_RTCCON,#0x61
                    08BA   2804 	C$fb_lpc922.c$624$5$7 ==.
                           2805 ;	../fb_lpc922.c:624: break;
   08BA 02s09r96           2806 	ljmp	00174$
                    08BD   2807 	C$fb_lpc922.c$626$5$7 ==.
                           2808 ;	../fb_lpc922.c:626: case DISCONNECT_PDU:	// 10000001 xxxxxxxx
   08BD                    2809 00136$:
                    08BD   2810 	C$fb_lpc922.c$627$5$7 ==.
                           2811 ;	../fb_lpc922.c:627: if(conh==telegramm[1] && conl==telegramm[2] )	{	// nur abbauen, wenn verbunden und Anforderung vom Verbindungspartner, kein ACK senden
   08BD E5*08              2812 	mov	a,(_telegramm + 0x0001)
   08BF B5*00 02           2813 	cjne	a,_conh,00255$
   08C2 80 03              2814 	sjmp	00256$
   08C4                    2815 00255$:
   08C4 02s09r96           2816 	ljmp	00174$
   08C7                    2817 00256$:
   08C7 E5*09              2818 	mov	a,(_telegramm + 0x0002)
   08C9 B5*01 02           2819 	cjne	a,_conl,00257$
   08CC 80 03              2820 	sjmp	00258$
   08CE                    2821 00257$:
   08CE 02s09r96           2822 	ljmp	00174$
   08D1                    2823 00258$:
                    08D1   2824 	C$fb_lpc922.c$628$6$19 ==.
                           2825 ;	../fb_lpc922.c:628: connected=0;// warum: && connected ???
   08D1 C2*0E              2826 	clr	_connected
                    08D3   2827 	C$fb_lpc922.c$630$5$7 ==.
                           2828 ;	../fb_lpc922.c:630: break;
   08D3 02s09r96           2829 	ljmp	00174$
                    08D6   2830 	C$fb_lpc922.c$632$5$7 ==.
                           2831 ;	../fb_lpc922.c:632: case NACK_PDU:	// 11pppp11 xxxxxxxx
   08D6                    2832 00140$:
                    08D6   2833 	C$fb_lpc922.c$633$5$7 ==.
                           2834 ;	../fb_lpc922.c:633: send_obj_value(T_DISCONNECT);
   08D6 75 82 85           2835 	mov	dpl,#0x85
   08D9 12s06r6B           2836 	lcall	_send_obj_value
                    08DC   2837 	C$fb_lpc922.c$634$5$7 ==.
                           2838 ;	../fb_lpc922.c:634: connected=0;//connected_timeout=111; spartipp 5 Byte wenn send.. weg kommt.
   08DC C2*0E              2839 	clr	_connected
                    08DE   2840 	C$fb_lpc922.c$636$1$4 ==.
                           2841 ;	../fb_lpc922.c:636: }
   08DE 02s09r96           2842 	ljmp	00174$
   08E1                    2843 00164$:
                    08E1   2844 	C$fb_lpc922.c$641$2$4 ==.
                           2845 ;	../fb_lpc922.c:641: else if(tpdu==GROUP_PDU){
   08E1 EE                 2846 	mov	a,r6
   08E2 60 03              2847 	jz	00259$
   08E4 02s09r96           2848 	ljmp	00174$
   08E7                    2849 00259$:
                    08E7   2850 	C$fb_lpc922.c$646$3$20 ==.
                           2851 ;	../fb_lpc922.c:646: gapos = gapos_in_gat(telegramm[3], telegramm[4]);
   08E7 C0*0B              2852 	push	(_telegramm + 0x0004)
   08E9 8C 82              2853 	mov	dpl,r4
   08EB 12s03rE2           2854 	lcall	_gapos_in_gat
   08EE AF 82              2855 	mov	r7,dpl
   08F0 15 81              2856 	dec	sp
                    08F2   2857 	C$fb_lpc922.c$648$3$20 ==.
                           2858 ;	../fb_lpc922.c:648: if (gapos != 0xFF)
   08F2 BF FF 03           2859 	cjne	r7,#0xFF,00260$
   08F5 02s09r96           2860 	ljmp	00174$
   08F8                    2861 00260$:
                    08F8   2862 	C$fb_lpc922.c$650$4$21 ==.
                           2863 ;	../fb_lpc922.c:650: atp = eeprom[ASSOCTABPTR];  // Association Table Pointer
   08F8 90 1D 11           2864 	mov	dptr,#(_eeprom + 0x0011)
   08FB E4                 2865 	clr	a
   08FC 93                 2866 	movc	a,@a+dptr
                    08FD   2867 	C$fb_lpc922.c$651$4$21 ==.
                           2868 ;	../fb_lpc922.c:651: assmax = atp + eeprom[atp] * 2;	// Erster Eintrag = Anzahl Einträge
   08FD FE                 2869 	mov	r6,a
   08FE F5 82              2870 	mov	dpl,a
   0900 75 83 1D           2871 	mov	dph,#(_eeprom >> 8)
   0903 E4                 2872 	clr	a
   0904 93                 2873 	movc	a,@a+dptr
   0905 25 E0              2874 	add	a,acc
   0907 2E                 2875 	add	a,r6
   0908 FD                 2876 	mov	r5,a
                    0909   2877 	C$fb_lpc922.c$655$4$21 ==.
                           2878 ;	../fb_lpc922.c:655: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   0909 0E                 2879 	inc	r6
   090A A8*00              2880 	mov	r0,_bp
   090C 08                 2881 	inc	r0
   090D 74 C0              2882 	mov	a,#0xC0
   090F 56                 2883 	anl	a,@r0
   0910 FC                 2884 	mov	r4,a
   0911 E4                 2885 	clr	a
   0912 BC 80 01           2886 	cjne	r4,#0x80,00261$
   0915 04                 2887 	inc	a
   0916                    2888 00261$:
   0916 FC                 2889 	mov	r4,a
   0917                    2890 00155$:
   0917 C3                 2891 	clr	c
   0918 EE                 2892 	mov	a,r6
   0919 9D                 2893 	subb	a,r5
   091A 40 03              2894 	jc	00263$
   091C 02s09r96           2895 	ljmp	00174$
   091F                    2896 00263$:
                    091F   2897 	C$fb_lpc922.c$659$5$22 ==.
                           2898 ;	../fb_lpc922.c:659: if (gapos == eeprom[asspos])
   091F 8E 82              2899 	mov	dpl,r6
   0921 75 83 1D           2900 	mov	dph,#(_eeprom >> 8)
   0924 E4                 2901 	clr	a
   0925 93                 2902 	movc	a,@a+dptr
   0926 FB                 2903 	mov	r3,a
   0927 EF                 2904 	mov	a,r7
   0928 B5 03 66           2905 	cjne	a,ar3,00157$
                    092B   2906 	C$fb_lpc922.c$661$6$23 ==.
                           2907 ;	../fb_lpc922.c:661: objno = eeprom[asspos + 1];	     // Objektnummer
   092B EE                 2908 	mov	a,r6
   092C 04                 2909 	inc	a
   092D 90 1D 00           2910 	mov	dptr,#_eeprom
   0930 93                 2911 	movc	a,@a+dptr
                    0931   2912 	C$fb_lpc922.c$662$6$23 ==.
                           2913 ;	../fb_lpc922.c:662: objflags = read_objflags(objno); // Objekt Flags lesen
   0931 FB                 2914 	mov	r3,a
   0932 F5 82              2915 	mov	dpl,a
   0934 C0 07              2916 	push	ar7
   0936 C0 06              2917 	push	ar6
   0938 C0 05              2918 	push	ar5
   093A C0 04              2919 	push	ar4
   093C C0 03              2920 	push	ar3
   093E 12s09rB7           2921 	lcall	_read_objflags
   0941 AA 82              2922 	mov	r2,dpl
   0943 D0 03              2923 	pop	ar3
   0945 D0 04              2924 	pop	ar4
   0947 D0 05              2925 	pop	ar5
   0949 D0 06              2926 	pop	ar6
   094B D0 07              2927 	pop	ar7
                    094D   2928 	C$fb_lpc922.c$665$6$23 ==.
                           2929 ;	../fb_lpc922.c:665: if((apdu&0xC0)==WRITE_GROUP)
   094D EC                 2930 	mov	a,r4
   094E 60 2E              2931 	jz	00148$
                    0950   2932 	C$fb_lpc922.c$670$1$1 ==.
                           2933 ;	../fb_lpc922.c:670: if ((objflags & 0x14) == 0x14)
   0950 C0 04              2934 	push	ar4
   0952 74 14              2935 	mov	a,#0x14
   0954 5A                 2936 	anl	a,r2
   0955 FC                 2937 	mov	r4,a
   0956 BC 14 02           2938 	cjne	r4,#0x14,00267$
   0959 80 04              2939 	sjmp	00268$
   095B                    2940 00267$:
   095B D0 04              2941 	pop	ar4
   095D 80 1F              2942 	sjmp	00148$
   095F                    2943 00268$:
   095F D0 04              2944 	pop	ar4
                    0961   2945 	C$fb_lpc922.c$671$7$24 ==.
                           2946 ;	../fb_lpc922.c:671: write_value_req(objno);
   0961 8B 82              2947 	mov	dpl,r3
   0963 C0 07              2948 	push	ar7
   0965 C0 06              2949 	push	ar6
   0967 C0 05              2950 	push	ar5
   0969 C0 04              2951 	push	ar4
   096B C0 03              2952 	push	ar3
   096D C0 02              2953 	push	ar2
   096F 12s00r00           2954 	lcall	_write_value_req
   0972 D0 02              2955 	pop	ar2
   0974 D0 03              2956 	pop	ar3
   0976 D0 04              2957 	pop	ar4
   0978 D0 05              2958 	pop	ar5
   097A D0 06              2959 	pop	ar6
   097C D0 07              2960 	pop	ar7
   097E                    2961 00148$:
                    097E   2962 	C$fb_lpc922.c$673$6$23 ==.
                           2963 ;	../fb_lpc922.c:673: if(apdu==READ_GROUP_REQUEST)
   097E A8*00              2964 	mov	r0,_bp
   0980 08                 2965 	inc	r0
   0981 E6                 2966 	mov	a,@r0
   0982 70 0D              2967 	jnz	00157$
                    0984   2968 	C$fb_lpc922.c$675$7$25 ==.
                           2969 ;	../fb_lpc922.c:675: if ((objflags & 0x0C) == 0x0C)
   0984 53 02 0C           2970 	anl	ar2,#0x0C
   0987 BA 0C 0C           2971 	cjne	r2,#0x0C,00174$
                    098A   2972 	C$fb_lpc922.c$676$7$25 ==.
                           2973 ;	../fb_lpc922.c:676: read_value_req(objno);	// Objektwert lesen und read_value_response senden	00000000 00000000
   098A 8B 82              2974 	mov	dpl,r3
   098C 12s00r00           2975 	lcall	_read_value_req
                    098F   2976 	C$fb_lpc922.c$677$7$25 ==.
                           2977 ;	../fb_lpc922.c:677: break;
   098F 80 05              2978 	sjmp	00174$
   0991                    2979 00157$:
                    0991   2980 	C$fb_lpc922.c$655$4$21 ==.
                           2981 ;	../fb_lpc922.c:655: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   0991 0E                 2982 	inc	r6
   0992 0E                 2983 	inc	r6
   0993 02s09r17           2984 	ljmp	00155$
   0996                    2985 00174$:
   0996 85*00 81           2986 	mov	sp,_bp
   0999 D0*00              2987 	pop	_bp
                    099B   2988 	C$fb_lpc922.c$684$1$1 ==.
                    099B   2989 	XG$process_tel$0$0 ==.
   099B 22                 2990 	ret
                           2991 ;------------------------------------------------------------
                           2992 ;Allocation info for local variables in function 'set_pa'
                           2993 ;------------------------------------------------------------
                    099C   2994 	G$set_pa$0$0 ==.
                    099C   2995 	C$fb_lpc922.c$717$1$1 ==.
                           2996 ;	../fb_lpc922.c:717: void set_pa(void)
                           2997 ;	-----------------------------------------
                           2998 ;	 function set_pa
                           2999 ;	-----------------------------------------
   099C                    3000 _set_pa:
                    099C   3001 	C$fb_lpc922.c$719$1$1 ==.
                           3002 ;	../fb_lpc922.c:719: while(fb_state!=0);		// warten falls noch gesendet wird
   099C                    3003 00101$:
   099C E5*2A              3004 	mov	a,_fb_state
   099E 70 FC              3005 	jnz	00101$
                    09A0   3006 	C$fb_lpc922.c$720$1$1 ==.
                           3007 ;	../fb_lpc922.c:720: EA=0;
   09A0 C2 AF              3008 	clr	_IEN0_7
                    09A2   3009 	C$fb_lpc922.c$721$1$1 ==.
                           3010 ;	../fb_lpc922.c:721: FMCON=0x00;				// load command, leert das pageregister
   09A2 75 E4 00           3011 	mov	_FMCON,#0x00
                    09A5   3012 	C$fb_lpc922.c$722$1$1 ==.
                           3013 ;	../fb_lpc922.c:722: FMADRH=EEPROM_ADDR_H;	// 0x1D bei 922;
   09A5 75 E7 1D           3014 	mov	_FMADRH,#0x1D
                    09A8   3015 	C$fb_lpc922.c$723$1$1 ==.
                           3016 ;	../fb_lpc922.c:723: FMADRL=ADDRTAB+1;
   09A8 75 E6 17           3017 	mov	_FMADRL,#0x17
                    09AB   3018 	C$fb_lpc922.c$724$1$1 ==.
                           3019 ;	../fb_lpc922.c:724: FMDATA=telegramm[8];
   09AB 85*0F E5           3020 	mov	_FMDATA,(_telegramm + 0x0008)
                    09AE   3021 	C$fb_lpc922.c$725$1$1 ==.
                           3022 ;	../fb_lpc922.c:725: FMDATA=telegramm[9];	// nächstes Byte, da autoinkrement
   09AE 85*10 E5           3023 	mov	_FMDATA,(_telegramm + 0x0009)
                    09B1   3024 	C$fb_lpc922.c$726$1$1 ==.
                           3025 ;	../fb_lpc922.c:726: FMCON=0x68;				// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   09B1 75 E4 68           3026 	mov	_FMCON,#0x68
                    09B4   3027 	C$fb_lpc922.c$727$1$1 ==.
                           3028 ;	../fb_lpc922.c:727: EA=1;
   09B4 D2 AF              3029 	setb	_IEN0_7
                    09B6   3030 	C$fb_lpc922.c$728$1$1 ==.
                    09B6   3031 	XG$set_pa$0$0 ==.
   09B6 22                 3032 	ret
                           3033 ;------------------------------------------------------------
                           3034 ;Allocation info for local variables in function 'read_objflags'
                           3035 ;------------------------------------------------------------
                           3036 ;objno                     Allocated to registers r7 
                           3037 ;------------------------------------------------------------
                    09B7   3038 	G$read_objflags$0$0 ==.
                    09B7   3039 	C$fb_lpc922.c$733$1$1 ==.
                           3040 ;	../fb_lpc922.c:733: unsigned char read_objflags(unsigned char objno)
                           3041 ;	-----------------------------------------
                           3042 ;	 function read_objflags
                           3043 ;	-----------------------------------------
   09B7                    3044 _read_objflags:
   09B7 AF 82              3045 	mov	r7,dpl
                    09B9   3046 	C$fb_lpc922.c$736$1$1 ==.
                           3047 ;	../fb_lpc922.c:736: return(eeprom[eeprom[COMMSTABPTR]+3+objno+objno+objno]);
   09B9 90 1D 12           3048 	mov	dptr,#(_eeprom + 0x0012)
   09BC E4                 3049 	clr	a
   09BD 93                 3050 	movc	a,@a+dptr
   09BE FE                 3051 	mov	r6,a
   09BF 0E                 3052 	inc	r6
   09C0 0E                 3053 	inc	r6
   09C1 0E                 3054 	inc	r6
   09C2 EF                 3055 	mov	a,r7
   09C3 2E                 3056 	add	a,r6
   09C4 2F                 3057 	add	a,r7
   09C5 2F                 3058 	add	a,r7
   09C6 90 1D 00           3059 	mov	dptr,#_eeprom
   09C9 93                 3060 	movc	a,@a+dptr
                    09CA   3061 	C$fb_lpc922.c$737$1$1 ==.
                    09CA   3062 	XG$read_objflags$0$0 ==.
   09CA F5 82              3063 	mov	dpl,a
   09CC 22                 3064 	ret
                           3065 ;------------------------------------------------------------
                           3066 ;Allocation info for local variables in function 'restart_hw'
                           3067 ;------------------------------------------------------------
                    09CD   3068 	G$restart_hw$0$0 ==.
                    09CD   3069 	C$fb_lpc922.c$775$1$1 ==.
                           3070 ;	../fb_lpc922.c:775: void restart_hw(void)
                           3071 ;	-----------------------------------------
                           3072 ;	 function restart_hw
                           3073 ;	-----------------------------------------
   09CD                    3074 _restart_hw:
                    09CD   3075 	C$fb_lpc922.c$777$1$1 ==.
                           3076 ;	../fb_lpc922.c:777: DIVM=0;			// Taktferquenz nicht teilen -> volles Tempo
   09CD 75 95 00           3077 	mov	_DIVM,#0x00
                    09D0   3078 	C$fb_lpc922.c$779$1$1 ==.
                           3079 ;	../fb_lpc922.c:779: P1M1=0x14;		// Port 1 auf quasi-bidirektional,
   09D0 75 91 14           3080 	mov	_P1M1,#0x14
                    09D3   3081 	C$fb_lpc922.c$780$1$1 ==.
                           3082 ;	../fb_lpc922.c:780: P1M2=0x4C;		// ausser P1.2(T0 als PWM Ausgang)=open-drain,
   09D3 75 92 4C           3083 	mov	_P1M2,#0x4C
                    09D6   3084 	C$fb_lpc922.c$784$1$1 ==.
                           3085 ;	../fb_lpc922.c:784: FBOUTC=0;		// Bus-Ausgang auf low
   09D6 C2 96              3086 	clr	_P1_6
                    09D8   3087 	C$fb_lpc922.c$786$1$1 ==.
                           3088 ;	../fb_lpc922.c:786: TMOD=0x21;		// Timer 0 als 16-Bit Timer, Timer 1 als 8 Bit autoreload
   09D8 75 89 21           3089 	mov	_TMOD,#0x21
                    09DB   3090 	C$fb_lpc922.c$787$1$1 ==.
                           3091 ;	../fb_lpc922.c:787: TAMOD=0x00;
   09DB 75 8F 00           3092 	mov	_TAMOD,#0x00
                    09DE   3093 	C$fb_lpc922.c$788$1$1 ==.
                           3094 ;	../fb_lpc922.c:788: TR0=0;			// Timer 0 (zur Verwendung in app) zunaechst stoppen
   09DE C2 8C              3095 	clr	_TCON_4
                    09E0   3096 	C$fb_lpc922.c$789$1$1 ==.
                           3097 ;	../fb_lpc922.c:789: TR1=0;			// Timer 1 (Empfangs-Timer, nicht in app verwenden!) zunaechst stoppen
   09E0 C2 8E              3098 	clr	_TCON_6
                    09E2   3099 	C$fb_lpc922.c$790$1$1 ==.
                           3100 ;	../fb_lpc922.c:790: TH1=128;		// Timer 1 auf 104us/3
   09E2 75 8D 80           3101 	mov	_TH1,#0x80
                    09E5   3102 	C$fb_lpc922.c$791$1$1 ==.
                           3103 ;	../fb_lpc922.c:791: TL1=128;
   09E5 75 8B 80           3104 	mov	_TL1,#0x80
                    09E8   3105 	C$fb_lpc922.c$792$1$1 ==.
                           3106 ;	../fb_lpc922.c:792: TF1=0;
   09E8 C2 8F              3107 	clr	_TCON_7
                    09EA   3108 	C$fb_lpc922.c$799$1$1 ==.
                           3109 ;	../fb_lpc922.c:799: interrupted=0;	// wird durch die interrupt-routine auf 1 gesetzt
   09EA C2*01              3110 	clr	_interrupted
                    09EC   3111 	C$fb_lpc922.c$800$1$1 ==.
                           3112 ;	../fb_lpc922.c:800: IEN0=0x80;// mit 0x80 sind die unten auskommentierten erschlagen.
   09EC 75 A8 80           3113 	mov	_IEN0,#0x80
                    09EF   3114 	C$fb_lpc922.c$801$1$1 ==.
                           3115 ;	../fb_lpc922.c:801: IEN1=0x00;
   09EF 75 E8 00           3116 	mov	_IEN1,#0x00
                    09F2   3117 	C$fb_lpc922.c$808$1$1 ==.
                           3118 ;	../fb_lpc922.c:808: IP0=0x04;		// höchste Priorität fuer ext1
   09F2 75 B8 04           3119 	mov	_IP0,#0x04
                    09F5   3120 	C$fb_lpc922.c$809$1$1 ==.
                           3121 ;	../fb_lpc922.c:809: IP0H=0x0C;
   09F5 75 B7 0C           3122 	mov	_IP0H,#0x0C
                    09F8   3123 	C$fb_lpc922.c$810$1$1 ==.
                           3124 ;	../fb_lpc922.c:810: IT1=1;			// Interrupt 1 flankengetriggert=1
   09F8 D2 8A              3125 	setb	_TCON_2
                    09FA   3126 	C$fb_lpc922.c$812$1$1 ==.
                           3127 ;	../fb_lpc922.c:812: status60=0x2E;	// Status-Byte (steht normal im userram an 0x60)
   09FA 75*2E 2E           3128 	mov	_status60,#0x2E
                    09FD   3129 	C$fb_lpc922.c$814$1$1 ==.
                           3130 ;	../fb_lpc922.c:814: ack=0;			// ack und nack flag zurücksetzen
   09FD C2*03              3131 	clr	_ack
                    09FF   3132 	C$fb_lpc922.c$815$1$1 ==.
                           3133 ;	../fb_lpc922.c:815: nack=0;
   09FF C2*04              3134 	clr	_nack
                    0A01   3135 	C$fb_lpc922.c$816$1$1 ==.
                           3136 ;	../fb_lpc922.c:816: send_ack=0;
   0A01 C2*0B              3137 	clr	_send_ack
                    0A03   3138 	C$fb_lpc922.c$817$1$1 ==.
                           3139 ;	../fb_lpc922.c:817: send_nack=0;
   0A03 C2*0C              3140 	clr	_send_nack
                    0A05   3141 	C$fb_lpc922.c$818$1$1 ==.
                           3142 ;	../fb_lpc922.c:818: tel_arrived=0;	// kein Telegramm empfangen
   0A05 C2*06              3143 	clr	_tel_arrived
                    0A07   3144 	C$fb_lpc922.c$819$1$1 ==.
                           3145 ;	../fb_lpc922.c:819: auto_ack=1;		// empfangene Telegramme automatisch mit ack bestätigen
   0A07 D2*08              3146 	setb	_auto_ack
                    0A09   3147 	C$fb_lpc922.c$820$1$1 ==.
                           3148 ;	../fb_lpc922.c:820: tx_nextwrite=0;	// Zeiger auf nächste zu schreibende Objektnr. in tx_buffer
   0A09 75*2C 00           3149 	mov	_tx_nextwrite,#0x00
                    0A0C   3150 	C$fb_lpc922.c$821$1$1 ==.
                           3151 ;	../fb_lpc922.c:821: tx_nextsend=0;	// Zeiger auf nächste zu sendende Objektnr. in tx_buffer
   0A0C 75*2D 00           3152 	mov	_tx_nextsend,#0x00
                    0A0F   3153 	C$fb_lpc922.c$822$1$1 ==.
                           3154 ;	../fb_lpc922.c:822: pcount=0;		// Paketzaehler initialisieren
   0A0F 75*02 00           3155 	mov	_pcount,#0x00
                    0A12   3156 	C$fb_lpc922.c$823$1$1 ==.
                           3157 ;	../fb_lpc922.c:823: inc_pcount=0;
   0A12 C2*0F              3158 	clr	_inc_pcount
                    0A14   3159 	C$fb_lpc922.c$824$1$1 ==.
                           3160 ;	../fb_lpc922.c:824: connected=0;	// keine Verbindung
   0A14 C2*0E              3161 	clr	_connected
                    0A16   3162 	C$fb_lpc922.c$825$1$1 ==.
                           3163 ;	../fb_lpc922.c:825: transparency=0;	// fremde Gruppentelegramme werden ignoriert
   0A16 C2*0D              3164 	clr	_transparency
                    0A18   3165 	C$fb_lpc922.c$826$1$1 ==.
                           3166 ;	../fb_lpc922.c:826: init_rx();		// Empfang initialisieren
   0A18 12s03r6C           3167 	lcall	_init_rx
                    0A1B   3168 	C$fb_lpc922.c$827$1$1 ==.
                    0A1B   3169 	XG$restart_hw$0$0 ==.
   0A1B 22                 3170 	ret
                           3171 	.area CSEG    (CODE)
                           3172 	.area CONST   (CODE)
                    1D00   3173 G$eeprom$0$0 == 0x1d00
                    1D00   3174 _eeprom	=	0x1d00
                           3175 	.area XINIT   (CODE)
                           3176 	.area CABS    (ABS,CODE)
