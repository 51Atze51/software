                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Jun 14 2012) (Linux)
                              4 ; This file was generated Fri Feb 20 01:26:53 2015
                              5 ;--------------------------------------------------------
                              6 	.module fb_lpc922
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _eeprom
                             13 	.globl _read_obj_value
                             14 	.globl _read_value_req
                             15 	.globl _write_value_req
                             16 	.globl _P3_1
                             17 	.globl _P3_0
                             18 	.globl _P1_7
                             19 	.globl _P1_6
                             20 	.globl _P1_5
                             21 	.globl _P1_4
                             22 	.globl _P1_3
                             23 	.globl _P1_2
                             24 	.globl _P1_1
                             25 	.globl _P1_0
                             26 	.globl _P0_7
                             27 	.globl _P0_6
                             28 	.globl _P0_5
                             29 	.globl _P0_4
                             30 	.globl _P0_3
                             31 	.globl _P0_2
                             32 	.globl _P0_1
                             33 	.globl _P0_0
                             34 	.globl _I2CON_0
                             35 	.globl _I2CON_2
                             36 	.globl _I2CON_3
                             37 	.globl _I2CON_4
                             38 	.globl _I2CON_5
                             39 	.globl _I2CON_6
                             40 	.globl _SCON_7
                             41 	.globl _SCON_6
                             42 	.globl _SCON_5
                             43 	.globl _SCON_4
                             44 	.globl _SCON_3
                             45 	.globl _SCON_2
                             46 	.globl _SCON_1
                             47 	.globl _SCON_0
                             48 	.globl _IP0_0
                             49 	.globl _IP0_1
                             50 	.globl _IP0_2
                             51 	.globl _IP0_3
                             52 	.globl _IP0_4
                             53 	.globl _IP0_5
                             54 	.globl _IP0_6
                             55 	.globl _IP1_0
                             56 	.globl _IP1_1
                             57 	.globl _IP1_2
                             58 	.globl _IP1_6
                             59 	.globl _IEN1_0
                             60 	.globl _IEN1_1
                             61 	.globl _IEN1_2
                             62 	.globl _IEN0_0
                             63 	.globl _IEN0_1
                             64 	.globl _IEN0_2
                             65 	.globl _IEN0_3
                             66 	.globl _IEN0_4
                             67 	.globl _IEN0_5
                             68 	.globl _IEN0_6
                             69 	.globl _IEN0_7
                             70 	.globl _TCON_0
                             71 	.globl _TCON_1
                             72 	.globl _TCON_2
                             73 	.globl _TCON_3
                             74 	.globl _TCON_4
                             75 	.globl _TCON_5
                             76 	.globl _TCON_6
                             77 	.globl _TCON_7
                             78 	.globl _PSW_7
                             79 	.globl _PSW_6
                             80 	.globl _PSW_5
                             81 	.globl _PSW_4
                             82 	.globl _PSW_3
                             83 	.globl _PSW_2
                             84 	.globl _PSW_1
                             85 	.globl _PSW_0
                             86 	.globl _IEN1
                             87 	.globl _IP0H
                             88 	.globl _WFEED2
                             89 	.globl _WFEED1
                             90 	.globl _WDL
                             91 	.globl _WDCON
                             92 	.globl _TRIM
                             93 	.globl _TAMOD
                             94 	.globl _SSTAT
                             95 	.globl _RTCL
                             96 	.globl _RTCH
                             97 	.globl _RTCCON
                             98 	.globl _RSTSRC
                             99 	.globl _PT0AD
                            100 	.globl _PCONA
                            101 	.globl _P3M2
                            102 	.globl _P3M1
                            103 	.globl _P1M2
                            104 	.globl _P1M1
                            105 	.globl _P0M2
                            106 	.globl _P0M1
                            107 	.globl _KBPATN
                            108 	.globl _KBMASK
                            109 	.globl _KBCON
                            110 	.globl _IP1H
                            111 	.globl _IP1
                            112 	.globl _I2STAT
                            113 	.globl _I2SCLL
                            114 	.globl _I2SCLH
                            115 	.globl _I2DAT
                            116 	.globl _I2CON
                            117 	.globl _I2ADR
                            118 	.globl _FMDATA
                            119 	.globl _FMCON
                            120 	.globl _FMADRL
                            121 	.globl _FMADRH
                            122 	.globl _DIVM
                            123 	.globl _CMP2
                            124 	.globl _CMP1
                            125 	.globl _BRGCON
                            126 	.globl _BRGR1
                            127 	.globl _BRGR0
                            128 	.globl _SADEN
                            129 	.globl _SADDR
                            130 	.globl _AUXR1
                            131 	.globl _SBUF
                            132 	.globl _SCON
                            133 	.globl _IP0
                            134 	.globl _IEN0
                            135 	.globl _TH1
                            136 	.globl _TH0
                            137 	.globl _TL1
                            138 	.globl _TL0
                            139 	.globl _TMOD
                            140 	.globl _TCON
                            141 	.globl _PCON
                            142 	.globl _DPH
                            143 	.globl _DPL
                            144 	.globl _SP
                            145 	.globl _B
                            146 	.globl _ACC
                            147 	.globl _PSW
                            148 	.globl _P3
                            149 	.globl _P1
                            150 	.globl _P0
                            151 	.globl _telegramm_ok
                            152 	.globl _inc_pcount
                            153 	.globl _connected
                            154 	.globl _send_nack
                            155 	.globl _send_ack
                            156 	.globl _wait_for_ack
                            157 	.globl _fbtx_bit
                            158 	.globl _auto_ack
                            159 	.globl _tel_sent
                            160 	.globl _tel_arrived
                            161 	.globl _its_me
                            162 	.globl _nack
                            163 	.globl _ack
                            164 	.globl _fb_parity
                            165 	.globl _interrupted
                            166 	.globl _parity_ok
                            167 	.globl _connected_timeout
                            168 	.globl _status60
                            169 	.globl _tx_nextsend
                            170 	.globl _tx_nextwrite
                            171 	.globl _RAM
                            172 	.globl _repeat_count
                            173 	.globl _fb_state
                            174 	.globl _fb_pattern
                            175 	.globl _fbrx_byte
                            176 	.globl _cs
                            177 	.globl _telpos
                            178 	.globl _tx_buffer
                            179 	.globl _telegramm
                            180 	.globl _senders_pcount
                            181 	.globl _mem_adrl
                            182 	.globl _mem_adrh
                            183 	.globl _mem_length
                            184 	.globl _pcount
                            185 	.globl _conl
                            186 	.globl _conh
                            187 	.globl _X1_int
                            188 	.globl _T1_int
                            189 	.globl _init_rx
                            190 	.globl _init_tx
                            191 	.globl _gapos_in_gat
                            192 	.globl _send_obj_value
                            193 	.globl _process_tel
                            194 	.globl _read_objflags
                            195 	.globl _restart_hw
                            196 ;--------------------------------------------------------
                            197 ; special function registers
                            198 ;--------------------------------------------------------
                            199 	.area RSEG    (ABS,DATA)
   0000                     200 	.org 0x0000
                    0080    201 G$P0$0$0 == 0x0080
                    0080    202 _P0	=	0x0080
                    0090    203 G$P1$0$0 == 0x0090
                    0090    204 _P1	=	0x0090
                    00B0    205 G$P3$0$0 == 0x00b0
                    00B0    206 _P3	=	0x00b0
                    00D0    207 G$PSW$0$0 == 0x00d0
                    00D0    208 _PSW	=	0x00d0
                    00E0    209 G$ACC$0$0 == 0x00e0
                    00E0    210 _ACC	=	0x00e0
                    00F0    211 G$B$0$0 == 0x00f0
                    00F0    212 _B	=	0x00f0
                    0081    213 G$SP$0$0 == 0x0081
                    0081    214 _SP	=	0x0081
                    0082    215 G$DPL$0$0 == 0x0082
                    0082    216 _DPL	=	0x0082
                    0083    217 G$DPH$0$0 == 0x0083
                    0083    218 _DPH	=	0x0083
                    0087    219 G$PCON$0$0 == 0x0087
                    0087    220 _PCON	=	0x0087
                    0088    221 G$TCON$0$0 == 0x0088
                    0088    222 _TCON	=	0x0088
                    0089    223 G$TMOD$0$0 == 0x0089
                    0089    224 _TMOD	=	0x0089
                    008A    225 G$TL0$0$0 == 0x008a
                    008A    226 _TL0	=	0x008a
                    008B    227 G$TL1$0$0 == 0x008b
                    008B    228 _TL1	=	0x008b
                    008C    229 G$TH0$0$0 == 0x008c
                    008C    230 _TH0	=	0x008c
                    008D    231 G$TH1$0$0 == 0x008d
                    008D    232 _TH1	=	0x008d
                    00A8    233 G$IEN0$0$0 == 0x00a8
                    00A8    234 _IEN0	=	0x00a8
                    00B8    235 G$IP0$0$0 == 0x00b8
                    00B8    236 _IP0	=	0x00b8
                    0098    237 G$SCON$0$0 == 0x0098
                    0098    238 _SCON	=	0x0098
                    0099    239 G$SBUF$0$0 == 0x0099
                    0099    240 _SBUF	=	0x0099
                    00A2    241 G$AUXR1$0$0 == 0x00a2
                    00A2    242 _AUXR1	=	0x00a2
                    00A9    243 G$SADDR$0$0 == 0x00a9
                    00A9    244 _SADDR	=	0x00a9
                    00B9    245 G$SADEN$0$0 == 0x00b9
                    00B9    246 _SADEN	=	0x00b9
                    00BE    247 G$BRGR0$0$0 == 0x00be
                    00BE    248 _BRGR0	=	0x00be
                    00BF    249 G$BRGR1$0$0 == 0x00bf
                    00BF    250 _BRGR1	=	0x00bf
                    00BD    251 G$BRGCON$0$0 == 0x00bd
                    00BD    252 _BRGCON	=	0x00bd
                    00AC    253 G$CMP1$0$0 == 0x00ac
                    00AC    254 _CMP1	=	0x00ac
                    00AD    255 G$CMP2$0$0 == 0x00ad
                    00AD    256 _CMP2	=	0x00ad
                    0095    257 G$DIVM$0$0 == 0x0095
                    0095    258 _DIVM	=	0x0095
                    00E7    259 G$FMADRH$0$0 == 0x00e7
                    00E7    260 _FMADRH	=	0x00e7
                    00E6    261 G$FMADRL$0$0 == 0x00e6
                    00E6    262 _FMADRL	=	0x00e6
                    00E4    263 G$FMCON$0$0 == 0x00e4
                    00E4    264 _FMCON	=	0x00e4
                    00E5    265 G$FMDATA$0$0 == 0x00e5
                    00E5    266 _FMDATA	=	0x00e5
                    00DB    267 G$I2ADR$0$0 == 0x00db
                    00DB    268 _I2ADR	=	0x00db
                    00D8    269 G$I2CON$0$0 == 0x00d8
                    00D8    270 _I2CON	=	0x00d8
                    00DA    271 G$I2DAT$0$0 == 0x00da
                    00DA    272 _I2DAT	=	0x00da
                    00DD    273 G$I2SCLH$0$0 == 0x00dd
                    00DD    274 _I2SCLH	=	0x00dd
                    00DC    275 G$I2SCLL$0$0 == 0x00dc
                    00DC    276 _I2SCLL	=	0x00dc
                    00D9    277 G$I2STAT$0$0 == 0x00d9
                    00D9    278 _I2STAT	=	0x00d9
                    00F8    279 G$IP1$0$0 == 0x00f8
                    00F8    280 _IP1	=	0x00f8
                    00F7    281 G$IP1H$0$0 == 0x00f7
                    00F7    282 _IP1H	=	0x00f7
                    0094    283 G$KBCON$0$0 == 0x0094
                    0094    284 _KBCON	=	0x0094
                    0086    285 G$KBMASK$0$0 == 0x0086
                    0086    286 _KBMASK	=	0x0086
                    0093    287 G$KBPATN$0$0 == 0x0093
                    0093    288 _KBPATN	=	0x0093
                    0084    289 G$P0M1$0$0 == 0x0084
                    0084    290 _P0M1	=	0x0084
                    0085    291 G$P0M2$0$0 == 0x0085
                    0085    292 _P0M2	=	0x0085
                    0091    293 G$P1M1$0$0 == 0x0091
                    0091    294 _P1M1	=	0x0091
                    0092    295 G$P1M2$0$0 == 0x0092
                    0092    296 _P1M2	=	0x0092
                    00B1    297 G$P3M1$0$0 == 0x00b1
                    00B1    298 _P3M1	=	0x00b1
                    00B2    299 G$P3M2$0$0 == 0x00b2
                    00B2    300 _P3M2	=	0x00b2
                    00B5    301 G$PCONA$0$0 == 0x00b5
                    00B5    302 _PCONA	=	0x00b5
                    00F6    303 G$PT0AD$0$0 == 0x00f6
                    00F6    304 _PT0AD	=	0x00f6
                    00DF    305 G$RSTSRC$0$0 == 0x00df
                    00DF    306 _RSTSRC	=	0x00df
                    00D1    307 G$RTCCON$0$0 == 0x00d1
                    00D1    308 _RTCCON	=	0x00d1
                    00D2    309 G$RTCH$0$0 == 0x00d2
                    00D2    310 _RTCH	=	0x00d2
                    00D3    311 G$RTCL$0$0 == 0x00d3
                    00D3    312 _RTCL	=	0x00d3
                    00BA    313 G$SSTAT$0$0 == 0x00ba
                    00BA    314 _SSTAT	=	0x00ba
                    008F    315 G$TAMOD$0$0 == 0x008f
                    008F    316 _TAMOD	=	0x008f
                    0096    317 G$TRIM$0$0 == 0x0096
                    0096    318 _TRIM	=	0x0096
                    00A7    319 G$WDCON$0$0 == 0x00a7
                    00A7    320 _WDCON	=	0x00a7
                    00C1    321 G$WDL$0$0 == 0x00c1
                    00C1    322 _WDL	=	0x00c1
                    00C2    323 G$WFEED1$0$0 == 0x00c2
                    00C2    324 _WFEED1	=	0x00c2
                    00C3    325 G$WFEED2$0$0 == 0x00c3
                    00C3    326 _WFEED2	=	0x00c3
                    00B7    327 G$IP0H$0$0 == 0x00b7
                    00B7    328 _IP0H	=	0x00b7
                    00E8    329 G$IEN1$0$0 == 0x00e8
                    00E8    330 _IEN1	=	0x00e8
                            331 ;--------------------------------------------------------
                            332 ; special function bits
                            333 ;--------------------------------------------------------
                            334 	.area RSEG    (ABS,DATA)
   0000                     335 	.org 0x0000
                    00D0    336 G$PSW_0$0$0 == 0x00d0
                    00D0    337 _PSW_0	=	0x00d0
                    00D1    338 G$PSW_1$0$0 == 0x00d1
                    00D1    339 _PSW_1	=	0x00d1
                    00D2    340 G$PSW_2$0$0 == 0x00d2
                    00D2    341 _PSW_2	=	0x00d2
                    00D3    342 G$PSW_3$0$0 == 0x00d3
                    00D3    343 _PSW_3	=	0x00d3
                    00D4    344 G$PSW_4$0$0 == 0x00d4
                    00D4    345 _PSW_4	=	0x00d4
                    00D5    346 G$PSW_5$0$0 == 0x00d5
                    00D5    347 _PSW_5	=	0x00d5
                    00D6    348 G$PSW_6$0$0 == 0x00d6
                    00D6    349 _PSW_6	=	0x00d6
                    00D7    350 G$PSW_7$0$0 == 0x00d7
                    00D7    351 _PSW_7	=	0x00d7
                    008F    352 G$TCON_7$0$0 == 0x008f
                    008F    353 _TCON_7	=	0x008f
                    008E    354 G$TCON_6$0$0 == 0x008e
                    008E    355 _TCON_6	=	0x008e
                    008D    356 G$TCON_5$0$0 == 0x008d
                    008D    357 _TCON_5	=	0x008d
                    008C    358 G$TCON_4$0$0 == 0x008c
                    008C    359 _TCON_4	=	0x008c
                    008B    360 G$TCON_3$0$0 == 0x008b
                    008B    361 _TCON_3	=	0x008b
                    008A    362 G$TCON_2$0$0 == 0x008a
                    008A    363 _TCON_2	=	0x008a
                    0089    364 G$TCON_1$0$0 == 0x0089
                    0089    365 _TCON_1	=	0x0089
                    0088    366 G$TCON_0$0$0 == 0x0088
                    0088    367 _TCON_0	=	0x0088
                    00AF    368 G$IEN0_7$0$0 == 0x00af
                    00AF    369 _IEN0_7	=	0x00af
                    00AE    370 G$IEN0_6$0$0 == 0x00ae
                    00AE    371 _IEN0_6	=	0x00ae
                    00AD    372 G$IEN0_5$0$0 == 0x00ad
                    00AD    373 _IEN0_5	=	0x00ad
                    00AC    374 G$IEN0_4$0$0 == 0x00ac
                    00AC    375 _IEN0_4	=	0x00ac
                    00AB    376 G$IEN0_3$0$0 == 0x00ab
                    00AB    377 _IEN0_3	=	0x00ab
                    00AA    378 G$IEN0_2$0$0 == 0x00aa
                    00AA    379 _IEN0_2	=	0x00aa
                    00A9    380 G$IEN0_1$0$0 == 0x00a9
                    00A9    381 _IEN0_1	=	0x00a9
                    00A8    382 G$IEN0_0$0$0 == 0x00a8
                    00A8    383 _IEN0_0	=	0x00a8
                    00EA    384 G$IEN1_2$0$0 == 0x00ea
                    00EA    385 _IEN1_2	=	0x00ea
                    00E9    386 G$IEN1_1$0$0 == 0x00e9
                    00E9    387 _IEN1_1	=	0x00e9
                    00E8    388 G$IEN1_0$0$0 == 0x00e8
                    00E8    389 _IEN1_0	=	0x00e8
                    00FE    390 G$IP1_6$0$0 == 0x00fe
                    00FE    391 _IP1_6	=	0x00fe
                    00FA    392 G$IP1_2$0$0 == 0x00fa
                    00FA    393 _IP1_2	=	0x00fa
                    00F9    394 G$IP1_1$0$0 == 0x00f9
                    00F9    395 _IP1_1	=	0x00f9
                    00F8    396 G$IP1_0$0$0 == 0x00f8
                    00F8    397 _IP1_0	=	0x00f8
                    00BE    398 G$IP0_6$0$0 == 0x00be
                    00BE    399 _IP0_6	=	0x00be
                    00BD    400 G$IP0_5$0$0 == 0x00bd
                    00BD    401 _IP0_5	=	0x00bd
                    00BC    402 G$IP0_4$0$0 == 0x00bc
                    00BC    403 _IP0_4	=	0x00bc
                    00BB    404 G$IP0_3$0$0 == 0x00bb
                    00BB    405 _IP0_3	=	0x00bb
                    00BA    406 G$IP0_2$0$0 == 0x00ba
                    00BA    407 _IP0_2	=	0x00ba
                    00B9    408 G$IP0_1$0$0 == 0x00b9
                    00B9    409 _IP0_1	=	0x00b9
                    00B8    410 G$IP0_0$0$0 == 0x00b8
                    00B8    411 _IP0_0	=	0x00b8
                    0098    412 G$SCON_0$0$0 == 0x0098
                    0098    413 _SCON_0	=	0x0098
                    0099    414 G$SCON_1$0$0 == 0x0099
                    0099    415 _SCON_1	=	0x0099
                    009A    416 G$SCON_2$0$0 == 0x009a
                    009A    417 _SCON_2	=	0x009a
                    009B    418 G$SCON_3$0$0 == 0x009b
                    009B    419 _SCON_3	=	0x009b
                    009C    420 G$SCON_4$0$0 == 0x009c
                    009C    421 _SCON_4	=	0x009c
                    009D    422 G$SCON_5$0$0 == 0x009d
                    009D    423 _SCON_5	=	0x009d
                    009E    424 G$SCON_6$0$0 == 0x009e
                    009E    425 _SCON_6	=	0x009e
                    009F    426 G$SCON_7$0$0 == 0x009f
                    009F    427 _SCON_7	=	0x009f
                    00DE    428 G$I2CON_6$0$0 == 0x00de
                    00DE    429 _I2CON_6	=	0x00de
                    00DD    430 G$I2CON_5$0$0 == 0x00dd
                    00DD    431 _I2CON_5	=	0x00dd
                    00DC    432 G$I2CON_4$0$0 == 0x00dc
                    00DC    433 _I2CON_4	=	0x00dc
                    00DB    434 G$I2CON_3$0$0 == 0x00db
                    00DB    435 _I2CON_3	=	0x00db
                    00DA    436 G$I2CON_2$0$0 == 0x00da
                    00DA    437 _I2CON_2	=	0x00da
                    00D8    438 G$I2CON_0$0$0 == 0x00d8
                    00D8    439 _I2CON_0	=	0x00d8
                    0080    440 G$P0_0$0$0 == 0x0080
                    0080    441 _P0_0	=	0x0080
                    0081    442 G$P0_1$0$0 == 0x0081
                    0081    443 _P0_1	=	0x0081
                    0082    444 G$P0_2$0$0 == 0x0082
                    0082    445 _P0_2	=	0x0082
                    0083    446 G$P0_3$0$0 == 0x0083
                    0083    447 _P0_3	=	0x0083
                    0084    448 G$P0_4$0$0 == 0x0084
                    0084    449 _P0_4	=	0x0084
                    0085    450 G$P0_5$0$0 == 0x0085
                    0085    451 _P0_5	=	0x0085
                    0086    452 G$P0_6$0$0 == 0x0086
                    0086    453 _P0_6	=	0x0086
                    0087    454 G$P0_7$0$0 == 0x0087
                    0087    455 _P0_7	=	0x0087
                    0090    456 G$P1_0$0$0 == 0x0090
                    0090    457 _P1_0	=	0x0090
                    0091    458 G$P1_1$0$0 == 0x0091
                    0091    459 _P1_1	=	0x0091
                    0092    460 G$P1_2$0$0 == 0x0092
                    0092    461 _P1_2	=	0x0092
                    0093    462 G$P1_3$0$0 == 0x0093
                    0093    463 _P1_3	=	0x0093
                    0094    464 G$P1_4$0$0 == 0x0094
                    0094    465 _P1_4	=	0x0094
                    0095    466 G$P1_5$0$0 == 0x0095
                    0095    467 _P1_5	=	0x0095
                    0096    468 G$P1_6$0$0 == 0x0096
                    0096    469 _P1_6	=	0x0096
                    0097    470 G$P1_7$0$0 == 0x0097
                    0097    471 _P1_7	=	0x0097
                    00B0    472 G$P3_0$0$0 == 0x00b0
                    00B0    473 _P3_0	=	0x00b0
                    00B1    474 G$P3_1$0$0 == 0x00b1
                    00B1    475 _P3_1	=	0x00b1
                            476 ;--------------------------------------------------------
                            477 ; overlayable register banks
                            478 ;--------------------------------------------------------
                            479 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     480 	.ds 8
                            481 ;--------------------------------------------------------
                            482 ; overlayable bit register bank
                            483 ;--------------------------------------------------------
                            484 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     485 bits:
   0000                     486 	.ds 1
                    8000    487 	b0 = bits[0]
                    8100    488 	b1 = bits[1]
                    8200    489 	b2 = bits[2]
                    8300    490 	b3 = bits[3]
                    8400    491 	b4 = bits[4]
                    8500    492 	b5 = bits[5]
                    8600    493 	b6 = bits[6]
                    8700    494 	b7 = bits[7]
                            495 ;--------------------------------------------------------
                            496 ; internal ram data
                            497 ;--------------------------------------------------------
                            498 	.area DSEG    (DATA)
                    0000    499 G$conh$0$0==.
   0000                     500 _conh::
   0000                     501 	.ds 1
                    0001    502 G$conl$0$0==.
   0001                     503 _conl::
   0001                     504 	.ds 1
                    0002    505 G$pcount$0$0==.
   0002                     506 _pcount::
   0002                     507 	.ds 1
                    0003    508 G$mem_length$0$0==.
   0003                     509 _mem_length::
   0003                     510 	.ds 1
                    0004    511 G$mem_adrh$0$0==.
   0004                     512 _mem_adrh::
   0004                     513 	.ds 1
                    0005    514 G$mem_adrl$0$0==.
   0005                     515 _mem_adrl::
   0005                     516 	.ds 1
                    0006    517 G$senders_pcount$0$0==.
   0006                     518 _senders_pcount::
   0006                     519 	.ds 1
                    0007    520 G$telegramm$0$0==.
   0007                     521 _telegramm::
   0007                     522 	.ds 23
                    001E    523 G$tx_buffer$0$0==.
   001E                     524 _tx_buffer::
   001E                     525 	.ds 8
                    0026    526 G$telpos$0$0==.
   0026                     527 _telpos::
   0026                     528 	.ds 1
                    0027    529 G$cs$0$0==.
   0027                     530 _cs::
   0027                     531 	.ds 1
                    0028    532 G$fbrx_byte$0$0==.
   0028                     533 _fbrx_byte::
   0028                     534 	.ds 1
                    0029    535 G$fb_pattern$0$0==.
   0029                     536 _fb_pattern::
   0029                     537 	.ds 1
                    002A    538 G$fb_state$0$0==.
   002A                     539 _fb_state::
   002A                     540 	.ds 1
                    002B    541 G$repeat_count$0$0==.
   002B                     542 _repeat_count::
   002B                     543 	.ds 1
                    0000    544 G$RAM$0$0 == 0x0000
                    0000    545 _RAM	=	0x0000
                    002C    546 G$tx_nextwrite$0$0==.
   002C                     547 _tx_nextwrite::
   002C                     548 	.ds 1
                    002D    549 G$tx_nextsend$0$0==.
   002D                     550 _tx_nextsend::
   002D                     551 	.ds 1
                    002E    552 G$status60$0$0==.
   002E                     553 _status60::
   002E                     554 	.ds 1
                    002F    555 G$connected_timeout$0$0==.
   002F                     556 _connected_timeout::
   002F                     557 	.ds 1
                            558 ;--------------------------------------------------------
                            559 ; overlayable items in internal ram 
                            560 ;--------------------------------------------------------
                            561 	.area OSEG    (OVR,DATA)
                            562 ;--------------------------------------------------------
                            563 ; indirectly addressable internal ram data
                            564 ;--------------------------------------------------------
                            565 	.area ISEG    (DATA)
                            566 ;--------------------------------------------------------
                            567 ; absolute internal ram data
                            568 ;--------------------------------------------------------
                            569 	.area IABS    (ABS,DATA)
                            570 	.area IABS    (ABS,DATA)
                            571 ;--------------------------------------------------------
                            572 ; bit data
                            573 ;--------------------------------------------------------
                            574 	.area BSEG    (BIT)
                    0000    575 G$parity_ok$0$0==.
   0000                     576 _parity_ok::
   0000                     577 	.ds 1
                    0001    578 G$interrupted$0$0==.
   0001                     579 _interrupted::
   0001                     580 	.ds 1
                    0002    581 G$fb_parity$0$0==.
   0002                     582 _fb_parity::
   0002                     583 	.ds 1
                    0003    584 G$ack$0$0==.
   0003                     585 _ack::
   0003                     586 	.ds 1
                    0004    587 G$nack$0$0==.
   0004                     588 _nack::
   0004                     589 	.ds 1
                    0005    590 G$its_me$0$0==.
   0005                     591 _its_me::
   0005                     592 	.ds 1
                    0006    593 G$tel_arrived$0$0==.
   0006                     594 _tel_arrived::
   0006                     595 	.ds 1
                    0007    596 G$tel_sent$0$0==.
   0007                     597 _tel_sent::
   0007                     598 	.ds 1
                    0008    599 G$auto_ack$0$0==.
   0008                     600 _auto_ack::
   0008                     601 	.ds 1
                    0009    602 G$fbtx_bit$0$0==.
   0009                     603 _fbtx_bit::
   0009                     604 	.ds 1
                    000A    605 G$wait_for_ack$0$0==.
   000A                     606 _wait_for_ack::
   000A                     607 	.ds 1
                    000B    608 G$send_ack$0$0==.
   000B                     609 _send_ack::
   000B                     610 	.ds 1
                    000C    611 G$send_nack$0$0==.
   000C                     612 _send_nack::
   000C                     613 	.ds 1
                    000D    614 G$connected$0$0==.
   000D                     615 _connected::
   000D                     616 	.ds 1
                    000E    617 G$inc_pcount$0$0==.
   000E                     618 _inc_pcount::
   000E                     619 	.ds 1
                    000F    620 G$telegramm_ok$0$0==.
   000F                     621 _telegramm_ok::
   000F                     622 	.ds 1
                            623 ;--------------------------------------------------------
                            624 ; paged external ram data
                            625 ;--------------------------------------------------------
                            626 	.area PSEG    (PAG,XDATA)
                            627 ;--------------------------------------------------------
                            628 ; external ram data
                            629 ;--------------------------------------------------------
                            630 	.area XSEG    (XDATA)
                            631 ;--------------------------------------------------------
                            632 ; absolute external ram data
                            633 ;--------------------------------------------------------
                            634 	.area XABS    (ABS,XDATA)
                            635 ;--------------------------------------------------------
                            636 ; external initialized ram data
                            637 ;--------------------------------------------------------
                            638 	.area XISEG   (XDATA)
                            639 	.area HOME    (CODE)
                            640 	.area GSINIT0 (CODE)
                            641 	.area GSINIT1 (CODE)
                            642 	.area GSINIT2 (CODE)
                            643 	.area GSINIT3 (CODE)
                            644 	.area GSINIT4 (CODE)
                            645 	.area GSINIT5 (CODE)
                            646 	.area GSINIT  (CODE)
                            647 	.area GSFINAL (CODE)
                            648 	.area CSEG    (CODE)
                            649 ;--------------------------------------------------------
                            650 ; global & static initialisations
                            651 ;--------------------------------------------------------
                            652 	.area HOME    (CODE)
                            653 	.area GSINIT  (CODE)
                            654 	.area GSFINAL (CODE)
                            655 	.area GSINIT  (CODE)
                            656 ;--------------------------------------------------------
                            657 ; Home
                            658 ;--------------------------------------------------------
                            659 	.area HOME    (CODE)
                            660 	.area HOME    (CODE)
                            661 ;--------------------------------------------------------
                            662 ; code
                            663 ;--------------------------------------------------------
                            664 	.area CSEG    (CODE)
                            665 ;------------------------------------------------------------
                            666 ;Allocation info for local variables in function 'X1_int'
                            667 ;------------------------------------------------------------
                    0000    668 	G$X1_int$0$0 ==.
                    0000    669 	C$fb_lpc922.c$54$0$0 ==.
                            670 ;	../fb_lpc922.c:54: void X1_int(void) __interrupt (2)		// Flanke des Startbits laest int1 aus
                            671 ;	-----------------------------------------
                            672 ;	 function X1_int
                            673 ;	-----------------------------------------
   0000                     674 _X1_int:
                    0007    675 	ar7 = 0x07
                    0006    676 	ar6 = 0x06
                    0005    677 	ar5 = 0x05
                    0004    678 	ar4 = 0x04
                    0003    679 	ar3 = 0x03
                    0002    680 	ar2 = 0x02
                    0001    681 	ar1 = 0x01
                    0000    682 	ar0 = 0x00
   0000 C0 E0               683 	push	acc
   0002 C0 D0               684 	push	psw
                    0004    685 	C$fb_lpc922.c$57$1$1 ==.
                            686 ;	../fb_lpc922.c:57: EX1=0;			// int1 stoppen								1 cycle = 0,27127us
   0004 C2 AA               687 	clr	_IEN0_2
                    0006    688 	C$fb_lpc922.c$58$1$1 ==.
                            689 ;	../fb_lpc922.c:58: TR1=0;			// Timer 1 stoppen
   0006 C2 8E               690 	clr	_TCON_6
                    0008    691 	C$fb_lpc922.c$59$1$1 ==.
                            692 ;	../fb_lpc922.c:59: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   0008 74 0F               693 	mov	a,#0x0F
   000A 55 89               694 	anl	a,_TMOD
   000C 24 20               695 	add	a,#0x20
   000E F5 89               696 	mov	_TMOD,a
                    0010    697 	C$fb_lpc922.c$60$1$1 ==.
                            698 ;	../fb_lpc922.c:60: TL1=53;//108;//128;		// Timer laden so dass in state 2 bei 75Âµs abgefragt wird
   0010 75 8B 35            699 	mov	_TL1,#0x35
                    0013    700 	C$fb_lpc922.c$61$1$1 ==.
                            701 ;	../fb_lpc922.c:61: TH1=128;//128;			// autoreload auf 35Âµs setzen (gilt fuer sprung von 2 auf 3)
   0013 75 8D 80            702 	mov	_TH1,#0x80
                    0016    703 	C$fb_lpc922.c$62$1$1 ==.
                            704 ;	../fb_lpc922.c:62: TF1=0;			// Timer1-flag loeschen						1 cycle
   0016 C2 8F               705 	clr	_TCON_7
                    0018    706 	C$fb_lpc922.c$63$1$1 ==.
                            707 ;	../fb_lpc922.c:63: TR1=1;			// Timer1 starten							1 cycle
   0018 D2 8E               708 	setb	_TCON_6
                    001A    709 	C$fb_lpc922.c$64$1$1 ==.
                            710 ;	../fb_lpc922.c:64: ET1=1;			// Timer1-int aktiv							1 cycle
   001A D2 AB               711 	setb	_IEN0_3
                    001C    712 	C$fb_lpc922.c$65$1$1 ==.
                            713 ;	../fb_lpc922.c:65: fb_state=2;		// naechster state
   001C 75*2A 02            714 	mov	_fb_state,#0x02
                    001F    715 	C$fb_lpc922.c$66$1$1 ==.
                            716 ;	../fb_lpc922.c:66: fb_parity=0;	// Parity Bit loeschen
   001F C2*02               717 	clr	_fb_parity
                    0021    718 	C$fb_lpc922.c$67$1$1 ==.
                            719 ;	../fb_lpc922.c:67: parity_ok=1;	// wird bei Fehler geloescht
   0021 D2*00               720 	setb	_parity_ok
                    0023    721 	C$fb_lpc922.c$68$1$1 ==.
                            722 ;	../fb_lpc922.c:68: fb_pattern=0;
   0023 75*29 00            723 	mov	_fb_pattern,#0x00
                    0026    724 	C$fb_lpc922.c$69$1$1 ==.
                            725 ;	../fb_lpc922.c:69: fbrx_byte=0;
   0026 75*28 00            726 	mov	_fbrx_byte,#0x00
                    0029    727 	C$fb_lpc922.c$70$1$1 ==.
                            728 ;	../fb_lpc922.c:70: interrupted=1;	// signalisiert app, dass unterbrochen wurde
   0029 D2*01               729 	setb	_interrupted
   002B D0 D0               730 	pop	psw
   002D D0 E0               731 	pop	acc
                    002F    732 	C$fb_lpc922.c$71$1$1 ==.
                    002F    733 	XG$X1_int$0$0 ==.
   002F 32                  734 	reti
                            735 ;	eliminated unneeded mov psw,# (no regs used in bank)
                            736 ;	eliminated unneeded push/pop dpl
                            737 ;	eliminated unneeded push/pop dph
                            738 ;	eliminated unneeded push/pop b
                            739 ;------------------------------------------------------------
                            740 ;Allocation info for local variables in function 'T1_int'
                            741 ;------------------------------------------------------------
                            742 ;fbrx_bit                  Allocated to registers b0 
                            743 ;send_byte                 Allocated to registers r7 
                            744 ;objno                     Allocated to registers r7 
                            745 ;build_ok                  Allocated to registers b0 
                            746 ;objvalue                  Allocated to stack - _bp +1
                            747 ;gapos                     Allocated to registers r5 r6 
                            748 ;objtype                   Allocated to registers r6 
                            749 ;n                         Allocated to registers r7 
                            750 ;length                    Allocated to registers r6 
                            751 ;asspos                    Allocated to registers r4 
                            752 ;type                      Allocated to registers b2 
                            753 ;repeatflag                Allocated to registers b1 
                            754 ;------------------------------------------------------------
                    0030    755 	G$T1_int$0$0 ==.
                    0030    756 	C$fb_lpc922.c$75$1$1 ==.
                            757 ;	../fb_lpc922.c:75: void T1_int(void) __interrupt (3) 	// Timer 1 Interrupt
                            758 ;	-----------------------------------------
                            759 ;	 function T1_int
                            760 ;	-----------------------------------------
   0030                     761 _T1_int:
   0030 C0*00               762 	push	bits
   0032 C0 E0               763 	push	acc
   0034 C0 F0               764 	push	b
   0036 C0 82               765 	push	dpl
   0038 C0 83               766 	push	dph
   003A C0 07               767 	push	(0+7)
   003C C0 06               768 	push	(0+6)
   003E C0 05               769 	push	(0+5)
   0040 C0 04               770 	push	(0+4)
   0042 C0 03               771 	push	(0+3)
   0044 C0 02               772 	push	(0+2)
   0046 C0 01               773 	push	(0+1)
   0048 C0 00               774 	push	(0+0)
   004A C0 D0               775 	push	psw
   004C 75 D0 00            776 	mov	psw,#0x00
   004F C0*00               777 	push	_bp
   0051 E5 81               778 	mov	a,sp
   0053 F5*00               779 	mov	_bp,a
   0055 24 04               780 	add	a,#0x04
   0057 F5 81               781 	mov	sp,a
                    0059    782 	C$fb_lpc922.c$81$1$1 ==.
                            783 ;	../fb_lpc922.c:81: switch (fb_state){
   0059 E5*2A               784 	mov	a,_fb_state
   005B FF                  785 	mov	r7,a
   005C 24 F1               786 	add	a,#0xff - 0x0E
   005E 50 03               787 	jnc	00326$
   0060 02s05r93            788 	ljmp	00253$
   0063                     789 00326$:
   0063 EF                  790 	mov	a,r7
   0064 2F                  791 	add	a,r7
   0065 2F                  792 	add	a,r7
   0066 90s00r6A            793 	mov	dptr,#00327$
   0069 73                  794 	jmp	@a+dptr
   006A                     795 00327$:
   006A 02s00r97            796 	ljmp	00101$
   006D 02s05r93            797 	ljmp	00253$
   0070 02s03r2D            798 	ljmp	00150$
   0073 02s03rED            799 	ljmp	00187$
   0076 02s03rF6            800 	ljmp	00188$
   0079 02s04r80            801 	ljmp	00209$
   007C 02s05r93            802 	ljmp	00253$
   007F 02s05r93            803 	ljmp	00253$
   0082 02s05r93            804 	ljmp	00253$
   0085 02s05r93            805 	ljmp	00253$
   0088 02s04rA2            806 	ljmp	00216$
   008B 02s05r0A            807 	ljmp	00237$
   008E 02s05r93            808 	ljmp	00253$
   0091 02s05r2E            809 	ljmp	00244$
   0094 02s05r7C            810 	ljmp	00252$
                    0097    811 	C$fb_lpc922.c$85$2$2 ==.
                            812 ;	../fb_lpc922.c:85: case 0:
   0097                     813 00101$:
                    0097    814 	C$fb_lpc922.c$86$2$2 ==.
                            815 ;	../fb_lpc922.c:86: TR1=0;			// Timer 1 stoppen
   0097 C2 8E               816 	clr	_TCON_6
                    0099    817 	C$fb_lpc922.c$87$2$2 ==.
                            818 ;	../fb_lpc922.c:87: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   0099 74 0F               819 	mov	a,#0x0F
   009B 55 89               820 	anl	a,_TMOD
   009D 24 20               821 	add	a,#0x20
   009F F5 89               822 	mov	_TMOD,a
                    00A1    823 	C$fb_lpc922.c$88$2$2 ==.
                            824 ;	../fb_lpc922.c:88: TL1=128;		// Timer laden
   00A1 75 8B 80            825 	mov	_TL1,#0x80
                    00A4    826 	C$fb_lpc922.c$89$2$2 ==.
                            827 ;	../fb_lpc922.c:89: TH1=128;
   00A4 75 8D 80            828 	mov	_TH1,#0x80
                    00A7    829 	C$fb_lpc922.c$90$2$2 ==.
                            830 ;	../fb_lpc922.c:90: TF1=0;			// Timer1-flag loeschen						1 cycle
   00A7 C2 8F               831 	clr	_TCON_7
                    00A9    832 	C$fb_lpc922.c$91$2$2 ==.
                            833 ;	../fb_lpc922.c:91: TR1=1;			// Timer1 starten							1 cycle
   00A9 D2 8E               834 	setb	_TCON_6
                    00AB    835 	C$fb_lpc922.c$92$2$2 ==.
                            836 ;	../fb_lpc922.c:92: if(tx_nextsend != tx_nextwrite) { 			// wenn zu sendendes Objekt vorhanden
   00AB E5*2C               837 	mov	a,_tx_nextwrite
   00AD B5*2D 03            838 	cjne	a,_tx_nextsend,00328$
   00B0 02s03r26            839 	ljmp	00148$
   00B3                     840 00328$:
                    00B3    841 	C$fb_lpc922.c$96$3$3 ==.
                            842 ;	../fb_lpc922.c:96: unsigned char objno=tx_buffer[tx_nextsend];
   00B3 E5*2D               843 	mov	a,_tx_nextsend
   00B5 24r1E               844 	add	a,#_tx_buffer
   00B7 F9                  845 	mov	r1,a
   00B8 87 07               846 	mov	ar7,@r1
                    00BA    847 	C$fb_lpc922.c$97$3$3 ==.
                            848 ;	../fb_lpc922.c:97: __bit build_ok=0;
   00BA C2*00               849 	clr	b0
                    00BC    850 	C$fb_lpc922.c$99$3$3 ==.
                            851 ;	../fb_lpc922.c:99: unsigned int gapos=0xFE;
   00BC 7D FE               852 	mov	r5,#0xFE
   00BE 7E 00               853 	mov	r6,#0x00
                    00C0    854 	C$fb_lpc922.c$104$3$3 ==.
                            855 ;	../fb_lpc922.c:104: repeatflag=objno&0x20;
   00C0 EF                  856 	mov	a,r7
   00C1 A2 E5               857 	mov	c,acc[5]
   00C3 E4                  858 	clr	a
   00C4 33                  859 	rlc	a
   00C5 FC                  860 	mov	r4,a
   00C6 24 FF               861 	add	a,#0xff
   00C8 92*00               862 	mov	b1,c
                    00CA    863 	C$fb_lpc922.c$106$3$3 ==.
                            864 ;	../fb_lpc922.c:106: if(objno<128) {		// Multicast
   00CA BF 80 00            865 	cjne	r7,#0x80,00329$
   00CD                     866 00329$:
   00CD 40 03               867 	jc	00330$
   00CF 02s01rFA            868 	ljmp	00133$
   00D2                     869 00330$:
                    00D2    870 	C$fb_lpc922.c$107$1$1 ==.
                            871 ;	../fb_lpc922.c:107: type=(objno&0x40);	// bei Multicast ist type0 normal und type1 response telegramm
   00D2 C0 05               872 	push	ar5
   00D4 C0 06               873 	push	ar6
   00D6 EF                  874 	mov	a,r7
   00D7 23                  875 	rl	a
   00D8 23                  876 	rl	a
   00D9 54 01               877 	anl	a,#0x01
   00DB 24 FF               878 	add	a,#0xff
   00DD 92*00               879 	mov	b2,c
                    00DF    880 	C$fb_lpc922.c$108$4$4 ==.
                            881 ;	../fb_lpc922.c:108: objno&=0x1F;
   00DF 53 07 1F            882 	anl	ar7,#0x1F
                    00E2    883 	C$fb_lpc922.c$110$4$4 ==.
                            884 ;	../fb_lpc922.c:110: objvalue=read_obj_value(objno);		// Objektwert lesen
   00E2 8F 82               885 	mov	dpl,r7
   00E4 C0 07               886 	push	ar7
   00E6 C0 05               887 	push	ar5
   00E8 C0*00               888 	push	bits
   00EA 12s00r00            889 	lcall	_read_obj_value
   00ED AA 82               890 	mov	r2,dpl
   00EF AB 83               891 	mov	r3,dph
   00F1 AC F0               892 	mov	r4,b
   00F3 FE                  893 	mov	r6,a
   00F4 D0*00               894 	pop	bits
   00F6 D0 05               895 	pop	ar5
   00F8 D0 07               896 	pop	ar7
   00FA A8*00               897 	mov	r0,_bp
   00FC 08                  898 	inc	r0
   00FD A6 02               899 	mov	@r0,ar2
   00FF 08                  900 	inc	r0
   0100 A6 03               901 	mov	@r0,ar3
   0102 08                  902 	inc	r0
   0103 A6 04               903 	mov	@r0,ar4
   0105 08                  904 	inc	r0
   0106 A6 06               905 	mov	@r0,ar6
                    0108    906 	C$fb_lpc922.c$113$4$4 ==.
                            907 ;	../fb_lpc922.c:113: asspos=eeprom[ASSOCTABPTR]+1+2*objno;
   0108 90 1D 11            908 	mov	dptr,#(_eeprom + 0x0011)
   010B E4                  909 	clr	a
   010C 93                  910 	movc	a,@a+dptr
   010D FE                  911 	mov	r6,a
   010E 0E                  912 	inc	r6
   010F EF                  913 	mov	a,r7
   0110 2F                  914 	add	a,r7
   0111 FD                  915 	mov	r5,a
   0112 2E                  916 	add	a,r6
                    0113    917 	C$fb_lpc922.c$114$4$4 ==.
                            918 ;	../fb_lpc922.c:114: if(eeprom[asspos+1]==objno) gapos=eeprom[asspos];
   0113 FC                  919 	mov	r4,a
   0114 04                  920 	inc	a
   0115 90 1D 00            921 	mov	dptr,#_eeprom
   0118 93                  922 	movc	a,@a+dptr
   0119 FE                  923 	mov	r6,a
   011A B5 07 02            924 	cjne	a,ar7,00331$
   011D 80 06               925 	sjmp	00332$
   011F                     926 00331$:
   011F D0 06               927 	pop	ar6
   0121 D0 05               928 	pop	ar5
   0123 80 0F               929 	sjmp	00103$
   0125                     930 00332$:
   0125 D0 06               931 	pop	ar6
   0127 D0 05               932 	pop	ar5
   0129 8C 82               933 	mov	dpl,r4
   012B 75 83 1D            934 	mov	dph,#(_eeprom >> 8)
   012E E4                  935 	clr	a
   012F 93                  936 	movc	a,@a+dptr
   0130 FC                  937 	mov	r4,a
   0131 FD                  938 	mov	r5,a
   0132 7E 00               939 	mov	r6,#0x00
   0134                     940 00103$:
                    0134    941 	C$fb_lpc922.c$116$4$4 ==.
                            942 ;	../fb_lpc922.c:116: if (gapos!=0xFE) // wenn keine Gruppenadresse hinterlegt nix tun
   0134 BD FE 06            943 	cjne	r5,#0xFE,00333$
   0137 BE 00 03            944 	cjne	r6,#0x00,00333$
   013A 02s02rD5            945 	ljmp	00134$
   013D                     946 00333$:
                    013D    947 	C$fb_lpc922.c$118$5$5 ==.
                            948 ;	../fb_lpc922.c:118: telegramm[0]=0xBC;
   013D 75*07 BC            949 	mov	_telegramm,#0xBC
                    0140    950 	C$fb_lpc922.c$119$5$5 ==.
                            951 ;	../fb_lpc922.c:119: telegramm[1]=eeprom[ADDRTAB+1];
   0140 90 1D 17            952 	mov	dptr,#(_eeprom + 0x0017)
   0143 E4                  953 	clr	a
   0144 93                  954 	movc	a,@a+dptr
   0145 FC                  955 	mov	r4,a
   0146 8C*08               956 	mov	(_telegramm + 0x0001),r4
                    0148    957 	C$fb_lpc922.c$120$5$5 ==.
                            958 ;	../fb_lpc922.c:120: telegramm[2]=eeprom[ADDRTAB+2];
   0148 90 1D 18            959 	mov	dptr,#(_eeprom + 0x0018)
   014B E4                  960 	clr	a
   014C 93                  961 	movc	a,@a+dptr
   014D FC                  962 	mov	r4,a
   014E 8C*09               963 	mov	(_telegramm + 0x0002),r4
                    0150    964 	C$fb_lpc922.c$121$5$5 ==.
                            965 ;	../fb_lpc922.c:121: telegramm[3]=eeprom[ADDRTAB+1+gapos*2];
   0150 ED                  966 	mov	a,r5
   0151 2D                  967 	add	a,r5
   0152 FD                  968 	mov	r5,a
   0153 24 17               969 	add	a,#0x17
   0155 90 1D 00            970 	mov	dptr,#_eeprom
   0158 93                  971 	movc	a,@a+dptr
   0159 FE                  972 	mov	r6,a
   015A 8E*0A               973 	mov	(_telegramm + 0x0003),r6
                    015C    974 	C$fb_lpc922.c$122$5$5 ==.
                            975 ;	../fb_lpc922.c:122: telegramm[4]=eeprom[ADDRTAB+2+gapos*2];
   015C 74 18               976 	mov	a,#0x18
   015E 2D                  977 	add	a,r5
   015F 90 1D 00            978 	mov	dptr,#_eeprom
   0162 93                  979 	movc	a,@a+dptr
   0163 FE                  980 	mov	r6,a
   0164 8E*0B               981 	mov	(_telegramm + 0x0004),r6
                    0166    982 	C$fb_lpc922.c$123$5$5 ==.
                            983 ;	../fb_lpc922.c:123: telegramm[6]=0x00;
   0166 75*0D 00            984 	mov	(_telegramm + 0x0006),#0x00
                    0169    985 	C$fb_lpc922.c$124$5$5 ==.
                            986 ;	../fb_lpc922.c:124: if (type) telegramm[7]=0x40;		// read_value_response Telegramm (angefordert)
   0169 30*00 05            987 	jnb	b2,00105$
   016C 75*0E 40            988 	mov	(_telegramm + 0x0007),#0x40
   016F 80 03               989 	sjmp	00106$
   0171                     990 00105$:
                    0171    991 	C$fb_lpc922.c$125$5$5 ==.
                            992 ;	../fb_lpc922.c:125: else telegramm[7]=0x80;				// write_value_request Telegramm (nicht angefordert)
   0171 75*0E 80            993 	mov	(_telegramm + 0x0007),#0x80
   0174                     994 00106$:
                    0174    995 	C$fb_lpc922.c$127$5$5 ==.
                            996 ;	../fb_lpc922.c:127: objtype=eeprom[eeprom[COMMSTABPTR]+objno+objno+objno+4];
   0174 90 1D 12            997 	mov	dptr,#(_eeprom + 0x0012)
   0177 E4                  998 	clr	a
   0178 93                  999 	movc	a,@a+dptr
   0179 2F                 1000 	add	a,r7
   017A 2F                 1001 	add	a,r7
   017B FE                 1002 	mov	r6,a
   017C 2F                 1003 	add	a,r7
   017D 24 04              1004 	add	a,#0x04
   017F 90 1D 00           1005 	mov	dptr,#_eeprom
   0182 93                 1006 	movc	a,@a+dptr
                    0183   1007 	C$fb_lpc922.c$129$5$5 ==.
                           1008 ;	../fb_lpc922.c:129: if(objtype>6) length=objtype-5; else length=1;
   0183 FE                 1009 	mov  r6,a
   0184 24 F9              1010 	add	a,#0xff - 0x06
   0186 50 06              1011 	jnc	00108$
   0188 EE                 1012 	mov	a,r6
   0189 24 FB              1013 	add	a,#0xFB
   018B FE                 1014 	mov	r6,a
   018C 80 02              1015 	sjmp	00109$
   018E                    1016 00108$:
   018E 7E 01              1017 	mov	r6,#0x01
   0190                    1018 00109$:
                    0190   1019 	C$fb_lpc922.c$130$5$5 ==.
                           1020 ;	../fb_lpc922.c:130: telegramm[5]=0xE0+length;
   0190 74 E0              1021 	mov	a,#0xE0
   0192 2E                 1022 	add	a,r6
   0193 F5*0C              1023 	mov	(_telegramm + 0x0005),a
                    0195   1024 	C$fb_lpc922.c$131$5$5 ==.
                           1025 ;	../fb_lpc922.c:131: if (length>1) telegramm[length+6]=objvalue; else telegramm[7]+=(objvalue&0x3F);
   0195 EE                 1026 	mov	a,r6
   0196 24 FE              1027 	add	a,#0xff - 0x01
   0198 50 0F              1028 	jnc	00111$
   019A 74 06              1029 	mov	a,#0x06
   019C 2E                 1030 	add	a,r6
   019D 24r07              1031 	add	a,#_telegramm
   019F F9                 1032 	mov	r1,a
   01A0 A8*00              1033 	mov	r0,_bp
   01A2 08                 1034 	inc	r0
   01A3 86 05              1035 	mov	ar5,@r0
   01A5 A7 05              1036 	mov	@r1,ar5
   01A7 80 10              1037 	sjmp	00112$
   01A9                    1038 00111$:
   01A9 A8*00              1039 	mov	r0,_bp
   01AB 08                 1040 	inc	r0
   01AC 74 3F              1041 	mov	a,#0x3F
   01AE 56                 1042 	anl	a,@r0
   01AF FA                 1043 	mov	r2,a
   01B0 E4                 1044 	clr	a
   01B1 FB                 1045 	mov	r3,a
   01B2 FC                 1046 	mov	r4,a
   01B3 FD                 1047 	mov	r5,a
   01B4 EA                 1048 	mov	a,r2
   01B5 25*0E              1049 	add	a,(_telegramm + 0x0007)
   01B7 F5*0E              1050 	mov	(_telegramm + 0x0007),a
   01B9                    1051 00112$:
                    01B9   1052 	C$fb_lpc922.c$132$5$5 ==.
                           1053 ;	../fb_lpc922.c:132: if (length>2) telegramm[length+5]=objvalue>>8;
   01B9 EE                 1054 	mov	a,r6
   01BA 24 FD              1055 	add	a,#0xff - 0x02
   01BC 50 0E              1056 	jnc	00114$
   01BE 74 05              1057 	mov	a,#0x05
   01C0 2E                 1058 	add	a,r6
   01C1 24r07              1059 	add	a,#_telegramm
   01C3 F9                 1060 	mov	r1,a
   01C4 A8*00              1061 	mov	r0,_bp
   01C6 08                 1062 	inc	r0
   01C7 08                 1063 	inc	r0
   01C8 86 05              1064 	mov	ar5,@r0
   01CA A7 05              1065 	mov	@r1,ar5
   01CC                    1066 00114$:
                    01CC   1067 	C$fb_lpc922.c$133$5$5 ==.
                           1068 ;	../fb_lpc922.c:133: if (length>3) telegramm[length+4]=objvalue>>16;
   01CC EE                 1069 	mov	a,r6
   01CD 24 FC              1070 	add	a,#0xff - 0x03
   01CF 50 0F              1071 	jnc	00116$
   01D1 74 04              1072 	mov	a,#0x04
   01D3 2E                 1073 	add	a,r6
   01D4 24r07              1074 	add	a,#_telegramm
   01D6 F9                 1075 	mov	r1,a
   01D7 A8*00              1076 	mov	r0,_bp
   01D9 08                 1077 	inc	r0
   01DA 08                 1078 	inc	r0
   01DB 08                 1079 	inc	r0
   01DC 86 05              1080 	mov	ar5,@r0
   01DE A7 05              1081 	mov	@r1,ar5
   01E0                    1082 00116$:
                    01E0   1083 	C$fb_lpc922.c$134$5$5 ==.
                           1084 ;	../fb_lpc922.c:134: if (length>4) telegramm[length+3]=objvalue>>24;
   01E0 EE                 1085 	mov	a,r6
   01E1 24 FB              1086 	add	a,#0xff - 0x04
   01E3 50 10              1087 	jnc	00118$
   01E5 74 03              1088 	mov	a,#0x03
   01E7 2E                 1089 	add	a,r6
   01E8 24r07              1090 	add	a,#_telegramm
   01EA F9                 1091 	mov	r1,a
   01EB A8*00              1092 	mov	r0,_bp
   01ED 08                 1093 	inc	r0
   01EE 08                 1094 	inc	r0
   01EF 08                 1095 	inc	r0
   01F0 08                 1096 	inc	r0
   01F1 86 06              1097 	mov	ar6,@r0
   01F3 A7 06              1098 	mov	@r1,ar6
   01F5                    1099 00118$:
                    01F5   1100 	C$fb_lpc922.c$136$5$5 ==.
                           1101 ;	../fb_lpc922.c:136: build_ok=1;
   01F5 D2*00              1102 	setb	b0
   01F7 02s02rD5           1103 	ljmp	00134$
   01FA                    1104 00133$:
                    01FA   1105 	C$fb_lpc922.c$140$4$6 ==.
                           1106 ;	../fb_lpc922.c:140: telegramm[0]=0xB0;				// Control Byte
   01FA 75*07 B0           1107 	mov	_telegramm,#0xB0
                    01FD   1108 	C$fb_lpc922.c$141$4$6 ==.
                           1109 ;	../fb_lpc922.c:141: telegramm[1]=eeprom[ADDRTAB+1];	// Quelladresse ist phys. Adresse
   01FD 90 1D 17           1110 	mov	dptr,#(_eeprom + 0x0017)
   0200 E4                 1111 	clr	a
   0201 93                 1112 	movc	a,@a+dptr
   0202 FE                 1113 	mov	r6,a
   0203 8E*08              1114 	mov	(_telegramm + 0x0001),r6
                    0205   1115 	C$fb_lpc922.c$142$4$6 ==.
                           1116 ;	../fb_lpc922.c:142: telegramm[2]=eeprom[ADDRTAB+2];
   0205 90 1D 18           1117 	mov	dptr,#(_eeprom + 0x0018)
   0208 E4                 1118 	clr	a
   0209 93                 1119 	movc	a,@a+dptr
   020A FE                 1120 	mov	r6,a
   020B 8E*09              1121 	mov	(_telegramm + 0x0002),r6
                    020D   1122 	C$fb_lpc922.c$143$4$6 ==.
                           1123 ;	../fb_lpc922.c:143: telegramm[3]=conh;
   020D 85*00*0A           1124 	mov	(_telegramm + 0x0003),_conh
                    0210   1125 	C$fb_lpc922.c$144$4$6 ==.
                           1126 ;	../fb_lpc922.c:144: telegramm[4]=conl;
   0210 85*01*0B           1127 	mov	(_telegramm + 0x0004),_conl
                    0213   1128 	C$fb_lpc922.c$146$4$6 ==.
                           1129 ;	../fb_lpc922.c:146: switch(objno&0x1F) {
   0213 53 07 1F           1130 	anl	ar7,#0x1F
   0216 EF                 1131 	mov	a,r7
   0217 24 FA              1132 	add	a,#0xff - 0x05
   0219 50 03              1133 	jnc	00340$
   021B 02s02rD3           1134 	ljmp	00131$
   021E                    1135 00340$:
   021E EF                 1136 	mov	a,r7
   021F 2F                 1137 	add	a,r7
   0220 2F                 1138 	add	a,r7
   0221 90s02r25           1139 	mov	dptr,#00341$
   0224 73                 1140 	jmp	@a+dptr
   0225                    1141 00341$:
   0225 02s02rD3           1142 	ljmp	00131$
   0228 02s02r37           1143 	ljmp	00121$
   022B 02s02r43           1144 	ljmp	00122$
   022E 02s02r5A           1145 	ljmp	00123$
   0231 02s02r6B           1146 	ljmp	00124$
   0234 02s02rCB           1147 	ljmp	00130$
                    0237   1148 	C$fb_lpc922.c$147$5$7 ==.
                           1149 ;	../fb_lpc922.c:147: case 1:	// NCD ACK Quittierung (129)
   0237                    1150 00121$:
                    0237   1151 	C$fb_lpc922.c$148$5$7 ==.
                           1152 ;	../fb_lpc922.c:148: telegramm[5]=0x60;					// DRL
   0237 75*0C 60           1153 	mov	(_telegramm + 0x0005),#0x60
                    023A   1154 	C$fb_lpc922.c$149$5$7 ==.
                           1155 ;	../fb_lpc922.c:149: telegramm[6]=senders_pcount + 0xC2;	// Bit 6,7(TCPI = 11 NCD Quittierung) und Bit 0,1 (10=ACK)
   023A 74 C2              1156 	mov	a,#0xC2
   023C 25*06              1157 	add	a,_senders_pcount
   023E F5*0D              1158 	mov	(_telegramm + 0x0006),a
                    0240   1159 	C$fb_lpc922.c$151$5$7 ==.
                           1160 ;	../fb_lpc922.c:151: break;
   0240 02s02rD3           1161 	ljmp	00131$
                    0243   1162 	C$fb_lpc922.c$152$5$7 ==.
                           1163 ;	../fb_lpc922.c:152: case 2:	// read mask response (130)
   0243                    1164 00122$:
                    0243   1165 	C$fb_lpc922.c$153$5$7 ==.
                           1166 ;	../fb_lpc922.c:153: telegramm[5]=0x63;					// DRL
   0243 75*0C 63           1167 	mov	(_telegramm + 0x0005),#0x63
                    0246   1168 	C$fb_lpc922.c$154$5$7 ==.
                           1169 ;	../fb_lpc922.c:154: telegramm[6]=pcount + 0x43;			// bei response immer eigene Paketnummer senden
   0246 74 43              1170 	mov	a,#0x43
   0248 25*02              1171 	add	a,_pcount
   024A F5*0D              1172 	mov	(_telegramm + 0x0006),a
                    024C   1173 	C$fb_lpc922.c$155$5$7 ==.
                           1174 ;	../fb_lpc922.c:155: telegramm[7]=0x40;
   024C 75*0E 40           1175 	mov	(_telegramm + 0x0007),#0x40
                    024F   1176 	C$fb_lpc922.c$156$5$7 ==.
                           1177 ;	../fb_lpc922.c:156: telegramm[8]=0x00;
   024F 75*0F 00           1178 	mov	(_telegramm + 0x0008),#0x00
                    0252   1179 	C$fb_lpc922.c$157$5$7 ==.
                           1180 ;	../fb_lpc922.c:157: telegramm[9]=0x12;					// Maskenversion 1 = BCU1
   0252 75*10 12           1181 	mov	(_telegramm + 0x0009),#0x12
                    0255   1182 	C$fb_lpc922.c$158$5$7 ==.
                           1183 ;	../fb_lpc922.c:158: inc_pcount=1;
   0255 D2*0E              1184 	setb	_inc_pcount
                    0257   1185 	C$fb_lpc922.c$159$5$7 ==.
                           1186 ;	../fb_lpc922.c:159: break;
   0257 02s02rD3           1187 	ljmp	00131$
                    025A   1188 	C$fb_lpc922.c$160$5$7 ==.
                           1189 ;	../fb_lpc922.c:160: case 3:	// read PA response (131)
   025A                    1190 00123$:
                    025A   1191 	C$fb_lpc922.c$161$5$7 ==.
                           1192 ;	../fb_lpc922.c:161: telegramm[3]=0x00;			// Zieladresse auf 0000, da Broadcast
   025A 75*0A 00           1193 	mov	(_telegramm + 0x0003),#0x00
                    025D   1194 	C$fb_lpc922.c$162$5$7 ==.
                           1195 ;	../fb_lpc922.c:162: telegramm[4]=0x00;
   025D 75*0B 00           1196 	mov	(_telegramm + 0x0004),#0x00
                    0260   1197 	C$fb_lpc922.c$163$5$7 ==.
                           1198 ;	../fb_lpc922.c:163: telegramm[5]=0xE1;			// DRL
   0260 75*0C E1           1199 	mov	(_telegramm + 0x0005),#0xE1
                    0263   1200 	C$fb_lpc922.c$164$5$7 ==.
                           1201 ;	../fb_lpc922.c:164: telegramm[6]=0x01;
   0263 75*0D 01           1202 	mov	(_telegramm + 0x0006),#0x01
                    0266   1203 	C$fb_lpc922.c$165$5$7 ==.
                           1204 ;	../fb_lpc922.c:165: telegramm[7]=0x40;
   0266 75*0E 40           1205 	mov	(_telegramm + 0x0007),#0x40
                    0269   1206 	C$fb_lpc922.c$166$5$7 ==.
                           1207 ;	../fb_lpc922.c:166: break;
                    0269   1208 	C$fb_lpc922.c$167$5$7 ==.
                           1209 ;	../fb_lpc922.c:167: case 4:	// memory_read_response (132)
   0269 80 68              1210 	sjmp	00131$
   026B                    1211 00124$:
                    026B   1212 	C$fb_lpc922.c$168$1$1 ==.
                           1213 ;	../fb_lpc922.c:168: for(n=0;n<mem_length;n++) {
   026B 7F 00              1214 	mov	r7,#0x00
   026D                    1215 00254$:
   026D C3                 1216 	clr	c
   026E EF                 1217 	mov	a,r7
   026F 95*03              1218 	subb	a,_mem_length
   0271 50 3C              1219 	jnc	00257$
                    0273   1220 	C$fb_lpc922.c$169$6$8 ==.
                           1221 ;	../fb_lpc922.c:169: if (mem_adrh==0) {
   0273 E5*04              1222 	mov	a,_mem_adrh
   0275 70 26              1223 	jnz	00128$
                    0277   1224 	C$fb_lpc922.c$170$7$9 ==.
                           1225 ;	../fb_lpc922.c:170: telegramm[n+10]=0;//userram[mem_adrl+n];
   0277 74 0A              1226 	mov	a,#0x0A
   0279 2F                 1227 	add	a,r7
   027A 24r07              1228 	add	a,#_telegramm
   027C F8                 1229 	mov	r0,a
   027D 76 00              1230 	mov	@r0,#0x00
                    027F   1231 	C$fb_lpc922.c$171$7$9 ==.
                           1232 ;	../fb_lpc922.c:171: if(mem_adrl+n==0x60) telegramm[n+10]=status60;	// ausser bei 0x60
   027F AD*05              1233 	mov	r5,_mem_adrl
   0281 7E 00              1234 	mov	r6,#0x00
   0283 8F 03              1235 	mov	ar3,r7
   0285 7C 00              1236 	mov	r4,#0x00
   0287 EB                 1237 	mov	a,r3
   0288 2D                 1238 	add	a,r5
   0289 FD                 1239 	mov	r5,a
   028A EC                 1240 	mov	a,r4
   028B 3E                 1241 	addc	a,r6
   028C FE                 1242 	mov	r6,a
   028D BD 60 1C           1243 	cjne	r5,#0x60,00256$
   0290 BE 00 19           1244 	cjne	r6,#0x00,00256$
   0293 74 0A              1245 	mov	a,#0x0A
   0295 2F                 1246 	add	a,r7
   0296 24r07              1247 	add	a,#_telegramm
   0298 F8                 1248 	mov	r0,a
   0299 A6*2E              1249 	mov	@r0,_status60
   029B 80 0F              1250 	sjmp	00256$
   029D                    1251 00128$:
                    029D   1252 	C$fb_lpc922.c$173$6$8 ==.
                           1253 ;	../fb_lpc922.c:173: else telegramm[n+10]=eeprom[mem_adrl+n];//else if (mem_adrh==1)
   029D 74 0A              1254 	mov	a,#0x0A
   029F 2F                 1255 	add	a,r7
   02A0 24r07              1256 	add	a,#_telegramm
   02A2 F9                 1257 	mov	r1,a
   02A3 EF                 1258 	mov	a,r7
   02A4 25*05              1259 	add	a,_mem_adrl
   02A6 90 1D 00           1260 	mov	dptr,#_eeprom
   02A9 93                 1261 	movc	a,@a+dptr
   02AA FE                 1262 	mov	r6,a
   02AB F7                 1263 	mov	@r1,a
   02AC                    1264 00256$:
                    02AC   1265 	C$fb_lpc922.c$168$5$7 ==.
                           1266 ;	../fb_lpc922.c:168: for(n=0;n<mem_length;n++) {
   02AC 0F                 1267 	inc	r7
   02AD 80 BE              1268 	sjmp	00254$
   02AF                    1269 00257$:
                    02AF   1270 	C$fb_lpc922.c$176$5$7 ==.
                           1271 ;	../fb_lpc922.c:176: telegramm[5]=mem_length+0x63;		// DRL (Anzahl Bytes + 3)
   02AF 74 63              1272 	mov	a,#0x63
   02B1 25*03              1273 	add	a,_mem_length
   02B3 F5*0C              1274 	mov	(_telegramm + 0x0005),a
                    02B5   1275 	C$fb_lpc922.c$177$5$7 ==.
                           1276 ;	../fb_lpc922.c:177: telegramm[6]=pcount|0x42;			// eigener Paketzaehler, TCPI und ersten beiden Befehlsbits
   02B5 74 42              1277 	mov	a,#0x42
   02B7 45*02              1278 	orl	a,_pcount
   02B9 F5*0D              1279 	mov	(_telegramm + 0x0006),a
                    02BB   1280 	C$fb_lpc922.c$178$5$7 ==.
                           1281 ;	../fb_lpc922.c:178: telegramm[7]=mem_length|0x40;		// letzten 2 Befehlsbits
   02BB 74 40              1282 	mov	a,#0x40
   02BD 45*03              1283 	orl	a,_mem_length
   02BF F5*0E              1284 	mov	(_telegramm + 0x0007),a
                    02C1   1285 	C$fb_lpc922.c$179$5$7 ==.
                           1286 ;	../fb_lpc922.c:179: telegramm[8]=mem_adrh;
   02C1 85*04*0F           1287 	mov	(_telegramm + 0x0008),_mem_adrh
                    02C4   1288 	C$fb_lpc922.c$180$5$7 ==.
                           1289 ;	../fb_lpc922.c:180: telegramm[9]=mem_adrl;
   02C4 85*05*10           1290 	mov	(_telegramm + 0x0009),_mem_adrl
                    02C7   1291 	C$fb_lpc922.c$181$5$7 ==.
                           1292 ;	../fb_lpc922.c:181: inc_pcount=1;
   02C7 D2*0E              1293 	setb	_inc_pcount
                    02C9   1294 	C$fb_lpc922.c$182$5$7 ==.
                           1295 ;	../fb_lpc922.c:182: break;
                    02C9   1296 	C$fb_lpc922.c$183$5$7 ==.
                           1297 ;	../fb_lpc922.c:183: case 5:	// T-disconnect (133)
   02C9 80 08              1298 	sjmp	00131$
   02CB                    1299 00130$:
                    02CB   1300 	C$fb_lpc922.c$184$5$7 ==.
                           1301 ;	../fb_lpc922.c:184: telegramm[5]=0x60;
   02CB 75*0C 60           1302 	mov	(_telegramm + 0x0005),#0x60
                    02CE   1303 	C$fb_lpc922.c$185$5$7 ==.
                           1304 ;	../fb_lpc922.c:185: telegramm[6]=0x81;
   02CE 75*0D 81           1305 	mov	(_telegramm + 0x0006),#0x81
                    02D1   1306 	C$fb_lpc922.c$186$5$7 ==.
                           1307 ;	../fb_lpc922.c:186: connected=0;
   02D1 C2*0D              1308 	clr	_connected
                    02D3   1309 	C$fb_lpc922.c$188$4$6 ==.
                           1310 ;	../fb_lpc922.c:188: }
   02D3                    1311 00131$:
                    02D3   1312 	C$fb_lpc922.c$189$4$6 ==.
                           1313 ;	../fb_lpc922.c:189: build_ok=1;
   02D3 D2*00              1314 	setb	b0
   02D5                    1315 00134$:
                    02D5   1316 	C$fb_lpc922.c$191$3$3 ==.
                           1317 ;	../fb_lpc922.c:191: if(repeatflag) telegramm[0]&=0xDF;		// Wiederholungsbit loeschen fuer Wiederholtelegramm
   02D5 30*00 06           1318 	jnb	b1,00136$
   02D8 74 DF              1319 	mov	a,#0xDF
   02DA 55*07              1320 	anl	a,_telegramm
   02DC F5*07              1321 	mov	_telegramm,a
   02DE                    1322 00136$:
                    02DE   1323 	C$fb_lpc922.c$194$3$3 ==.
                           1324 ;	../fb_lpc922.c:194: if(build_ok){//(build_tel(tx_buffer[tx_nextsend])) {	// wenn Telegramm gebildet werden konnte
   02DE 30*00 3D           1325 	jnb	b0,00145$
                    02E1   1326 	C$fb_lpc922.c$195$4$10 ==.
                           1327 ;	../fb_lpc922.c:195: EX1=0; 				//Um zu vermeiden dass man in die Abfrage hinein-empfaengt
   02E1 C2 AA              1328 	clr	_IEN0_2
                    02E3   1329 	C$fb_lpc922.c$196$4$10 ==.
                           1330 ;	../fb_lpc922.c:196: if(!fb_state) { 	//nur bilden wenn vorher kein rx_intit durch ext int kam
   02E3 E5*2A              1331 	mov	a,_fb_state
   02E5 70 32              1332 	jnz	00143$
                    02E7   1333 	C$fb_lpc922.c$197$5$11 ==.
                           1334 ;	../fb_lpc922.c:197: if((tx_buffer[tx_nextsend]&0x20)==0) {	// wenn erstmaliges Senden des Objektes
   02E7 E5*2D              1335 	mov	a,_tx_nextsend
   02E9 24r1E              1336 	add	a,#_tx_buffer
   02EB F9                 1337 	mov	r1,a
   02EC E7                 1338 	mov	a,@r1
   02ED FF                 1339 	mov	r7,a
   02EE 20 E5 07           1340 	jb	acc.5,00138$
                    02F1   1341 	C$fb_lpc922.c$198$6$12 ==.
                           1342 ;	../fb_lpc922.c:198: tx_buffer[tx_nextsend]|=0x20;		// Bit fuer "wird gerade gesendet"
   02F1 74 20              1343 	mov	a,#0x20
   02F3 4F                 1344 	orl	a,r7
   02F4 F7                 1345 	mov	@r1,a
                    02F5   1346 	C$fb_lpc922.c$199$6$12 ==.
                           1347 ;	../fb_lpc922.c:199: repeat_count=0;						// Wiederholungszaehler fuer nicht geackte Telegramme
   02F5 75*2B 00           1348 	mov	_repeat_count,#0x00
   02F8                    1349 00138$:
                    02F8   1350 	C$fb_lpc922.c$201$5$11 ==.
                           1351 ;	../fb_lpc922.c:201: if (repeat_count<4) init_tx();		// Senden starten
   02F8 74 FC              1352 	mov	a,#0x100 - 0x04
   02FA 25*2B              1353 	add	a,_repeat_count
   02FC 40 05              1354 	jc	00140$
   02FE 12s05rE5           1355 	lcall	_init_tx
   0301 80 16              1356 	sjmp	00143$
   0303                    1357 00140$:
                    0303   1358 	C$fb_lpc922.c$203$6$13 ==.
                           1359 ;	../fb_lpc922.c:203: tx_nextsend++;
   0303 05*2D              1360 	inc	_tx_nextsend
                    0305   1361 	C$fb_lpc922.c$204$6$13 ==.
                           1362 ;	../fb_lpc922.c:204: tx_nextsend&=0x07;
   0305 53*2D 07           1363 	anl	_tx_nextsend,#0x07
                    0308   1364 	C$fb_lpc922.c$205$6$13 ==.
                           1365 ;	../fb_lpc922.c:205: wait_for_ack=0;
   0308 C2*0A              1366 	clr	_wait_for_ack
                    030A   1367 	C$fb_lpc922.c$206$6$13 ==.
                           1368 ;	../fb_lpc922.c:206: inc_pcount=0;
   030A C2*0E              1369 	clr	_inc_pcount
                    030C   1370 	C$fb_lpc922.c$207$6$13 ==.
                           1371 ;	../fb_lpc922.c:207: init_rx();
   030C 12s05rB7           1372 	lcall	_init_rx
                    030F   1373 	C$fb_lpc922.c$208$6$13 ==.
                           1374 ;	../fb_lpc922.c:208: TR1=0;		// hier nicht noch einmal die ganze busfree Zeit warten
   030F C2 8E              1375 	clr	_TCON_6
                    0311   1376 	C$fb_lpc922.c$209$6$13 ==.
                           1377 ;	../fb_lpc922.c:209: TH1=0xF0;
   0311 75 8D F0           1378 	mov	_TH1,#0xF0
                    0314   1379 	C$fb_lpc922.c$210$6$13 ==.
                           1380 ;	../fb_lpc922.c:210: TL1=0x00;
   0314 75 8B 00           1381 	mov	_TL1,#0x00
                    0317   1382 	C$fb_lpc922.c$211$6$13 ==.
                           1383 ;	../fb_lpc922.c:211: TR1=1;
   0317 D2 8E              1384 	setb	_TCON_6
   0319                    1385 00143$:
                    0319   1386 	C$fb_lpc922.c$214$4$10 ==.
                           1387 ;	../fb_lpc922.c:214: EX1=1;	// ext1 int einschalten falls Empfang...
   0319 D2 AA              1388 	setb	_IEN0_2
   031B 02s05r93           1389 	ljmp	00253$
   031E                    1390 00145$:
                    031E   1391 	C$fb_lpc922.c$217$4$14 ==.
                           1392 ;	../fb_lpc922.c:217: tx_nextsend++; //hier Zeiger erhoehen wenn Telegramm nicht gebildet werden konnte
   031E 05*2D              1393 	inc	_tx_nextsend
                    0320   1394 	C$fb_lpc922.c$218$4$14 ==.
                           1395 ;	../fb_lpc922.c:218: tx_nextsend&=0x07;
   0320 53*2D 07           1396 	anl	_tx_nextsend,#0x07
   0323 02s05r93           1397 	ljmp	00253$
   0326                    1398 00148$:
                    0326   1399 	C$fb_lpc922.c$222$3$15 ==.
                           1400 ;	../fb_lpc922.c:222: TR1=0;		// nichts mehr zu tun, also statemachine stoppen
   0326 C2 8E              1401 	clr	_TCON_6
                    0328   1402 	C$fb_lpc922.c$223$3$15 ==.
                           1403 ;	../fb_lpc922.c:223: EX1=1;		// sicherstellen, dass ext. Int. 1 aktiv ist
   0328 D2 AA              1404 	setb	_IEN0_2
                    032A   1405 	C$fb_lpc922.c$225$2$2 ==.
                           1406 ;	../fb_lpc922.c:225: break;
   032A 02s05r93           1407 	ljmp	00253$
                    032D   1408 	C$fb_lpc922.c$228$2$2 ==.
                           1409 ;	../fb_lpc922.c:228: case 2: // T=75us
   032D                    1410 00150$:
                    032D   1411 	C$fb_lpc922.c$229$2$2 ==.
                           1412 ;	../fb_lpc922.c:229: fbrx_bit=!IE1;				// Flipflop des ext. Int. 1 auslesen, ist 1 bei fallender Flanke am Pin
   032D A2 8B              1413 	mov	c,_TCON_3
   032F B3                 1414 	cpl	c
   0330 92*00              1415 	mov	b0,c
                    0332   1416 	C$fb_lpc922.c$230$2$2 ==.
                           1417 ;	../fb_lpc922.c:230: IE1=0;						// Flipflop zuruecksetzen
   0332 C2 8B              1418 	clr	_TCON_3
                    0334   1419 	C$fb_lpc922.c$231$2$2 ==.
                           1420 ;	../fb_lpc922.c:231: fb_state=3;// naechster state: 3
   0334 75*2A 03           1421 	mov	_fb_state,#0x03
                    0337   1422 	C$fb_lpc922.c$232$2$2 ==.
                           1423 ;	../fb_lpc922.c:232: TH1=0;// reload auf 70µs (zeit swischen state 3 und 2)
   0337 75 8D 00           1424 	mov	_TH1,#0x00
                    033A   1425 	C$fb_lpc922.c$233$2$2 ==.
                           1426 ;	../fb_lpc922.c:233: if(fb_pattern==0) {			// fb_pattern=0 bedeutet, dass bisher nur das Startbit empfangen wurde
   033A E5*29              1427 	mov	a,_fb_pattern
   033C 70 0A              1428 	jnz	00185$
                    033E   1429 	C$fb_lpc922.c$234$3$16 ==.
                           1430 ;	../fb_lpc922.c:234: fb_pattern=1;			// 70us nach Startbit, als naecstes kommt Datenbit 0
   033E 75*29 01           1431 	mov	_fb_pattern,#0x01
                    0341   1432 	C$fb_lpc922.c$235$3$16 ==.
                           1433 ;	../fb_lpc922.c:235: ack=0;					// Empfang eines neuen Bytes, also ack/nack Flags zuruecksetzen
   0341 C2*03              1434 	clr	_ack
                    0343   1435 	C$fb_lpc922.c$236$3$16 ==.
                           1436 ;	../fb_lpc922.c:236: nack=0;
   0343 C2*04              1437 	clr	_nack
   0345 02s05r93           1438 	ljmp	00253$
   0348                    1439 00185$:
                    0348   1440 	C$fb_lpc922.c$239$3$17 ==.
                           1441 ;	../fb_lpc922.c:239: if(fb_pattern<129) {					// Daten-Bit LSB first
   0348 74 7F              1442 	mov	a,#0x100 - 0x81
   034A 25*29              1443 	add	a,_fb_pattern
   034C 40 1C              1444 	jc	00182$
                    034E   1445 	C$fb_lpc922.c$240$4$18 ==.
                           1446 ;	../fb_lpc922.c:240: if(fbrx_bit) {
   034E 30*00 08           1447 	jnb	b0,00152$
                    0351   1448 	C$fb_lpc922.c$241$5$19 ==.
                           1449 ;	../fb_lpc922.c:241: fb_parity=!fb_parity;			// Paritybit berechnen
   0351 B2*02              1450 	cpl	_fb_parity
                    0353   1451 	C$fb_lpc922.c$242$5$19 ==.
                           1452 ;	../fb_lpc922.c:242: fbrx_byte+=fb_pattern;			// Datenbit speichern
   0353 E5*29              1453 	mov	a,_fb_pattern
   0355 25*28              1454 	add	a,_fbrx_byte
   0357 F5*28              1455 	mov	_fbrx_byte,a
   0359                    1456 00152$:
                    0359   1457 	C$fb_lpc922.c$244$4$18 ==.
                           1458 ;	../fb_lpc922.c:244: fb_pattern=fb_pattern<<1;			// naechstes Bit
   0359 E5*29              1459 	mov	a,_fb_pattern
   035B 25*29              1460 	add	a,_fb_pattern
                    035D   1461 	C$fb_lpc922.c$245$4$18 ==.
                           1462 ;	../fb_lpc922.c:245: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gelesen, Parity-Bit folgt
   035D F5*29              1463 	mov	_fb_pattern,a
   035F 60 03              1464 	jz	00354$
   0361 02s05r93           1465 	ljmp	00253$
   0364                    1466 00354$:
   0364 75*29 81           1467 	mov	_fb_pattern,#0x81
   0367 02s05r93           1468 	ljmp	00253$
   036A                    1469 00182$:
                    036A   1470 	C$fb_lpc922.c$248$4$20 ==.
                           1471 ;	../fb_lpc922.c:248: TR1=0;
   036A C2 8E              1472 	clr	_TCON_6
                    036C   1473 	C$fb_lpc922.c$249$4$20 ==.
                           1474 ;	../fb_lpc922.c:249: TF1=0; //pruefen ob erforderlich!!!
   036C C2 8F              1475 	clr	_TCON_7
                    036E   1476 	C$fb_lpc922.c$250$4$20 ==.
                           1477 ;	../fb_lpc922.c:250: if(fb_parity==fbrx_bit) {				// Parity-Bit OK
   036E A2*02              1478 	mov	c,_fb_parity
   0370 20*00 01           1479 	jb	b0,00355$
   0373 B3                 1480 	cpl	c
   0374                    1481 00355$:
   0374 50 2C              1482 	jnc	00166$
                    0376   1483 	C$fb_lpc922.c$251$5$21 ==.
                           1484 ;	../fb_lpc922.c:251: if (telpos==0) {						// erstes empfangenes Byte
   0376 E5*26              1485 	mov	a,_telpos
   0378 70 0E              1486 	jnz	00160$
                    037A   1487 	C$fb_lpc922.c$252$6$22 ==.
                           1488 ;	../fb_lpc922.c:252: if (fbrx_byte==0xCC) ack=1;				// ACK empfangen
   037A 74 CC              1489 	mov	a,#0xCC
   037C B5*28 02           1490 	cjne	a,_fbrx_byte,00156$
   037F D2*03              1491 	setb	_ack
   0381                    1492 00156$:
                    0381   1493 	C$fb_lpc922.c$253$6$22 ==.
                           1494 ;	../fb_lpc922.c:253: if (fbrx_byte==0x0C) nack=1;			// NACK empfangen
   0381 74 0C              1495 	mov	a,#0x0C
   0383 B5*28 02           1496 	cjne	a,_fbrx_byte,00160$
   0386 D2*04              1497 	setb	_nack
   0388                    1498 00160$:
                    0388   1499 	C$fb_lpc922.c$255$5$21 ==.
                           1500 ;	../fb_lpc922.c:255: if (!ack && !nack && telpos<=22) {			// Datenbyte empfangen, pointer auf Arraygroesse begrenzen
   0388 20*03 19           1501 	jb	_ack,00167$
   038B 20*04 16           1502 	jb	_nack,00167$
   038E E5*26              1503 	mov	a,_telpos
   0390 24 E9              1504 	add	a,#0xff - 0x16
   0392 40 10              1505 	jc	00167$
                    0394   1506 	C$fb_lpc922.c$256$6$23 ==.
                           1507 ;	../fb_lpc922.c:256: telegramm[telpos]=fbrx_byte;			// Byte speichern
   0394 E5*26              1508 	mov	a,_telpos
   0396 24r07              1509 	add	a,#_telegramm
   0398 F8                 1510 	mov	r0,a
                    0399   1511 	C$fb_lpc922.c$257$6$23 ==.
                           1512 ;	../fb_lpc922.c:257: cs^=fbrx_byte;							// Checksum berechnen
   0399 E5*28              1513 	mov	a,_fbrx_byte
   039B F6                 1514 	mov	@r0,a
   039C 62*27              1515 	xrl	_cs,a
                    039E   1516 	C$fb_lpc922.c$258$6$23 ==.
                           1517 ;	../fb_lpc922.c:258: telpos++;								// Telegrammzeiger erhoehen
   039E 05*26              1518 	inc	_telpos
   03A0 80 02              1519 	sjmp	00167$
   03A2                    1520 00166$:
                    03A2   1521 	C$fb_lpc922.c$261$4$20 ==.
                           1522 ;	../fb_lpc922.c:261: else parity_ok=0;						// Parity Error
   03A2 C2*00              1523 	clr	_parity_ok
   03A4                    1524 00167$:
                    03A4   1525 	C$fb_lpc922.c$263$4$20 ==.
                           1526 ;	../fb_lpc922.c:263: if (wait_for_ack) {						// es wird ein ACK erwartet
                    03A4   1527 	C$fb_lpc922.c$264$5$24 ==.
                           1528 ;	../fb_lpc922.c:264: wait_for_ack=0;							// Flag zurücksetzen, da wir es ja gerade abarbeiten
   03A4 10*0A 02           1529 	jbc	_wait_for_ack,00365$
   03A7 80 1D              1530 	sjmp	00179$
   03A9                    1531 00365$:
                    03A9   1532 	C$fb_lpc922.c$265$5$24 ==.
                           1533 ;	../fb_lpc922.c:265: if (ack && parity_ok) {					// ACK empfangen und auch erwartet
   03A9 30*03 14           1534 	jnb	_ack,00171$
   03AC 30*00 11           1535 	jnb	_parity_ok,00171$
                    03AF   1536 	C$fb_lpc922.c$266$6$25 ==.
                           1537 ;	../fb_lpc922.c:266: repeat_count=4;						// keine Wiederholtelegramme mehr senden
   03AF 75*2B 04           1538 	mov	_repeat_count,#0x04
                    03B2   1539 	C$fb_lpc922.c$267$6$25 ==.
                           1540 ;	../fb_lpc922.c:267: if(inc_pcount) {
                    03B2   1541 	C$fb_lpc922.c$268$7$26 ==.
                           1542 ;	../fb_lpc922.c:268: inc_pcount=0;
   03B2 10*0E 02           1543 	jbc	_inc_pcount,00368$
   03B5 80 09              1544 	sjmp	00171$
   03B7                    1545 00368$:
                    03B7   1546 	C$fb_lpc922.c$269$7$26 ==.
                           1547 ;	../fb_lpc922.c:269: pcount+=4;
   03B7 E5*02              1548 	mov	a,_pcount
   03B9 24 04              1549 	add	a,#0x04
   03BB F5*02              1550 	mov	_pcount,a
                    03BD   1551 	C$fb_lpc922.c$270$7$26 ==.
                           1552 ;	../fb_lpc922.c:270: pcount&=0x3C;
   03BD 53*02 3C           1553 	anl	_pcount,#0x3C
   03C0                    1554 00171$:
                    03C0   1555 	C$fb_lpc922.c$273$5$24 ==.
                           1556 ;	../fb_lpc922.c:273: init_rx();
   03C0 12s05rB7           1557 	lcall	_init_rx
   03C3 02s05r93           1558 	ljmp	00253$
   03C6                    1559 00179$:
                    03C6   1560 	C$fb_lpc922.c$276$5$27 ==.
                           1561 ;	../fb_lpc922.c:276: if (parity_ok && (!ack && !nack)) {		// ganz normales Datenbyte
   03C6 30*00 1E           1562 	jnb	_parity_ok,00174$
   03C9 20*03 1B           1563 	jb	_ack,00174$
   03CC 20*04 18           1564 	jb	_nack,00174$
                    03CF   1565 	C$fb_lpc922.c$277$6$28 ==.
                           1566 ;	../fb_lpc922.c:277: TMOD=(TMOD & 0x0F) +0x10;			// Timer 1 als 16-Bit Timer
   03CF 74 0F              1567 	mov	a,#0x0F
   03D1 55 89              1568 	anl	a,_TMOD
   03D3 24 10              1569 	add	a,#0x10
   03D5 F5 89              1570 	mov	_TMOD,a
                    03D7   1571 	C$fb_lpc922.c$278$6$28 ==.
                           1572 ;	../fb_lpc922.c:278: TH1=0xFA;//0xFA;							// Timer 1 auf Timeout-Position setzen (370us)
   03D7 75 8D FA           1573 	mov	_TH1,#0xFA
                    03DA   1574 	C$fb_lpc922.c$279$6$28 ==.
                           1575 ;	../fb_lpc922.c:279: TL1=0x70;//4f 0xAB; (bis hierher sinds 91Âµs)
   03DA 75 8B 70           1576 	mov	_TL1,#0x70
                    03DD   1577 	C$fb_lpc922.c$280$6$28 ==.
                           1578 ;	../fb_lpc922.c:280: TR1=1;
   03DD D2 8E              1579 	setb	_TCON_6
                    03DF   1580 	C$fb_lpc922.c$281$6$28 ==.
                           1581 ;	../fb_lpc922.c:281: fb_state=4;							// naechster state: timeout = Telegramm fertig
   03DF 75*2A 04           1582 	mov	_fb_state,#0x04
                    03E2   1583 	C$fb_lpc922.c$282$6$28 ==.
                           1584 ;	../fb_lpc922.c:282: EX1=1;								// int1 aktiv, falls noch ein Byte kommt
   03E2 D2 AA              1585 	setb	_IEN0_2
   03E4 02s05r93           1586 	ljmp	00253$
   03E7                    1587 00174$:
                    03E7   1588 	C$fb_lpc922.c$284$5$27 ==.
                           1589 ;	../fb_lpc922.c:284: else init_rx();							// irgendwas empfangen
   03E7 12s05rB7           1590 	lcall	_init_rx
                    03EA   1591 	C$fb_lpc922.c$288$2$2 ==.
                           1592 ;	../fb_lpc922.c:288: break;
   03EA 02s05r93           1593 	ljmp	00253$
                    03ED   1594 	C$fb_lpc922.c$290$2$2 ==.
                           1595 ;	../fb_lpc922.c:290: case 3: // T=104us=0us
   03ED                    1596 00187$:
                    03ED   1597 	C$fb_lpc922.c$291$2$2 ==.
                           1598 ;	../fb_lpc922.c:291: TH1=128;// reload auf 35Âµs (Zeit zwischen State 2 und 3)
   03ED 75 8D 80           1599 	mov	_TH1,#0x80
                    03F0   1600 	C$fb_lpc922.c$292$2$2 ==.
                           1601 ;	../fb_lpc922.c:292: fb_state=2;//1
   03F0 75*2A 02           1602 	mov	_fb_state,#0x02
                    03F3   1603 	C$fb_lpc922.c$293$2$2 ==.
                           1604 ;	../fb_lpc922.c:293: break;
   03F3 02s05r93           1605 	ljmp	00253$
                    03F6   1606 	C$fb_lpc922.c$295$2$2 ==.
                           1607 ;	../fb_lpc922.c:295: case 4:	//	Timeout, d.h. Telegramm-Ende
   03F6                    1608 00188$:
                    03F6   1609 	C$fb_lpc922.c$296$2$2 ==.
                           1610 ;	../fb_lpc922.c:296: if (auto_ack && telpos>7) {//>4		// wenn ACK/NACK gesendet werden soll und Telegramm zumindest 7 Bytes hat, da sonst ein NACK wenig Sinn macht
   03F6 20*08 03           1611 	jb	_auto_ack,00372$
   03F9 02s04r7A           1612 	ljmp	00206$
   03FC                    1613 00372$:
   03FC E5*26              1614 	mov	a,_telpos
   03FE 24 F8              1615 	add	a,#0xff - 0x07
   0400 50 78              1616 	jnc	00206$
                    0402   1617 	C$fb_lpc922.c$297$3$29 ==.
                           1618 ;	../fb_lpc922.c:297: TR1=0;
   0402 C2 8E              1619 	clr	_TCON_6
                    0404   1620 	C$fb_lpc922.c$298$3$29 ==.
                           1621 ;	../fb_lpc922.c:298: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0404 74 0F              1622 	mov	a,#0x0F
   0406 55 89              1623 	anl	a,_TMOD
   0408 24 10              1624 	add	a,#0x10
   040A F5 89              1625 	mov	_TMOD,a
                    040C   1626 	C$fb_lpc922.c$299$3$29 ==.
                           1627 ;	../fb_lpc922.c:299: TH1=0xEF;					// Timer 1 auf ACK / NACK -Position setzen (15 Bit Pause = 2708Âµs (26 Bit) nach Beginn Startbit vom letzten Datenbyte)
   040C 75 8D EF           1628 	mov	_TH1,#0xEF
                    040F   1629 	C$fb_lpc922.c$300$3$29 ==.
                           1630 ;	../fb_lpc922.c:300: TL1=0x42;
   040F 75 8B 42           1631 	mov	_TL1,#0x42
                    0412   1632 	C$fb_lpc922.c$301$3$29 ==.
                           1633 ;	../fb_lpc922.c:301: TR1=1;
   0412 D2 8E              1634 	setb	_TCON_6
                    0414   1635 	C$fb_lpc922.c$302$3$29 ==.
                           1636 ;	../fb_lpc922.c:302: its_me=0;//transparency; // indiziert, ob dieses Geraet adressiert wurde, bei transparecy=1 immer
   0414 C2*05              1637 	clr	_its_me
                    0416   1638 	C$fb_lpc922.c$303$3$29 ==.
                           1639 ;	../fb_lpc922.c:303: if(telegramm[5]&0x80) {
   0416 E5*0C              1640 	mov	a,(_telegramm + 0x0005)
   0418 30 E7 1F           1641 	jnb	acc.7,00198$
                    041B   1642 	C$fb_lpc922.c$304$4$30 ==.
                           1643 ;	../fb_lpc922.c:304: if (gapos_in_gat(telegramm[3],telegramm[4])!=0xFF) its_me=1;	// Gruppenadresse
   041B 85*0A 82           1644 	mov	dpl,(_telegramm + 0x0003)
   041E C0*0B              1645 	push	(_telegramm + 0x0004)
   0420 12s06r2F           1646 	lcall	_gapos_in_gat
   0423 AF 82              1647 	mov	r7,dpl
   0425 15 81              1648 	dec	sp
   0427 BF FF 02           1649 	cjne	r7,#0xFF,00375$
   042A 80 02              1650 	sjmp	00190$
   042C                    1651 00375$:
   042C D2*05              1652 	setb	_its_me
   042E                    1653 00190$:
                    042E   1654 	C$fb_lpc922.c$305$4$30 ==.
                           1655 ;	../fb_lpc922.c:305: if (telegramm[3]==0 && telegramm[4]==0) its_me=1;				// Broadcast
   042E E5*0A              1656 	mov	a,(_telegramm + 0x0003)
   0430 70 1C              1657 	jnz	00199$
   0432 E5*0B              1658 	mov	a,(_telegramm + 0x0004)
   0434 70 18              1659 	jnz	00199$
   0436 D2*05              1660 	setb	_its_me
   0438 80 14              1661 	sjmp	00199$
   043A                    1662 00198$:
                    043A   1663 	C$fb_lpc922.c$307$3$29 ==.
                           1664 ;	../fb_lpc922.c:307: else if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) its_me=1;	// phys. Adresse
   043A 90 1D 17           1665 	mov	dptr,#(_eeprom + 0x0017)
   043D E4                 1666 	clr	a
   043E 93                 1667 	movc	a,@a+dptr
   043F FF                 1668 	mov	r7,a
   0440 B5*0A 0B           1669 	cjne	a,(_telegramm + 0x0003),00199$
   0443 90 1D 18           1670 	mov	dptr,#(_eeprom + 0x0018)
   0446 E4                 1671 	clr	a
   0447 93                 1672 	movc	a,@a+dptr
   0448 FF                 1673 	mov	r7,a
   0449 B5*0B 02           1674 	cjne	a,(_telegramm + 0x0004),00199$
   044C D2*05              1675 	setb	_its_me
   044E                    1676 00199$:
                    044E   1677 	C$fb_lpc922.c$310$3$29 ==.
                           1678 ;	../fb_lpc922.c:310: if ((cs==0xFF)&&((telegramm[5]&0x0F)+8)== (telpos))
   044E 74 FF              1679 	mov	a,#0xFF
   0450 B5*27 21           1680 	cjne	a,_cs,00203$
   0453 74 0F              1681 	mov	a,#0x0F
   0455 55*0C              1682 	anl	a,(_telegramm + 0x0005)
   0457 FF                 1683 	mov	r7,a
   0458 7E 00              1684 	mov	r6,#0x00
   045A 74 08              1685 	mov	a,#0x08
   045C 2F                 1686 	add	a,r7
   045D FF                 1687 	mov	r7,a
   045E E4                 1688 	clr	a
   045F 3E                 1689 	addc	a,r6
   0460 FE                 1690 	mov	r6,a
   0461 AC*26              1691 	mov	r4,_telpos
   0463 7D 00              1692 	mov	r5,#0x00
   0465 EF                 1693 	mov	a,r7
   0466 B5 04 0B           1694 	cjne	a,ar4,00203$
   0469 EE                 1695 	mov	a,r6
   046A B5 05 07           1696 	cjne	a,ar5,00203$
                    046D   1697 	C$fb_lpc922.c$312$4$31 ==.
                           1698 ;	../fb_lpc922.c:312: telegramm_ok=1;
   046D D2*0F              1699 	setb	_telegramm_ok
                    046F   1700 	C$fb_lpc922.c$313$4$31 ==.
                           1701 ;	../fb_lpc922.c:313: if(its_me)tel_arrived=1;//&&(telegramm[5]&0x0F== telpos-8)
   046F 30*05 02           1702 	jnb	_its_me,00203$
   0472 D2*06              1703 	setb	_tel_arrived
   0474                    1704 00203$:
                    0474   1705 	C$fb_lpc922.c$315$3$29 ==.
                           1706 ;	../fb_lpc922.c:315: fb_state=5;					// naechster state: ACK-Position erreicht
   0474 75*2A 05           1707 	mov	_fb_state,#0x05
   0477 02s05r93           1708 	ljmp	00253$
   047A                    1709 00206$:
                    047A   1710 	C$fb_lpc922.c$320$3$32 ==.
                           1711 ;	../fb_lpc922.c:320: init_rx();						// wieder in den Empfang zurück
   047A 12s05rB7           1712 	lcall	_init_rx
                    047D   1713 	C$fb_lpc922.c$322$2$2 ==.
                           1714 ;	../fb_lpc922.c:322: break;
   047D 02s05r93           1715 	ljmp	00253$
                    0480   1716 	C$fb_lpc922.c$324$2$2 ==.
                           1717 ;	../fb_lpc922.c:324: case 5:	// ACK-Position erreicht
   0480                    1718 00209$:
                    0480   1719 	C$fb_lpc922.c$325$2$2 ==.
                           1720 ;	../fb_lpc922.c:325: TR1=0;
   0480 C2 8E              1721 	clr	_TCON_6
                    0482   1722 	C$fb_lpc922.c$326$2$2 ==.
                           1723 ;	../fb_lpc922.c:326: if (telegramm_ok) {	// Checksum und Laenge OK
   0482 30*0F 13           1724 	jnb	_telegramm_ok,00214$
                    0485   1725 	C$fb_lpc922.c$327$3$33 ==.
                           1726 ;	../fb_lpc922.c:327: if (its_me) {					// Gerät adressiert
   0485 30*05 0A           1727 	jnb	_its_me,00211$
                    0488   1728 	C$fb_lpc922.c$328$4$34 ==.
                           1729 ;	../fb_lpc922.c:328: send_ack=1;
   0488 D2*0B              1730 	setb	_send_ack
                    048A   1731 	C$fb_lpc922.c$329$4$34 ==.
                           1732 ;	../fb_lpc922.c:329: init_tx();						// Senden initiieren
   048A 12s05rE5           1733 	lcall	_init_tx
                    048D   1734 	C$fb_lpc922.c$330$4$34 ==.
                           1735 ;	../fb_lpc922.c:330: wait_for_ack=0;					// bei ACK senden nicht erneut auf ACK warten
   048D C2*0A              1736 	clr	_wait_for_ack
   048F 02s05r93           1737 	ljmp	00253$
   0492                    1738 00211$:
                    0492   1739 	C$fb_lpc922.c$332$3$33 ==.
                           1740 ;	../fb_lpc922.c:332: else init_rx();					// Gerät nicht adressiert, also zurück zu Empfang
   0492 12s05rB7           1741 	lcall	_init_rx
   0495 02s05r93           1742 	ljmp	00253$
   0498                    1743 00214$:
                    0498   1744 	C$fb_lpc922.c$335$3$35 ==.
                           1745 ;	../fb_lpc922.c:335: send_nack=1;
   0498 D2*0C              1746 	setb	_send_nack
                    049A   1747 	C$fb_lpc922.c$336$3$35 ==.
                           1748 ;	../fb_lpc922.c:336: init_tx();
   049A 12s05rE5           1749 	lcall	_init_tx
                    049D   1750 	C$fb_lpc922.c$337$3$35 ==.
                           1751 ;	../fb_lpc922.c:337: wait_for_ack=0;					// bei NACK senden nicht erneut auf ACK warten
   049D C2*0A              1752 	clr	_wait_for_ack
                    049F   1753 	C$fb_lpc922.c$339$2$2 ==.
                           1754 ;	../fb_lpc922.c:339: break;
   049F 02s05r93           1755 	ljmp	00253$
                    04A2   1756 	C$fb_lpc922.c$343$2$2 ==.
                           1757 ;	../fb_lpc922.c:343: case 10:	// Byte Senden, T=0us
   04A2                    1758 00216$:
                    04A2   1759 	C$fb_lpc922.c$344$2$2 ==.
                           1760 ;	../fb_lpc922.c:344: send_byte=telegramm[telpos];
   04A2 E5*26              1761 	mov	a,_telpos
   04A4 24r07              1762 	add	a,#_telegramm
   04A6 F9                 1763 	mov	r1,a
   04A7 87 07              1764 	mov	ar7,@r1
                    04A9   1765 	C$fb_lpc922.c$345$2$2 ==.
                           1766 ;	../fb_lpc922.c:345: if (send_ack) send_byte=0xCC;
   04A9 30*0B 02           1767 	jnb	_send_ack,00218$
   04AC 7F CC              1768 	mov	r7,#0xCC
   04AE                    1769 00218$:
                    04AE   1770 	C$fb_lpc922.c$346$2$2 ==.
                           1771 ;	../fb_lpc922.c:346: if (send_nack) send_byte=0x0C;
   04AE 30*0C 02           1772 	jnb	_send_nack,00220$
   04B1 7F 0C              1773 	mov	r7,#0x0C
   04B3                    1774 00220$:
                    04B3   1775 	C$fb_lpc922.c$347$2$2 ==.
                           1776 ;	../fb_lpc922.c:347: EX1=0;					// Empfang verhindern
   04B3 C2 AA              1777 	clr	_IEN0_2
                    04B5   1778 	C$fb_lpc922.c$348$2$2 ==.
                           1779 ;	../fb_lpc922.c:348: if(fb_state==10){
   04B5 74 0A              1780 	mov	a,#0x0A
   04B7 B5*2A 02           1781 	cjne	a,_fb_state,00391$
   04BA 80 03              1782 	sjmp	00392$
   04BC                    1783 00391$:
   04BC 02s05r93           1784 	ljmp	00253$
   04BF                    1785 00392$:
                    04BF   1786 	C$fb_lpc922.c$349$3$36 ==.
                           1787 ;	../fb_lpc922.c:349: if (fb_pattern<=128) {			// Startbit und Datenbits (pattern=0:startbit, 1 2 4 8 .. 128 Datenbits, 129 parity)
   04BF E5*29              1788 	mov	a,_fb_pattern
   04C1 24 7F              1789 	add	a,#0xff - 0x80
   04C3 40 2C              1790 	jc	00233$
                    04C5   1791 	C$fb_lpc922.c$350$4$37 ==.
                           1792 ;	../fb_lpc922.c:350: if ((send_byte & fb_pattern)==0) {	// wenn Bit logisch 0 ist
   04C5 E5*29              1793 	mov	a,_fb_pattern
   04C7 5F                 1794 	anl	a,r7
   04C8 70 08              1795 	jnz	00222$
                    04CA   1796 	C$fb_lpc922.c$352$5$38 ==.
                           1797 ;	../fb_lpc922.c:352: FBOUTC=1;						// Bus runter ziehen
   04CA D2 96              1798 	setb	_P1_6
                    04CC   1799 	C$fb_lpc922.c$354$5$38 ==.
                           1800 ;	../fb_lpc922.c:354: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   04CC C2*09              1801 	clr	_fbtx_bit
                    04CE   1802 	C$fb_lpc922.c$355$5$38 ==.
                           1803 ;	../fb_lpc922.c:355: fb_parity=!fb_parity;			// Parity-Bit berechnen
   04CE B2*02              1804 	cpl	_fb_parity
   04D0 80 02              1805 	sjmp	00223$
   04D2                    1806 00222$:
                    04D2   1807 	C$fb_lpc922.c$357$4$37 ==.
                           1808 ;	../fb_lpc922.c:357: else fbtx_bit=1;
   04D2 D2*09              1809 	setb	_fbtx_bit
   04D4                    1810 00223$:
                    04D4   1811 	C$fb_lpc922.c$358$4$37 ==.
                           1812 ;	../fb_lpc922.c:358: if (fb_pattern==0) {				// wenn Startbit: parity zuruecksetzen
   04D4 E5*29              1813 	mov	a,_fb_pattern
   04D6 70 07              1814 	jnz	00225$
                    04D8   1815 	C$fb_lpc922.c$359$5$39 ==.
                           1816 ;	../fb_lpc922.c:359: fb_pattern=1;					// auf erstes Datenbit zeigen
   04D8 75*29 01           1817 	mov	_fb_pattern,#0x01
                    04DB   1818 	C$fb_lpc922.c$360$5$39 ==.
                           1819 ;	../fb_lpc922.c:360: fb_parity=0;
   04DB C2*02              1820 	clr	_fb_parity
   04DD 80 06              1821 	sjmp	00226$
   04DF                    1822 00225$:
                    04DF   1823 	C$fb_lpc922.c$362$4$37 ==.
                           1824 ;	../fb_lpc922.c:362: else fb_pattern=fb_pattern<<1;		// naechstes Datenbit
   04DF E5*29              1825 	mov	a,_fb_pattern
   04E1 25*29              1826 	add	a,_fb_pattern
   04E3 F5*29              1827 	mov	_fb_pattern,a
   04E5                    1828 00226$:
                    04E5   1829 	C$fb_lpc922.c$363$4$37 ==.
                           1830 ;	../fb_lpc922.c:363: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gesendet, Parity-Bit folgt
   04E5 E5*29              1831 	mov	a,_fb_pattern
   04E7 70 03              1832 	jnz	00228$
   04E9 75*29 81           1833 	mov	_fb_pattern,#0x81
   04EC                    1834 00228$:
                    04EC   1835 	C$fb_lpc922.c$364$4$37 ==.
                           1836 ;	../fb_lpc922.c:364: fb_state=11;
   04EC 75*2A 0B           1837 	mov	_fb_state,#0x0B
   04EF 80 13              1838 	sjmp	00234$
   04F1                    1839 00233$:
                    04F1   1840 	C$fb_lpc922.c$367$4$40 ==.
                           1841 ;	../fb_lpc922.c:367: if (!fb_parity) {				// wenn Parity-Bit logisch 0
   04F1 20*02 06           1842 	jb	_fb_parity,00230$
                    04F4   1843 	C$fb_lpc922.c$368$5$41 ==.
                           1844 ;	../fb_lpc922.c:368: FBOUTC=1;						// Bus runterziehen
   04F4 D2 96              1845 	setb	_P1_6
                    04F6   1846 	C$fb_lpc922.c$369$5$41 ==.
                           1847 ;	../fb_lpc922.c:369: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   04F6 C2*09              1848 	clr	_fbtx_bit
   04F8 80 02              1849 	sjmp	00231$
   04FA                    1850 00230$:
                    04FA   1851 	C$fb_lpc922.c$371$4$40 ==.
                           1852 ;	../fb_lpc922.c:371: else fbtx_bit=1;
   04FA D2*09              1853 	setb	_fbtx_bit
   04FC                    1854 00231$:
                    04FC   1855 	C$fb_lpc922.c$372$4$40 ==.
                           1856 ;	../fb_lpc922.c:372: telpos++;					// naechstes Byte
   04FC 05*26              1857 	inc	_telpos
                    04FE   1858 	C$fb_lpc922.c$373$4$40 ==.
                           1859 ;	../fb_lpc922.c:373: fb_pattern=0;				// wieder mit Startbit beginnen
   04FE 75*29 00           1860 	mov	_fb_pattern,#0x00
                    0501   1861 	C$fb_lpc922.c$374$4$40 ==.
                           1862 ;	../fb_lpc922.c:374: fb_state=13;				// Pruefen ob Telegramm fertig
   0501 75*2A 0D           1863 	mov	_fb_state,#0x0D
   0504                    1864 00234$:
                    0504   1865 	C$fb_lpc922.c$376$3$36 ==.
                           1866 ;	../fb_lpc922.c:376: TH1=18; //reload 70µ -delay interrupt (von state 11 auf 13)
   0504 75 8D 12           1867 	mov	_TH1,#0x12
                    0507   1868 	C$fb_lpc922.c$378$2$2 ==.
                           1869 ;	../fb_lpc922.c:378: break;
   0507 02s05r93           1870 	ljmp	00253$
                    050A   1871 	C$fb_lpc922.c$380$2$2 ==.
                           1872 ;	../fb_lpc922.c:380: case 11:	// Sendestufe aus, T=35us
   050A                    1873 00237$:
                    050A   1874 	C$fb_lpc922.c$381$2$2 ==.
                           1875 ;	../fb_lpc922.c:381: if(telpos==0 && fb_pattern==1) {	// 1. Byte Startbit
   050A E5*26              1876 	mov	a,_telpos
   050C 70 07              1877 	jnz	00239$
   050E 74 01              1878 	mov	a,#0x01
   0510 B5*29 02           1879 	cjne	a,_fb_pattern,00239$
                    0513   1880 	C$fb_lpc922.c$382$3$42 ==.
                           1881 ;	../fb_lpc922.c:382: repeat_count++;		// angefangener Sendeversuch, also Zaehler erhoehen
   0513 05*2B              1882 	inc	_repeat_count
   0515                    1883 00239$:
                    0515   1884 	C$fb_lpc922.c$384$2$2 ==.
                           1885 ;	../fb_lpc922.c:384: FBOUTC=0;				// Sendestufe aus
   0515 C2 96              1886 	clr	_P1_6
                    0517   1887 	C$fb_lpc922.c$385$2$2 ==.
                           1888 ;	../fb_lpc922.c:385: if (fbtx_bit & IE1) {	// Kollision
   0517 A2*09              1889 	mov	c,_fbtx_bit
   0519 82 8B              1890 	anl	c,_TCON_3
   051B 50 07              1891 	jnc	00242$
                    051D   1892 	C$fb_lpc922.c$386$3$43 ==.
                           1893 ;	../fb_lpc922.c:386: wait_for_ack=0;
   051D C2*0A              1894 	clr	_wait_for_ack
                    051F   1895 	C$fb_lpc922.c$387$3$43 ==.
                           1896 ;	../fb_lpc922.c:387: init_rx();				// Senden abbrechen und Empfang initialisieren
   051F 12s05rB7           1897 	lcall	_init_rx
   0522 80 06              1898 	sjmp	00243$
   0524                    1899 00242$:
                    0524   1900 	C$fb_lpc922.c$390$3$44 ==.
                           1901 ;	../fb_lpc922.c:390: fb_state=10;//12;
   0524 75*2A 0A           1902 	mov	_fb_state,#0x0A
                    0527   1903 	C$fb_lpc922.c$391$3$44 ==.
                           1904 ;	../fb_lpc922.c:391: TH1=110;// 35Âµs + delay (von state 10 auf 11)
   0527 75 8D 6E           1905 	mov	_TH1,#0x6E
   052A                    1906 00243$:
                    052A   1907 	C$fb_lpc922.c$393$2$2 ==.
                           1908 ;	../fb_lpc922.c:393: IE1=0;					// Flipflop loeschen
   052A C2 8B              1909 	clr	_TCON_3
                    052C   1910 	C$fb_lpc922.c$394$2$2 ==.
                           1911 ;	../fb_lpc922.c:394: break;
                    052C   1912 	C$fb_lpc922.c$400$2$2 ==.
                           1913 ;	../fb_lpc922.c:400: case 13:	// Byte uebertragen, T=35us, pruefen ob Telegramm fertig
   052C 80 65              1914 	sjmp	00253$
   052E                    1915 00244$:
                    052E   1916 	C$fb_lpc922.c$401$2$2 ==.
                           1917 ;	../fb_lpc922.c:401: FBOUTC=0;
   052E C2 96              1918 	clr	_P1_6
                    0530   1919 	C$fb_lpc922.c$402$2$2 ==.
                           1920 ;	../fb_lpc922.c:402: TR1=0;
   0530 C2 8E              1921 	clr	_TCON_6
                    0532   1922 	C$fb_lpc922.c$403$2$2 ==.
                           1923 ;	../fb_lpc922.c:403: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0532 74 0F              1924 	mov	a,#0x0F
   0534 55 89              1925 	anl	a,_TMOD
   0536 24 10              1926 	add	a,#0x10
   0538 F5 89              1927 	mov	_TMOD,a
                    053A   1928 	C$fb_lpc922.c$404$2$2 ==.
                           1929 ;	../fb_lpc922.c:404: TH1=0xFB;					// Timer 1 auf Interbyte Abstand setzen (3 Bit Pause = 312Âµs
   053A 75 8D FB           1930 	mov	_TH1,#0xFB
                    053D   1931 	C$fb_lpc922.c$405$2$2 ==.
                           1932 ;	../fb_lpc922.c:405: TL1=0x90;
   053D 75 8B 90           1933 	mov	_TL1,#0x90
                    0540   1934 	C$fb_lpc922.c$406$2$2 ==.
                           1935 ;	../fb_lpc922.c:406: TR1=1;
   0540 D2 8E              1936 	setb	_TCON_6
                    0542   1937 	C$fb_lpc922.c$407$2$2 ==.
                           1938 ;	../fb_lpc922.c:407: if (send_ack || send_nack) {	// ACK/NACK senden
   0542 20*0B 03           1939 	jb	_send_ack,00248$
   0545 30*0C 05           1940 	jnb	_send_nack,00249$
   0548                    1941 00248$:
                    0548   1942 	C$fb_lpc922.c$408$3$45 ==.
                           1943 ;	../fb_lpc922.c:408: init_rx();					// ACK senden abgeschlossen, also statemachine auf Anfang
   0548 12s05rB7           1944 	lcall	_init_rx
   054B 80 2B              1945 	sjmp	00250$
   054D                    1946 00249$:
                    054D   1947 	C$fb_lpc922.c$411$3$46 ==.
                           1948 ;	../fb_lpc922.c:411: if (telpos>((telegramm[5]&0x0F)+7)) {		// Telegramm fertig gesendet
   054D 74 0F              1949 	mov	a,#0x0F
   054F 55*0C              1950 	anl	a,(_telegramm + 0x0005)
   0551 FF                 1951 	mov	r7,a
   0552 7E 00              1952 	mov	r6,#0x00
   0554 74 07              1953 	mov	a,#0x07
   0556 2F                 1954 	add	a,r7
   0557 FF                 1955 	mov	r7,a
   0558 E4                 1956 	clr	a
   0559 3E                 1957 	addc	a,r6
   055A FE                 1958 	mov	r6,a
   055B AC*26              1959 	mov	r4,_telpos
   055D 7D 00              1960 	mov	r5,#0x00
   055F C3                 1961 	clr	c
   0560 EF                 1962 	mov	a,r7
   0561 9C                 1963 	subb	a,r4
   0562 EE                 1964 	mov	a,r6
   0563 64 80              1965 	xrl	a,#0x80
   0565 8D F0              1966 	mov	b,r5
   0567 63 F0 80           1967 	xrl	b,#0x80
   056A 95 F0              1968 	subb	a,b
   056C 50 07              1969 	jnc	00246$
                    056E   1970 	C$fb_lpc922.c$412$4$47 ==.
                           1971 ;	../fb_lpc922.c:412: tel_sent=1;
   056E D2*07              1972 	setb	_tel_sent
                    0570   1973 	C$fb_lpc922.c$413$4$47 ==.
                           1974 ;	../fb_lpc922.c:413: init_rx();	// Telegramm senden abgeschlossen, ggf. wiederholen wenn nicht geackt wird
   0570 12s05rB7           1975 	lcall	_init_rx
   0573 80 03              1976 	sjmp	00250$
   0575                    1977 00246$:
                    0575   1978 	C$fb_lpc922.c$415$3$46 ==.
                           1979 ;	../fb_lpc922.c:415: else fb_state=14;		// naechstes Byte: Interbyte Abstand einhalten
   0575 75*2A 0E           1980 	mov	_fb_state,#0x0E
   0578                    1981 00250$:
                    0578   1982 	C$fb_lpc922.c$417$2$2 ==.
                           1983 ;	../fb_lpc922.c:417: IE1=0;
   0578 C2 8B              1984 	clr	_TCON_3
                    057A   1985 	C$fb_lpc922.c$418$2$2 ==.
                           1986 ;	../fb_lpc922.c:418: break;
                    057A   1987 	C$fb_lpc922.c$420$2$2 ==.
                           1988 ;	../fb_lpc922.c:420: case 14:	// Interbyte Abstand erreicht (=Stopbit + 2 Bit)
   057A 80 17              1989 	sjmp	00253$
   057C                    1990 00252$:
                    057C   1991 	C$fb_lpc922.c$421$2$2 ==.
                           1992 ;	../fb_lpc922.c:421: TR1=0;
   057C C2 8E              1993 	clr	_TCON_6
                    057E   1994 	C$fb_lpc922.c$422$2$2 ==.
                           1995 ;	../fb_lpc922.c:422: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   057E 74 0F              1996 	mov	a,#0x0F
   0580 55 89              1997 	anl	a,_TMOD
   0582 24 20              1998 	add	a,#0x20
   0584 F5 89              1999 	mov	_TMOD,a
                    0586   2000 	C$fb_lpc922.c$423$2$2 ==.
                           2001 ;	../fb_lpc922.c:423: TH1=110;							// Timer 1 auf 104/3 us laden
   0586 75 8D 6E           2002 	mov	_TH1,#0x6E
                    0589   2003 	C$fb_lpc922.c$424$2$2 ==.
                           2004 ;	../fb_lpc922.c:424: TL1=128;
   0589 75 8B 80           2005 	mov	_TL1,#0x80
                    058C   2006 	C$fb_lpc922.c$425$2$2 ==.
                           2007 ;	../fb_lpc922.c:425: TF1=0;
   058C C2 8F              2008 	clr	_TCON_7
                    058E   2009 	C$fb_lpc922.c$426$2$2 ==.
                           2010 ;	../fb_lpc922.c:426: TR1=1;
   058E D2 8E              2011 	setb	_TCON_6
                    0590   2012 	C$fb_lpc922.c$427$2$2 ==.
                           2013 ;	../fb_lpc922.c:427: fb_state=10;
   0590 75*2A 0A           2014 	mov	_fb_state,#0x0A
                    0593   2015 	C$fb_lpc922.c$432$1$1 ==.
                           2016 ;	../fb_lpc922.c:432: }
   0593                    2017 00253$:
                    0593   2018 	C$fb_lpc922.c$433$1$1 ==.
                           2019 ;	../fb_lpc922.c:433: interrupted=1;			// zeigt der app, dass sie unterbrochen wurde
   0593 D2*01              2020 	setb	_interrupted
   0595 85*00 81           2021 	mov	sp,_bp
   0598 D0*00              2022 	pop	_bp
   059A D0 D0              2023 	pop	psw
   059C D0 00              2024 	pop	(0+0)
   059E D0 01              2025 	pop	(0+1)
   05A0 D0 02              2026 	pop	(0+2)
   05A2 D0 03              2027 	pop	(0+3)
   05A4 D0 04              2028 	pop	(0+4)
   05A6 D0 05              2029 	pop	(0+5)
   05A8 D0 06              2030 	pop	(0+6)
   05AA D0 07              2031 	pop	(0+7)
   05AC D0 83              2032 	pop	dph
   05AE D0 82              2033 	pop	dpl
   05B0 D0 F0              2034 	pop	b
   05B2 D0 E0              2035 	pop	acc
   05B4 D0*00              2036 	pop	bits
                    05B6   2037 	C$fb_lpc922.c$434$1$1 ==.
                    05B6   2038 	XG$T1_int$0$0 ==.
   05B6 32                 2039 	reti
                           2040 ;------------------------------------------------------------
                           2041 ;Allocation info for local variables in function 'init_rx'
                           2042 ;------------------------------------------------------------
                    05B7   2043 	G$init_rx$0$0 ==.
                    05B7   2044 	C$fb_lpc922.c$437$1$1 ==.
                           2045 ;	../fb_lpc922.c:437: void init_rx(void) 	// Empfangen initiieren (statemachine auf Anfang)
                           2046 ;	-----------------------------------------
                           2047 ;	 function init_rx
                           2048 ;	-----------------------------------------
   05B7                    2049 _init_rx:
                    05B7   2050 	C$fb_lpc922.c$439$1$1 ==.
                           2051 ;	../fb_lpc922.c:439: fb_state=0;
   05B7 75*2A 00           2052 	mov	_fb_state,#0x00
                    05BA   2053 	C$fb_lpc922.c$440$1$1 ==.
                           2054 ;	../fb_lpc922.c:440: IE1=0;
   05BA C2 8B              2055 	clr	_TCON_3
                    05BC   2056 	C$fb_lpc922.c$441$1$1 ==.
                           2057 ;	../fb_lpc922.c:441: TR1=0;
   05BC C2 8E              2058 	clr	_TCON_6
                    05BE   2059 	C$fb_lpc922.c$442$1$1 ==.
                           2060 ;	../fb_lpc922.c:442: ET1=0;
   05BE C2 AB              2061 	clr	_IEN0_3
                    05C0   2062 	C$fb_lpc922.c$443$1$1 ==.
                           2063 ;	../fb_lpc922.c:443: cs=0;
   05C0 75*27 00           2064 	mov	_cs,#0x00
                    05C3   2065 	C$fb_lpc922.c$444$1$1 ==.
                           2066 ;	../fb_lpc922.c:444: telpos=0;
   05C3 75*26 00           2067 	mov	_telpos,#0x00
                    05C6   2068 	C$fb_lpc922.c$445$1$1 ==.
                           2069 ;	../fb_lpc922.c:445: TR1=0;
   05C6 C2 8E              2070 	clr	_TCON_6
                    05C8   2071 	C$fb_lpc922.c$446$1$1 ==.
                           2072 ;	../fb_lpc922.c:446: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   05C8 74 0F              2073 	mov	a,#0x0F
   05CA 55 89              2074 	anl	a,_TMOD
   05CC 24 10              2075 	add	a,#0x10
   05CE F5 89              2076 	mov	_TMOD,a
                    05D0   2077 	C$fb_lpc922.c$447$1$1 ==.
                           2078 ;	../fb_lpc922.c:447: TH1=0x89;					// busfree Zeit = 15 Bit (auf ACK) + 11 Bit (ACK) + 53 Bit
   05D0 75 8D 89           2079 	mov	_TH1,#0x89
                    05D3   2080 	C$fb_lpc922.c$448$1$1 ==.
                           2081 ;	../fb_lpc922.c:448: TL1=0xAF;
   05D3 75 8B AF           2082 	mov	_TL1,#0xAF
                    05D6   2083 	C$fb_lpc922.c$449$1$1 ==.
                           2084 ;	../fb_lpc922.c:449: send_ack=0;
   05D6 C2*0B              2085 	clr	_send_ack
                    05D8   2086 	C$fb_lpc922.c$450$1$1 ==.
                           2087 ;	../fb_lpc922.c:450: send_nack=0;
   05D8 C2*0C              2088 	clr	_send_nack
                    05DA   2089 	C$fb_lpc922.c$451$1$1 ==.
                           2090 ;	../fb_lpc922.c:451: TF1=0;
   05DA C2 8F              2091 	clr	_TCON_7
                    05DC   2092 	C$fb_lpc922.c$452$1$1 ==.
                           2093 ;	../fb_lpc922.c:452: TR1=1;
   05DC D2 8E              2094 	setb	_TCON_6
                    05DE   2095 	C$fb_lpc922.c$453$1$1 ==.
                           2096 ;	../fb_lpc922.c:453: EX1=1;
   05DE D2 AA              2097 	setb	_IEN0_2
                    05E0   2098 	C$fb_lpc922.c$454$1$1 ==.
                           2099 ;	../fb_lpc922.c:454: ET1=1;
   05E0 D2 AB              2100 	setb	_IEN0_3
                    05E2   2101 	C$fb_lpc922.c$455$1$1 ==.
                           2102 ;	../fb_lpc922.c:455: telegramm_ok=0;
   05E2 C2*0F              2103 	clr	_telegramm_ok
                    05E4   2104 	C$fb_lpc922.c$456$1$1 ==.
                    05E4   2105 	XG$init_rx$0$0 ==.
   05E4 22                 2106 	ret
                           2107 ;------------------------------------------------------------
                           2108 ;Allocation info for local variables in function 'init_tx'
                           2109 ;------------------------------------------------------------
                           2110 ;n                         Allocated to registers r6 
                           2111 ;cs_pos                    Allocated to registers r7 
                           2112 ;------------------------------------------------------------
                    05E5   2113 	G$init_tx$0$0 ==.
                    05E5   2114 	C$fb_lpc922.c$459$1$1 ==.
                           2115 ;	../fb_lpc922.c:459: void init_tx(void) 		// Checksum des Telegramms berechnen und Senden initiieren
                           2116 ;	-----------------------------------------
                           2117 ;	 function init_tx
                           2118 ;	-----------------------------------------
   05E5                    2119 _init_tx:
                    05E5   2120 	C$fb_lpc922.c$463$1$1 ==.
                           2121 ;	../fb_lpc922.c:463: TR1=0;
   05E5 C2 8E              2122 	clr	_TCON_6
                    05E7   2123 	C$fb_lpc922.c$464$1$1 ==.
                           2124 ;	../fb_lpc922.c:464: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   05E7 74 0F              2125 	mov	a,#0x0F
   05E9 55 89              2126 	anl	a,_TMOD
   05EB 24 20              2127 	add	a,#0x20
   05ED F5 89              2128 	mov	_TMOD,a
                    05EF   2129 	C$fb_lpc922.c$465$1$1 ==.
                           2130 ;	../fb_lpc922.c:465: TH1=110;							// von state 10 auf 11
   05EF 75 8D 6E           2131 	mov	_TH1,#0x6E
                    05F2   2132 	C$fb_lpc922.c$466$1$1 ==.
                           2133 ;	../fb_lpc922.c:466: TL1=128;							// von hier bis state 10
   05F2 75 8B 80           2134 	mov	_TL1,#0x80
                    05F5   2135 	C$fb_lpc922.c$467$1$1 ==.
                           2136 ;	../fb_lpc922.c:467: TF1=0;
   05F5 C2 8F              2137 	clr	_TCON_7
                    05F7   2138 	C$fb_lpc922.c$469$1$1 ==.
                           2139 ;	../fb_lpc922.c:469: cs_pos=(telegramm[5]&0x0F)+7;		// Position der Checksum im Telegramm
   05F7 74 0F              2140 	mov	a,#0x0F
   05F9 55*0C              2141 	anl	a,(_telegramm + 0x0005)
   05FB 24 07              2142 	add	a,#0x07
   05FD FF                 2143 	mov	r7,a
                    05FE   2144 	C$fb_lpc922.c$470$1$1 ==.
                           2145 ;	../fb_lpc922.c:470: cs=0xFF;
   05FE 75*27 FF           2146 	mov	_cs,#0xFF
                    0601   2147 	C$fb_lpc922.c$471$1$1 ==.
                           2148 ;	../fb_lpc922.c:471: for(n=0;n<cs_pos;n++) {
   0601 7E 00              2149 	mov	r6,#0x00
   0603                    2150 00101$:
   0603 C3                 2151 	clr	c
   0604 EE                 2152 	mov	a,r6
   0605 9F                 2153 	subb	a,r7
   0606 50 0B              2154 	jnc	00104$
                    0608   2155 	C$fb_lpc922.c$472$2$2 ==.
                           2156 ;	../fb_lpc922.c:472: cs^=telegramm[n];				// Checksum berechnen
   0608 EE                 2157 	mov	a,r6
   0609 24r07              2158 	add	a,#_telegramm
   060B F9                 2159 	mov	r1,a
   060C E7                 2160 	mov	a,@r1
   060D FD                 2161 	mov	r5,a
   060E 62*27              2162 	xrl	_cs,a
                    0610   2163 	C$fb_lpc922.c$471$1$1 ==.
                           2164 ;	../fb_lpc922.c:471: for(n=0;n<cs_pos;n++) {
   0610 0E                 2165 	inc	r6
   0611 80 F0              2166 	sjmp	00101$
   0613                    2167 00104$:
                    0613   2168 	C$fb_lpc922.c$474$1$1 ==.
                           2169 ;	../fb_lpc922.c:474: telegramm[cs_pos]=cs;				// Checksum hinter Nutzdaten anfaegen
   0613 EF                 2170 	mov	a,r7
   0614 24r07              2171 	add	a,#_telegramm
   0616 F8                 2172 	mov	r0,a
   0617 A6*27              2173 	mov	@r0,_cs
                    0619   2174 	C$fb_lpc922.c$475$1$1 ==.
                           2175 ;	../fb_lpc922.c:475: ack=0;
   0619 C2*03              2176 	clr	_ack
                    061B   2177 	C$fb_lpc922.c$476$1$1 ==.
                           2178 ;	../fb_lpc922.c:476: nack=0;
   061B C2*04              2179 	clr	_nack
                    061D   2180 	C$fb_lpc922.c$477$1$1 ==.
                           2181 ;	../fb_lpc922.c:477: wait_for_ack=1;
   061D D2*0A              2182 	setb	_wait_for_ack
                    061F   2183 	C$fb_lpc922.c$479$1$1 ==.
                           2184 ;	../fb_lpc922.c:479: fb_state=10;						// naechster state: senden
   061F 75*2A 0A           2185 	mov	_fb_state,#0x0A
                    0622   2186 	C$fb_lpc922.c$480$1$1 ==.
                           2187 ;	../fb_lpc922.c:480: fb_pattern=0;						// naechstes zu sendendes Bit, 0=Startbit
   0622 75*29 00           2188 	mov	_fb_pattern,#0x00
                    0625   2189 	C$fb_lpc922.c$481$1$1 ==.
                           2190 ;	../fb_lpc922.c:481: telpos=0;							// naechstes zu sendende Byte
   0625 75*26 00           2191 	mov	_telpos,#0x00
                    0628   2192 	C$fb_lpc922.c$482$1$1 ==.
                           2193 ;	../fb_lpc922.c:482: EX1=0;								// ext. int1 inaktiv
   0628 C2 AA              2194 	clr	_IEN0_2
                    062A   2195 	C$fb_lpc922.c$483$1$1 ==.
                           2196 ;	../fb_lpc922.c:483: TR1=1;								// Timer 1 starten
   062A D2 8E              2197 	setb	_TCON_6
                    062C   2198 	C$fb_lpc922.c$484$1$1 ==.
                           2199 ;	../fb_lpc922.c:484: ET1=1;								// Timer 1 int. aktiv
   062C D2 AB              2200 	setb	_IEN0_3
                    062E   2201 	C$fb_lpc922.c$485$1$1 ==.
                    062E   2202 	XG$init_tx$0$0 ==.
   062E 22                 2203 	ret
                           2204 ;------------------------------------------------------------
                           2205 ;Allocation info for local variables in function 'gapos_in_gat'
                           2206 ;------------------------------------------------------------
                           2207 ;gal                       Allocated to stack - _bp -3
                           2208 ;gah                       Allocated to registers r7 
                           2209 ;ga_position               Allocated to registers r6 
                           2210 ;n                         Allocated to registers r5 
                           2211 ;------------------------------------------------------------
                    062F   2212 	G$gapos_in_gat$0$0 ==.
                    062F   2213 	C$fb_lpc922.c$492$1$1 ==.
                           2214 ;	../fb_lpc922.c:492: unsigned char gapos_in_gat(unsigned char gah, unsigned char gal)
                           2215 ;	-----------------------------------------
                           2216 ;	 function gapos_in_gat
                           2217 ;	-----------------------------------------
   062F                    2218 _gapos_in_gat:
   062F C0*00              2219 	push	_bp
   0631 85 81*00           2220 	mov	_bp,sp
   0634 AF 82              2221 	mov	r7,dpl
                    0636   2222 	C$fb_lpc922.c$496$1$1 ==.
                           2223 ;	../fb_lpc922.c:496: ga_position=0xFF; 			// default return Wert 0xFF = nicht gefunden
   0636 7E FF              2224 	mov	r6,#0xFF
                    0638   2225 	C$fb_lpc922.c$497$1$1 ==.
                           2226 ;	../fb_lpc922.c:497: if (eeprom[ADDRTAB]<0xFF){ // && !transparency
   0638 90 1D 16           2227 	mov	dptr,#(_eeprom + 0x0016)
   063B E4                 2228 	clr	a
   063C 93                 2229 	movc	a,@a+dptr
   063D FD                 2230 	mov	r5,a
   063E BD FF 00           2231 	cjne	r5,#0xFF,00121$
   0641                    2232 00121$:
   0641 50 35              2233 	jnc	00107$
                    0643   2234 	C$fb_lpc922.c$498$2$2 ==.
                           2235 ;	../fb_lpc922.c:498: if (eeprom[ADDRTAB]) {
   0643 90 1D 16           2236 	mov	dptr,#(_eeprom + 0x0016)
   0646 E4                 2237 	clr	a
   0647 93                 2238 	movc	a,@a+dptr
   0648 60 2E              2239 	jz	00107$
                    064A   2240 	C$fb_lpc922.c$499$3$3 ==.
                           2241 ;	../fb_lpc922.c:499: for (n=eeprom[ADDRTAB]-1;n;n--) {
   064A 90 1D 16           2242 	mov	dptr,#(_eeprom + 0x0016)
   064D E4                 2243 	clr	a
   064E 93                 2244 	movc	a,@a+dptr
   064F FD                 2245 	mov	r5,a
   0650 1D                 2246 	dec	r5
   0651                    2247 00108$:
   0651 ED                 2248 	mov	a,r5
   0652 60 24              2249 	jz	00107$
                    0654   2250 	C$fb_lpc922.c$500$4$4 ==.
                           2251 ;	../fb_lpc922.c:500: if (gah==eeprom[ADDRTAB+n*2+1] && gal==eeprom[ADDRTAB+n*2+2])
   0654 ED                 2252 	mov	a,r5
   0655 2D                 2253 	add	a,r5
   0656 FC                 2254 	mov	r4,a
   0657 24 17              2255 	add	a,#0x17
   0659 90 1D 00           2256 	mov	dptr,#_eeprom
   065C 93                 2257 	movc	a,@a+dptr
   065D FB                 2258 	mov	r3,a
   065E EF                 2259 	mov	a,r7
   065F B5 03 13           2260 	cjne	a,ar3,00110$
   0662 74 18              2261 	mov	a,#0x18
   0664 2C                 2262 	add	a,r4
   0665 90 1D 00           2263 	mov	dptr,#_eeprom
   0668 93                 2264 	movc	a,@a+dptr
   0669 FC                 2265 	mov	r4,a
   066A E5*00              2266 	mov	a,_bp
   066C 24 FD              2267 	add	a,#0xfd
   066E F8                 2268 	mov	r0,a
   066F E6                 2269 	mov	a,@r0
   0670 B5 04 02           2270 	cjne	a,ar4,00110$
                    0673   2271 	C$fb_lpc922.c$501$4$4 ==.
                           2272 ;	../fb_lpc922.c:501: ga_position=n;
   0673 8D 06              2273 	mov	ar6,r5
   0675                    2274 00110$:
                    0675   2275 	C$fb_lpc922.c$499$3$3 ==.
                           2276 ;	../fb_lpc922.c:499: for (n=eeprom[ADDRTAB]-1;n;n--) {
   0675 1D                 2277 	dec	r5
   0676 80 D9              2278 	sjmp	00108$
   0678                    2279 00107$:
                    0678   2280 	C$fb_lpc922.c$505$1$1 ==.
                           2281 ;	../fb_lpc922.c:505: return (ga_position);
   0678 8E 82              2282 	mov	dpl,r6
   067A D0*00              2283 	pop	_bp
                    067C   2284 	C$fb_lpc922.c$506$1$1 ==.
                    067C   2285 	XG$gapos_in_gat$0$0 ==.
   067C 22                 2286 	ret
                           2287 ;------------------------------------------------------------
                           2288 ;Allocation info for local variables in function 'send_obj_value'
                           2289 ;------------------------------------------------------------
                           2290 ;objno                     Allocated to registers r7 
                           2291 ;success                   Allocated to registers b0 
                           2292 ;------------------------------------------------------------
                    067D   2293 	G$send_obj_value$0$0 ==.
                    067D   2294 	C$fb_lpc922.c$513$1$1 ==.
                           2295 ;	../fb_lpc922.c:513: __bit send_obj_value(unsigned char objno)
                           2296 ;	-----------------------------------------
                           2297 ;	 function send_obj_value
                           2298 ;	-----------------------------------------
   067D                    2299 _send_obj_value:
   067D AF 82              2300 	mov	r7,dpl
                    067F   2301 	C$fb_lpc922.c$515$1$1 ==.
                           2302 ;	../fb_lpc922.c:515: __bit success=0;
   067F C2*00              2303 	clr	b0
                    0681   2304 	C$fb_lpc922.c$517$1$1 ==.
                           2305 ;	../fb_lpc922.c:517: if (objno < 0x40 && (read_objflags(objno) & 0x44) != 0x44)
   0681 BF 40 00           2306 	cjne	r7,#0x40,00112$
   0684                    2307 00112$:
   0684 50 1B              2308 	jnc	00104$
   0686 8F 82              2309 	mov	dpl,r7
   0688 C0 07              2310 	push	ar7
   068A C0*00              2311 	push	bits
   068C 12s09rBB           2312 	lcall	_read_objflags
   068F E5 82              2313 	mov	a,dpl
   0691 D0*00              2314 	pop	bits
   0693 D0 07              2315 	pop	ar7
   0695 54 44              2316 	anl	a,#0x44
   0697 FE                 2317 	mov	r6,a
   0698 BE 44 02           2318 	cjne	r6,#0x44,00114$
   069B 80 04              2319 	sjmp	00104$
   069D                    2320 00114$:
                    069D   2321 	C$fb_lpc922.c$519$2$2 ==.
                           2322 ;	../fb_lpc922.c:519: success=1;
   069D D2*00              2323 	setb	b0
   069F 80 2A              2324 	sjmp	00105$
   06A1                    2325 00104$:
                    06A1   2326 	C$fb_lpc922.c$521$1$1 ==.
                           2327 ;	../fb_lpc922.c:521: else if(tx_nextsend!=((tx_nextwrite+1)&0x07)) {
   06A1 AD*2C              2328 	mov	r5,_tx_nextwrite
   06A3 7E 00              2329 	mov	r6,#0x00
   06A5 0D                 2330 	inc	r5
   06A6 BD 00 01           2331 	cjne	r5,#0x00,00115$
   06A9 0E                 2332 	inc	r6
   06AA                    2333 00115$:
   06AA 53 05 07           2334 	anl	ar5,#0x07
   06AD 7E 00              2335 	mov	r6,#0x00
   06AF AB*2D              2336 	mov	r3,_tx_nextsend
   06B1 7C 00              2337 	mov	r4,#0x00
   06B3 EB                 2338 	mov	a,r3
   06B4 B5 05 06           2339 	cjne	a,ar5,00116$
   06B7 EC                 2340 	mov	a,r4
   06B8 B5 06 02           2341 	cjne	a,ar6,00116$
   06BB 80 0E              2342 	sjmp	00105$
   06BD                    2343 00116$:
                    06BD   2344 	C$fb_lpc922.c$522$2$3 ==.
                           2345 ;	../fb_lpc922.c:522: tx_buffer[tx_nextwrite]=objno;
   06BD E5*2C              2346 	mov	a,_tx_nextwrite
   06BF 24r1E              2347 	add	a,#_tx_buffer
   06C1 F8                 2348 	mov	r0,a
   06C2 A6 07              2349 	mov	@r0,ar7
                    06C4   2350 	C$fb_lpc922.c$523$2$3 ==.
                           2351 ;	../fb_lpc922.c:523: tx_nextwrite++;
   06C4 05*2C              2352 	inc	_tx_nextwrite
                    06C6   2353 	C$fb_lpc922.c$524$2$3 ==.
                           2354 ;	../fb_lpc922.c:524: tx_nextwrite&=0x07;
   06C6 53*2C 07           2355 	anl	_tx_nextwrite,#0x07
                    06C9   2356 	C$fb_lpc922.c$525$2$3 ==.
                           2357 ;	../fb_lpc922.c:525: success=1;
   06C9 D2*00              2358 	setb	b0
   06CB                    2359 00105$:
                    06CB   2360 	C$fb_lpc922.c$528$1$1 ==.
                           2361 ;	../fb_lpc922.c:528: TR1=1;	// statemachine starten falls vorher in state 0 gestoppt
   06CB D2 8E              2362 	setb	_TCON_6
                    06CD   2363 	C$fb_lpc922.c$529$1$1 ==.
                           2364 ;	../fb_lpc922.c:529: return(success);
   06CD A2*00              2365 	mov	c,b0
                    06CF   2366 	C$fb_lpc922.c$530$1$1 ==.
                    06CF   2367 	XG$send_obj_value$0$0 ==.
   06CF 22                 2368 	ret
                           2369 ;------------------------------------------------------------
                           2370 ;Allocation info for local variables in function 'process_tel'
                           2371 ;------------------------------------------------------------
                           2372 ;tpdu                      Allocated to registers r6 
                           2373 ;apdu                      Allocated to stack - _bp +1
                           2374 ;ab                        Allocated to registers r7 
                           2375 ;n                         Allocated to stack - _bp +2
                           2376 ;objno                     Allocated to registers r3 
                           2377 ;objflags                  Allocated to registers r2 
                           2378 ;gapos                     Allocated to registers r7 
                           2379 ;atp                       Allocated to registers r6 
                           2380 ;assmax                    Allocated to registers r5 
                           2381 ;asspos                    Allocated to registers r6 
                           2382 ;sloc0                     Allocated to stack - _bp +11
                           2383 ;sloc1                     Allocated to stack - _bp +12
                           2384 ;sloc2                     Allocated to stack - _bp +3
                           2385 ;------------------------------------------------------------
                    06D0   2386 	G$process_tel$0$0 ==.
                    06D0   2387 	C$fb_lpc922.c$535$1$1 ==.
                           2388 ;	../fb_lpc922.c:535: void process_tel(void)
                           2389 ;	-----------------------------------------
                           2390 ;	 function process_tel
                           2391 ;	-----------------------------------------
   06D0                    2392 _process_tel:
   06D0 C0*00              2393 	push	_bp
   06D2 E5 81              2394 	mov	a,sp
   06D4 F5*00              2395 	mov	_bp,a
   06D6 24 04              2396 	add	a,#0x04
   06D8 F5 81              2397 	mov	sp,a
                    06DA   2398 	C$fb_lpc922.c$540$1$1 ==.
                           2399 ;	../fb_lpc922.c:540: tel_arrived=0;
   06DA C2*06              2400 	clr	_tel_arrived
                    06DC   2401 	C$fb_lpc922.c$541$1$1 ==.
                           2402 ;	../fb_lpc922.c:541: tpdu=telegramm[6]&0xC3;
   06DC AF*0D              2403 	mov	r7,(_telegramm + 0x0006)
   06DE 74 C3              2404 	mov	a,#0xC3
   06E0 5F                 2405 	anl	a,r7
   06E1 FE                 2406 	mov	r6,a
                    06E2   2407 	C$fb_lpc922.c$542$1$1 ==.
                           2408 ;	../fb_lpc922.c:542: apdu=telegramm[7];
   06E2 A8*00              2409 	mov	r0,_bp
   06E4 08                 2410 	inc	r0
   06E5 A6*0E              2411 	mov	@r0,(_telegramm + 0x0007)
                    06E7   2412 	C$fb_lpc922.c$545$1$1 ==.
                           2413 ;	../fb_lpc922.c:545: if(telegramm[3]==0 && telegramm[4]==0) {	// nur wenn wenn Zieladresse = 0
   06E7 E5*0A              2414 	mov	a,(_telegramm + 0x0003)
   06E9 FC                 2415 	mov	r4,a
   06EA 70 49              2416 	jnz	00169$
   06EC E5*0B              2417 	mov	a,(_telegramm + 0x0004)
   06EE 70 45              2418 	jnz	00169$
                    06F0   2419 	C$fb_lpc922.c$546$2$2 ==.
                           2420 ;	../fb_lpc922.c:546: if(status60 & 0x01) {					// und nur im prog mode
   06F0 E5*2E              2421 	mov	a,_status60
   06F2 20 E0 03           2422 	jb	acc.0,00222$
   06F5 02s09rB5           2423 	ljmp	00176$
   06F8                    2424 00222$:
                    06F8   2425 	C$fb_lpc922.c$547$3$3 ==.
                           2426 ;	../fb_lpc922.c:547: if(tpdu==BROADCAST_PDU_SET_PA_REQ && apdu==SET_PHYSADDR_REQUEST) //set_pa();				// 00000000 11000000
   06F8 EE                 2427 	mov	a,r6
   06F9 70 20              2428 	jnz	00105$
   06FB A8*00              2429 	mov	r0,_bp
   06FD 08                 2430 	inc	r0
   06FE B6 C0 1A           2431 	cjne	@r0,#0xC0,00105$
                    0701   2432 	C$fb_lpc922.c$550$4$4 ==.
                           2433 ;	../fb_lpc922.c:550: while(fb_state!=0);		// warten falls noch gesendet wird
   0701                    2434 00101$:
   0701 E5*2A              2435 	mov	a,_fb_state
   0703 70 FC              2436 	jnz	00101$
                    0705   2437 	C$fb_lpc922.c$551$4$4 ==.
                           2438 ;	../fb_lpc922.c:551: EA=0;
   0705 C2 AF              2439 	clr	_IEN0_7
                    0707   2440 	C$fb_lpc922.c$552$4$4 ==.
                           2441 ;	../fb_lpc922.c:552: FMCON=0x00;				// load command, leert das pageregister
   0707 75 E4 00           2442 	mov	_FMCON,#0x00
                    070A   2443 	C$fb_lpc922.c$553$4$4 ==.
                           2444 ;	../fb_lpc922.c:553: FMADRH=EEPROM_ADDR_H;	// 0x1D bei 922;
   070A 75 E7 1D           2445 	mov	_FMADRH,#0x1D
                    070D   2446 	C$fb_lpc922.c$554$4$4 ==.
                           2447 ;	../fb_lpc922.c:554: FMADRL=ADDRTAB+1;
   070D 75 E6 17           2448 	mov	_FMADRL,#0x17
                    0710   2449 	C$fb_lpc922.c$555$4$4 ==.
                           2450 ;	../fb_lpc922.c:555: FMDATA=telegramm[8];
   0710 85*0F E5           2451 	mov	_FMDATA,(_telegramm + 0x0008)
                    0713   2452 	C$fb_lpc922.c$556$4$4 ==.
                           2453 ;	../fb_lpc922.c:556: FMDATA=telegramm[9];	// naechstes Byte, da autoinkrement
   0713 85*10 E5           2454 	mov	_FMDATA,(_telegramm + 0x0009)
                    0716   2455 	C$fb_lpc922.c$557$4$4 ==.
                           2456 ;	../fb_lpc922.c:557: FMCON=0x68;				// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   0716 75 E4 68           2457 	mov	_FMCON,#0x68
                    0719   2458 	C$fb_lpc922.c$558$4$4 ==.
                           2459 ;	../fb_lpc922.c:558: EA=1;
   0719 D2 AF              2460 	setb	_IEN0_7
   071B                    2461 00105$:
                    071B   2462 	C$fb_lpc922.c$565$3$3 ==.
                           2463 ;	../fb_lpc922.c:565: if(tpdu==BROADCAST_PDU_READ_PA && apdu==READ_PHYSADDR_REQUEST) send_obj_value(READ_PHYSADDR_RESPONSE);	// 00000001 00000000
   071B BE 01 02           2464 	cjne	r6,#0x01,00227$
   071E 80 03              2465 	sjmp	00228$
   0720                    2466 00227$:
   0720 02s09rB5           2467 	ljmp	00176$
   0723                    2468 00228$:
   0723 A8*00              2469 	mov	r0,_bp
   0725 08                 2470 	inc	r0
   0726 E6                 2471 	mov	a,@r0
   0727 60 03              2472 	jz	00229$
   0729 02s09rB5           2473 	ljmp	00176$
   072C                    2474 00229$:
   072C 75 82 83           2475 	mov	dpl,#0x83
   072F 12s06r7D           2476 	lcall	_send_obj_value
   0732 02s09rB5           2477 	ljmp	00176$
   0735                    2478 00169$:
                    0735   2479 	C$fb_lpc922.c$570$2$5 ==.
                           2480 ;	../fb_lpc922.c:570: if((telegramm[5]&0x80)==0x00) {	// Destination Adress Flag Bit 7, 0=phys. Adr., 1=Gruppenadr.
   0735 E5*0C              2481 	mov	a,(_telegramm + 0x0005)
   0737 30 E7 03           2482 	jnb	acc.7,00230$
   073A 02s09r00           2483 	ljmp	00166$
   073D                    2484 00230$:
                    073D   2485 	C$fb_lpc922.c$571$3$6 ==.
                           2486 ;	../fb_lpc922.c:571: if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) {	// nur wenn es die eigene phys. Adr. ist
   073D 90 1D 17           2487 	mov	dptr,#(_eeprom + 0x0017)
   0740 E4                 2488 	clr	a
   0741 93                 2489 	movc	a,@a+dptr
   0742 FB                 2490 	mov	r3,a
   0743 EC                 2491 	mov	a,r4
   0744 B5 03 02           2492 	cjne	a,ar3,00231$
   0747 80 03              2493 	sjmp	00232$
   0749                    2494 00231$:
   0749 02s09rB5           2495 	ljmp	00176$
   074C                    2496 00232$:
   074C 90 1D 18           2497 	mov	dptr,#(_eeprom + 0x0018)
   074F E4                 2498 	clr	a
   0750 93                 2499 	movc	a,@a+dptr
   0751 FB                 2500 	mov	r3,a
   0752 B5*0B 02           2501 	cjne	a,(_telegramm + 0x0004),00233$
   0755 80 03              2502 	sjmp	00234$
   0757                    2503 00233$:
   0757 02s09rB5           2504 	ljmp	00176$
   075A                    2505 00234$:
                    075A   2506 	C$fb_lpc922.c$572$4$7 ==.
                           2507 ;	../fb_lpc922.c:572: connected_timeout=0;//wenn ein unicast uns betrifft den timeout ruecksetzen
   075A 75*2F 00           2508 	mov	_connected_timeout,#0x00
                    075D   2509 	C$fb_lpc922.c$575$4$7 ==.
                           2510 ;	../fb_lpc922.c:575: switch (tpdu) {	// transport layer control field
   075D BE 42 02           2511 	cjne	r6,#0x42,00235$
   0760 80 1B              2512 	sjmp	00112$
   0762                    2513 00235$:
   0762 BE 43 03           2514 	cjne	r6,#0x43,00236$
   0765 02s08r94           2515 	ljmp	00130$
   0768                    2516 00236$:
   0768 BE 80 03           2517 	cjne	r6,#0x80,00237$
   076B 02s08rBA           2518 	ljmp	00135$
   076E                    2519 00237$:
   076E BE 81 03           2520 	cjne	r6,#0x81,00238$
   0771 02s08rDC           2521 	ljmp	00138$
   0774                    2522 00238$:
   0774 BE 83 03           2523 	cjne	r6,#0x83,00239$
   0777 02s08rF5           2524 	ljmp	00142$
   077A                    2525 00239$:
   077A 02s09rB5           2526 	ljmp	00176$
                    077D   2527 	C$fb_lpc922.c$577$5$8 ==.
                           2528 ;	../fb_lpc922.c:577: case DATA_PDU_MEMORY_OPERATIONS:
   077D                    2529 00112$:
                    077D   2530 	C$fb_lpc922.c$578$5$8 ==.
                           2531 ;	../fb_lpc922.c:578: if(connected){
   077D 20*0D 03           2532 	jb	_connected,00240$
   0780 02s09rB5           2533 	ljmp	00176$
   0783                    2534 00240$:
                    0783   2535 	C$fb_lpc922.c$579$6$9 ==.
                           2536 ;	../fb_lpc922.c:579: senders_pcount=telegramm[6]&0x3C;
   0783 74 3C              2537 	mov	a,#0x3C
   0785 5F                 2538 	anl	a,r7
   0786 F5*06              2539 	mov	_senders_pcount,a
                    0788   2540 	C$fb_lpc922.c$580$6$9 ==.
                           2541 ;	../fb_lpc922.c:580: apdu &= 0xF0;						// da bei memory operations nur obere 4 Bits aktiv
   0788 A8*00              2542 	mov	r0,_bp
   078A 08                 2543 	inc	r0
   078B E6                 2544 	mov	a,@r0
   078C 54 F0              2545 	anl	a,#0xF0
   078E F6                 2546 	mov	@r0,a
                    078F   2547 	C$fb_lpc922.c$581$6$9 ==.
                           2548 ;	../fb_lpc922.c:581: if(apdu==WRITE_MEMORY_REQUEST) {	// 01pppp10 1000xxxx
   078F A8*00              2549 	mov	r0,_bp
   0791 08                 2550 	inc	r0
   0792 B6 80 02           2551 	cjne	@r0,#0x80,00241$
   0795 80 03              2552 	sjmp	00242$
   0797                    2553 00241$:
   0797 02s08r73           2554 	ljmp	00125$
   079A                    2555 00242$:
                    079A   2556 	C$fb_lpc922.c$582$7$10 ==.
                           2557 ;	../fb_lpc922.c:582: send_obj_value(NCD_ACK);
   079A 75 82 81           2558 	mov	dpl,#0x81
   079D 12s06r7D           2559 	lcall	_send_obj_value
                    07A0   2560 	C$fb_lpc922.c$585$8$11 ==.
                           2561 ;	../fb_lpc922.c:585: ab=telegramm[7]&0x0F;		// Anzahl Bytes
   07A0 74 0F              2562 	mov	a,#0x0F
   07A2 55*0E              2563 	anl	a,(_telegramm + 0x0007)
   07A4 FF                 2564 	mov	r7,a
                    07A5   2565 	C$fb_lpc922.c$587$8$11 ==.
                           2566 ;	../fb_lpc922.c:587: while(fb_state!=0);					// warten falls noch gesendet wird
   07A5                    2567 00113$:
   07A5 E5*2A              2568 	mov	a,_fb_state
   07A7 70 FC              2569 	jnz	00113$
                    07A9   2570 	C$fb_lpc922.c$589$8$11 ==.
                           2571 ;	../fb_lpc922.c:589: EA=0;
   07A9 C2 AF              2572 	clr	_IEN0_7
                    07AB   2573 	C$fb_lpc922.c$590$8$11 ==.
                           2574 ;	../fb_lpc922.c:590: START_WRITECYCLE;					// load command, leert das pageregister
   07AB 75 E4 00           2575 	mov	_FMCON,#0x00
                    07AE   2576 	C$fb_lpc922.c$591$9$12 ==.
                           2577 ;	../fb_lpc922.c:591: for(n=0;n<ab;n++) {
   07AE AA*0F              2578 	mov	r2,(_telegramm + 0x0008)
   07B0 74 01              2579 	mov	a,#0x01
   07B2 5A                 2580 	anl	a,r2
   07B3 24 1C              2581 	add	a,#0x1C
   07B5 FC                 2582 	mov	r4,a
   07B6 AE*10              2583 	mov	r6,(_telegramm + 0x0009)
   07B8 A8*00              2584 	mov	r0,_bp
   07BA 08                 2585 	inc	r0
   07BB 08                 2586 	inc	r0
   07BC 76 00              2587 	mov	@r0,#0x00
   07BE                    2588 00172$:
   07BE A8*00              2589 	mov	r0,_bp
   07C0 08                 2590 	inc	r0
   07C1 08                 2591 	inc	r0
   07C2 C3                 2592 	clr	c
   07C3 E6                 2593 	mov	a,@r0
   07C4 9F                 2594 	subb	a,r7
   07C5 40 03              2595 	jc	00244$
   07C7 02s08r6E           2596 	ljmp	00175$
   07CA                    2597 00244$:
                    07CA   2598 	C$fb_lpc922.c$592$9$12 ==.
                           2599 ;	../fb_lpc922.c:592: if(telegramm[8]==0)
   07CA EA                 2600 	mov	a,r2
   07CB 70 3C              2601 	jnz	00119$
                    07CD   2602 	C$fb_lpc922.c$594$1$1 ==.
                           2603 ;	../fb_lpc922.c:594: if((telegramm[9]+n)==0x60) status60=telegramm[10+n];
   07CD C0 02              2604 	push	ar2
   07CF E5*00              2605 	mov	a,_bp
   07D1 24 03              2606 	add	a,#0x03
   07D3 F8                 2607 	mov	r0,a
   07D4 A6 06              2608 	mov	@r0,ar6
   07D6 08                 2609 	inc	r0
   07D7 76 00              2610 	mov	@r0,#0x00
   07D9 A8*00              2611 	mov	r0,_bp
   07DB 08                 2612 	inc	r0
   07DC 08                 2613 	inc	r0
   07DD 86 03              2614 	mov	ar3,@r0
   07DF 7D 00              2615 	mov	r5,#0x00
   07E1 E5*00              2616 	mov	a,_bp
   07E3 24 03              2617 	add	a,#0x03
   07E5 F8                 2618 	mov	r0,a
   07E6 EB                 2619 	mov	a,r3
   07E7 26                 2620 	add	a,@r0
   07E8 FB                 2621 	mov	r3,a
   07E9 ED                 2622 	mov	a,r5
   07EA 08                 2623 	inc	r0
   07EB 36                 2624 	addc	a,@r0
   07EC FD                 2625 	mov	r5,a
   07ED BB 60 05           2626 	cjne	r3,#0x60,00246$
   07F0 BD 00 02           2627 	cjne	r5,#0x00,00246$
   07F3 80 04              2628 	sjmp	00247$
   07F5                    2629 00246$:
   07F5 D0 02              2630 	pop	ar2
   07F7 80 26              2631 	sjmp	00120$
   07F9                    2632 00247$:
   07F9 D0 02              2633 	pop	ar2
   07FB A8*00              2634 	mov	r0,_bp
   07FD 08                 2635 	inc	r0
   07FE 08                 2636 	inc	r0
   07FF 74 0A              2637 	mov	a,#0x0A
   0801 26                 2638 	add	a,@r0
   0802 24r07              2639 	add	a,#_telegramm
   0804 F9                 2640 	mov	r1,a
   0805 87*2E              2641 	mov	_status60,@r1
   0807 80 16              2642 	sjmp	00120$
   0809                    2643 00119$:
                    0809   2644 	C$fb_lpc922.c$605$10$14 ==.
                           2645 ;	../fb_lpc922.c:605: WRITE_BYTE(telegramm[8],telegramm[9]+n,telegramm[n+10]);
   0809 8C E7              2646 	mov	_FMADRH,r4
   080B A8*00              2647 	mov	r0,_bp
   080D 08                 2648 	inc	r0
   080E 08                 2649 	inc	r0
   080F E6                 2650 	mov	a,@r0
   0810 2E                 2651 	add	a,r6
   0811 F5 E6              2652 	mov	_FMADRL,a
   0813 A8*00              2653 	mov	r0,_bp
   0815 08                 2654 	inc	r0
   0816 08                 2655 	inc	r0
   0817 74 0A              2656 	mov	a,#0x0A
   0819 26                 2657 	add	a,@r0
   081A 24r07              2658 	add	a,#_telegramm
   081C F9                 2659 	mov	r1,a
   081D 87 E5              2660 	mov	_FMDATA,@r1
   081F                    2661 00120$:
                    081F   2662 	C$fb_lpc922.c$607$9$12 ==.
                           2663 ;	../fb_lpc922.c:607: if ((((telegramm[9]+n)&0x3F)==0x3F) && n!=(ab-1)) {		// Ende des 64-Byte Pageregisters, also zwischendurch flashen
   081F 8E 03              2664 	mov	ar3,r6
   0821 7D 00              2665 	mov	r5,#0x00
   0823 A8*00              2666 	mov	r0,_bp
   0825 08                 2667 	inc	r0
   0826 08                 2668 	inc	r0
   0827 E5*00              2669 	mov	a,_bp
   0829 24 03              2670 	add	a,#0x03
   082B F9                 2671 	mov	r1,a
   082C E6                 2672 	mov	a,@r0
   082D F7                 2673 	mov	@r1,a
   082E 09                 2674 	inc	r1
   082F 77 00              2675 	mov	@r1,#0x00
   0831 E5*00              2676 	mov	a,_bp
   0833 24 03              2677 	add	a,#0x03
   0835 F8                 2678 	mov	r0,a
   0836 E6                 2679 	mov	a,@r0
   0837 2B                 2680 	add	a,r3
   0838 FB                 2681 	mov	r3,a
   0839 08                 2682 	inc	r0
   083A E6                 2683 	mov	a,@r0
   083B 3D                 2684 	addc	a,r5
   083C 53 03 3F           2685 	anl	ar3,#0x3F
   083F 7D 00              2686 	mov	r5,#0x00
   0841 BB 3F 22           2687 	cjne	r3,#0x3F,00174$
   0844 BD 00 1F           2688 	cjne	r5,#0x00,00174$
   0847 8F 03              2689 	mov	ar3,r7
   0849 7D 00              2690 	mov	r5,#0x00
   084B 1B                 2691 	dec	r3
   084C BB FF 01           2692 	cjne	r3,#0xFF,00250$
   084F 1D                 2693 	dec	r5
   0850                    2694 00250$:
   0850 E5*00              2695 	mov	a,_bp
   0852 24 03              2696 	add	a,#0x03
   0854 F8                 2697 	mov	r0,a
   0855 E6                 2698 	mov	a,@r0
   0856 B5 03 07           2699 	cjne	a,ar3,00251$
   0859 08                 2700 	inc	r0
   085A E6                 2701 	mov	a,@r0
   085B B5 05 02           2702 	cjne	a,ar5,00251$
   085E 80 06              2703 	sjmp	00174$
   0860                    2704 00251$:
                    0860   2705 	C$fb_lpc922.c$608$10$15 ==.
                           2706 ;	../fb_lpc922.c:608: STOP_WRITECYCLE;			// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   0860 75 E4 68           2707 	mov	_FMCON,#0x68
                    0863   2708 	C$fb_lpc922.c$609$10$15 ==.
                           2709 ;	../fb_lpc922.c:609: START_WRITECYCLE;		// load command, leert das pageregister
   0863 75 E4 00           2710 	mov	_FMCON,#0x00
   0866                    2711 00174$:
                    0866   2712 	C$fb_lpc922.c$591$8$11 ==.
                           2713 ;	../fb_lpc922.c:591: for(n=0;n<ab;n++) {
   0866 A8*00              2714 	mov	r0,_bp
   0868 08                 2715 	inc	r0
   0869 08                 2716 	inc	r0
   086A 06                 2717 	inc	@r0
   086B 02s07rBE           2718 	ljmp	00172$
   086E                    2719 00175$:
                    086E   2720 	C$fb_lpc922.c$612$8$11 ==.
                           2721 ;	../fb_lpc922.c:612: STOP_WRITECYCLE;					// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   086E 75 E4 68           2722 	mov	_FMCON,#0x68
                    0871   2723 	C$fb_lpc922.c$613$8$11 ==.
                           2724 ;	../fb_lpc922.c:613: EA=1;
   0871 D2 AF              2725 	setb	_IEN0_7
   0873                    2726 00125$:
                    0873   2727 	C$fb_lpc922.c$616$6$9 ==.
                           2728 ;	../fb_lpc922.c:616: if(apdu==READ_MEMORY_REQUEST) {		// 01pppp10 0000xxxx
   0873 A8*00              2729 	mov	r0,_bp
   0875 08                 2730 	inc	r0
   0876 E6                 2731 	mov	a,@r0
   0877 60 03              2732 	jz	00252$
   0879 02s09rB5           2733 	ljmp	00176$
   087C                    2734 00252$:
                    087C   2735 	C$fb_lpc922.c$617$7$16 ==.
                           2736 ;	../fb_lpc922.c:617: mem_length=telegramm[7];		// Anzahl Bytes fuer spaeteres(!) memory Auslesen
   087C 85*0E*03           2737 	mov	_mem_length,(_telegramm + 0x0007)
                    087F   2738 	C$fb_lpc922.c$618$7$16 ==.
                           2739 ;	../fb_lpc922.c:618: mem_adrh = telegramm[8];		// Adresse
   087F 85*0F*04           2740 	mov	_mem_adrh,(_telegramm + 0x0008)
                    0882   2741 	C$fb_lpc922.c$619$7$16 ==.
                           2742 ;	../fb_lpc922.c:619: mem_adrl = telegramm[9];
   0882 85*10*05           2743 	mov	_mem_adrl,(_telegramm + 0x0009)
                    0885   2744 	C$fb_lpc922.c$620$7$16 ==.
                           2745 ;	../fb_lpc922.c:620: send_obj_value(NCD_ACK);
   0885 75 82 81           2746 	mov	dpl,#0x81
   0888 12s06r7D           2747 	lcall	_send_obj_value
                    088B   2748 	C$fb_lpc922.c$621$7$16 ==.
                           2749 ;	../fb_lpc922.c:621: send_obj_value(READ_MEMORY_RESPONSE);
   088B 75 82 84           2750 	mov	dpl,#0x84
   088E 12s06r7D           2751 	lcall	_send_obj_value
                    0891   2752 	C$fb_lpc922.c$624$5$8 ==.
                           2753 ;	../fb_lpc922.c:624: break;
   0891 02s09rB5           2754 	ljmp	00176$
                    0894   2755 	C$fb_lpc922.c$626$5$8 ==.
                           2756 ;	../fb_lpc922.c:626: case DATA_PDU_MISC_OPERATIONS:
   0894                    2757 00130$:
                    0894   2758 	C$fb_lpc922.c$627$5$8 ==.
                           2759 ;	../fb_lpc922.c:627: senders_pcount=telegramm[6]&0x3C;
   0894 74 3C              2760 	mov	a,#0x3C
   0896 5F                 2761 	anl	a,r7
   0897 F5*06              2762 	mov	_senders_pcount,a
                    0899   2763 	C$fb_lpc922.c$628$5$8 ==.
                           2764 ;	../fb_lpc922.c:628: if(apdu==RESTART_REQUEST) {		// 01pppp11 10000000
   0899 A8*00              2765 	mov	r0,_bp
   089B 08                 2766 	inc	r0
   089C B6 80 03           2767 	cjne	@r0,#0x80,00132$
                    089F   2768 	C$fb_lpc922.c$629$6$17 ==.
                           2769 ;	../fb_lpc922.c:629: AUXR1|=0x08;				// Software Reset
   089F 43 A2 08           2770 	orl	_AUXR1,#0x08
   08A2                    2771 00132$:
                    08A2   2772 	C$fb_lpc922.c$631$5$8 ==.
                           2773 ;	../fb_lpc922.c:631: if(apdu==READ_MASK_VERSION_REQUEST) {		// 01pppp11 00000000
   08A2 A8*00              2774 	mov	r0,_bp
   08A4 08                 2775 	inc	r0
   08A5 E6                 2776 	mov	a,@r0
   08A6 60 03              2777 	jz	00255$
   08A8 02s09rB5           2778 	ljmp	00176$
   08AB                    2779 00255$:
                    08AB   2780 	C$fb_lpc922.c$632$6$18 ==.
                           2781 ;	../fb_lpc922.c:632: send_obj_value(NCD_ACK);
   08AB 75 82 81           2782 	mov	dpl,#0x81
   08AE 12s06r7D           2783 	lcall	_send_obj_value
                    08B1   2784 	C$fb_lpc922.c$633$6$18 ==.
                           2785 ;	../fb_lpc922.c:633: send_obj_value(READ_MASK_VERSION_RESPONSE);
   08B1 75 82 82           2786 	mov	dpl,#0x82
   08B4 12s06r7D           2787 	lcall	_send_obj_value
                    08B7   2788 	C$fb_lpc922.c$635$5$8 ==.
                           2789 ;	../fb_lpc922.c:635: break;
   08B7 02s09rB5           2790 	ljmp	00176$
                    08BA   2791 	C$fb_lpc922.c$637$5$8 ==.
                           2792 ;	../fb_lpc922.c:637: case CONNECT_PDU:	// 10000000 xxxxxxxx
   08BA                    2793 00135$:
                    08BA   2794 	C$fb_lpc922.c$638$5$8 ==.
                           2795 ;	../fb_lpc922.c:638: if(!connected) {				// wenn bereits verbunden: ignorieren
   08BA 30*0D 03           2796 	jnb	_connected,00256$
   08BD 02s09rB5           2797 	ljmp	00176$
   08C0                    2798 00256$:
                    08C0   2799 	C$fb_lpc922.c$639$6$19 ==.
                           2800 ;	../fb_lpc922.c:639: connected=1;
   08C0 D2*0D              2801 	setb	_connected
                    08C2   2802 	C$fb_lpc922.c$640$6$19 ==.
                           2803 ;	../fb_lpc922.c:640: conh=telegramm[1];			// phys. Adresse des Verbindungspartners
   08C2 85*08*00           2804 	mov	_conh,(_telegramm + 0x0001)
                    08C5   2805 	C$fb_lpc922.c$641$6$19 ==.
                           2806 ;	../fb_lpc922.c:641: conl=telegramm[2];
   08C5 85*09*01           2807 	mov	_conl,(_telegramm + 0x0002)
                    08C8   2808 	C$fb_lpc922.c$642$6$19 ==.
                           2809 ;	../fb_lpc922.c:642: pcount=0;					// Paketzaehler zuruecksetzen
   08C8 75*02 00           2810 	mov	_pcount,#0x00
                    08CB   2811 	C$fb_lpc922.c$643$6$19 ==.
                           2812 ;	../fb_lpc922.c:643: inc_pcount=0;
   08CB C2*0E              2813 	clr	_inc_pcount
                    08CD   2814 	C$fb_lpc922.c$644$6$19 ==.
                           2815 ;	../fb_lpc922.c:644: RTCCON=0x60;	//RTC stoppen
   08CD 75 D1 60           2816 	mov	_RTCCON,#0x60
                    08D0   2817 	C$fb_lpc922.c$645$6$19 ==.
                           2818 ;	../fb_lpc922.c:645: RTCH=0x0B;      // reload Real Time Clock, 52ms
   08D0 75 D2 0B           2819 	mov	_RTCH,#0x0B
                    08D3   2820 	C$fb_lpc922.c$646$6$19 ==.
                           2821 ;	../fb_lpc922.c:646: RTCL=0xB3;
   08D3 75 D3 B3           2822 	mov	_RTCL,#0xB3
                    08D6   2823 	C$fb_lpc922.c$647$6$19 ==.
                           2824 ;	../fb_lpc922.c:647: RTCCON=0x61;	// RTC starten
   08D6 75 D1 61           2825 	mov	_RTCCON,#0x61
                    08D9   2826 	C$fb_lpc922.c$650$5$8 ==.
                           2827 ;	../fb_lpc922.c:650: break;
   08D9 02s09rB5           2828 	ljmp	00176$
                    08DC   2829 	C$fb_lpc922.c$652$5$8 ==.
                           2830 ;	../fb_lpc922.c:652: case DISCONNECT_PDU:	// 10000001 xxxxxxxx
   08DC                    2831 00138$:
                    08DC   2832 	C$fb_lpc922.c$653$5$8 ==.
                           2833 ;	../fb_lpc922.c:653: if(conh==telegramm[1] && conl==telegramm[2] )	{	// nur abbauen, wenn verbunden und Anforderung vom Verbindungspartner, kein ACK senden
   08DC E5*08              2834 	mov	a,(_telegramm + 0x0001)
   08DE B5*00 02           2835 	cjne	a,_conh,00257$
   08E1 80 03              2836 	sjmp	00258$
   08E3                    2837 00257$:
   08E3 02s09rB5           2838 	ljmp	00176$
   08E6                    2839 00258$:
   08E6 E5*09              2840 	mov	a,(_telegramm + 0x0002)
   08E8 B5*01 02           2841 	cjne	a,_conl,00259$
   08EB 80 03              2842 	sjmp	00260$
   08ED                    2843 00259$:
   08ED 02s09rB5           2844 	ljmp	00176$
   08F0                    2845 00260$:
                    08F0   2846 	C$fb_lpc922.c$654$6$20 ==.
                           2847 ;	../fb_lpc922.c:654: connected=0;// warum: && connected ???
   08F0 C2*0D              2848 	clr	_connected
                    08F2   2849 	C$fb_lpc922.c$656$5$8 ==.
                           2850 ;	../fb_lpc922.c:656: break;
   08F2 02s09rB5           2851 	ljmp	00176$
                    08F5   2852 	C$fb_lpc922.c$658$5$8 ==.
                           2853 ;	../fb_lpc922.c:658: case NACK_PDU:	// 11pppp11 xxxxxxxx
   08F5                    2854 00142$:
                    08F5   2855 	C$fb_lpc922.c$659$5$8 ==.
                           2856 ;	../fb_lpc922.c:659: send_obj_value(T_DISCONNECT);
   08F5 75 82 85           2857 	mov	dpl,#0x85
   08F8 12s06r7D           2858 	lcall	_send_obj_value
                    08FB   2859 	C$fb_lpc922.c$660$5$8 ==.
                           2860 ;	../fb_lpc922.c:660: connected=0;//connected_timeout=111; spartipp 5 Byte wenn send.. weg kommt.
   08FB C2*0D              2861 	clr	_connected
                    08FD   2862 	C$fb_lpc922.c$662$1$5 ==.
                           2863 ;	../fb_lpc922.c:662: }
   08FD 02s09rB5           2864 	ljmp	00176$
   0900                    2865 00166$:
                    0900   2866 	C$fb_lpc922.c$667$2$5 ==.
                           2867 ;	../fb_lpc922.c:667: else if(tpdu==GROUP_PDU){
   0900 EE                 2868 	mov	a,r6
   0901 60 03              2869 	jz	00261$
   0903 02s09rB5           2870 	ljmp	00176$
   0906                    2871 00261$:
                    0906   2872 	C$fb_lpc922.c$672$3$21 ==.
                           2873 ;	../fb_lpc922.c:672: gapos = gapos_in_gat(telegramm[3], telegramm[4]);
   0906 C0*0B              2874 	push	(_telegramm + 0x0004)
   0908 8C 82              2875 	mov	dpl,r4
   090A 12s06r2F           2876 	lcall	_gapos_in_gat
   090D AF 82              2877 	mov	r7,dpl
   090F 15 81              2878 	dec	sp
                    0911   2879 	C$fb_lpc922.c$674$3$21 ==.
                           2880 ;	../fb_lpc922.c:674: if (gapos != 0xFF)
   0911 BF FF 03           2881 	cjne	r7,#0xFF,00262$
   0914 02s09rB5           2882 	ljmp	00176$
   0917                    2883 00262$:
                    0917   2884 	C$fb_lpc922.c$676$4$22 ==.
                           2885 ;	../fb_lpc922.c:676: atp = eeprom[ASSOCTABPTR];  // Association Table Pointer
   0917 90 1D 11           2886 	mov	dptr,#(_eeprom + 0x0011)
   091A E4                 2887 	clr	a
   091B 93                 2888 	movc	a,@a+dptr
                    091C   2889 	C$fb_lpc922.c$677$4$22 ==.
                           2890 ;	../fb_lpc922.c:677: assmax = atp + eeprom[atp] * 2;	// Erster Eintrag = Anzahl Eintraege
   091C FE                 2891 	mov	r6,a
   091D F5 82              2892 	mov	dpl,a
   091F 75 83 1D           2893 	mov	dph,#(_eeprom >> 8)
   0922 E4                 2894 	clr	a
   0923 93                 2895 	movc	a,@a+dptr
   0924 25 E0              2896 	add	a,acc
   0926 2E                 2897 	add	a,r6
   0927 FD                 2898 	mov	r5,a
                    0928   2899 	C$fb_lpc922.c$681$4$22 ==.
                           2900 ;	../fb_lpc922.c:681: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   0928 0E                 2901 	inc	r6
   0929 A8*00              2902 	mov	r0,_bp
   092B 08                 2903 	inc	r0
   092C 74 C0              2904 	mov	a,#0xC0
   092E 56                 2905 	anl	a,@r0
   092F FC                 2906 	mov	r4,a
   0930 E4                 2907 	clr	a
   0931 BC 80 01           2908 	cjne	r4,#0x80,00263$
   0934 04                 2909 	inc	a
   0935                    2910 00263$:
   0935 FC                 2911 	mov	r4,a
   0936                    2912 00157$:
   0936 C3                 2913 	clr	c
   0937 EE                 2914 	mov	a,r6
   0938 9D                 2915 	subb	a,r5
   0939 40 03              2916 	jc	00265$
   093B 02s09rB5           2917 	ljmp	00176$
   093E                    2918 00265$:
                    093E   2919 	C$fb_lpc922.c$685$5$23 ==.
                           2920 ;	../fb_lpc922.c:685: if (gapos == eeprom[asspos])
   093E 8E 82              2921 	mov	dpl,r6
   0940 75 83 1D           2922 	mov	dph,#(_eeprom >> 8)
   0943 E4                 2923 	clr	a
   0944 93                 2924 	movc	a,@a+dptr
   0945 FB                 2925 	mov	r3,a
   0946 EF                 2926 	mov	a,r7
   0947 B5 03 66           2927 	cjne	a,ar3,00159$
                    094A   2928 	C$fb_lpc922.c$687$6$24 ==.
                           2929 ;	../fb_lpc922.c:687: objno = eeprom[asspos + 1];	     // Objektnummer
   094A EE                 2930 	mov	a,r6
   094B 04                 2931 	inc	a
   094C 90 1D 00           2932 	mov	dptr,#_eeprom
   094F 93                 2933 	movc	a,@a+dptr
                    0950   2934 	C$fb_lpc922.c$688$6$24 ==.
                           2935 ;	../fb_lpc922.c:688: objflags = read_objflags(objno); // Objekt Flags lesen
   0950 FB                 2936 	mov	r3,a
   0951 F5 82              2937 	mov	dpl,a
   0953 C0 07              2938 	push	ar7
   0955 C0 06              2939 	push	ar6
   0957 C0 05              2940 	push	ar5
   0959 C0 04              2941 	push	ar4
   095B C0 03              2942 	push	ar3
   095D 12s09rBB           2943 	lcall	_read_objflags
   0960 AA 82              2944 	mov	r2,dpl
   0962 D0 03              2945 	pop	ar3
   0964 D0 04              2946 	pop	ar4
   0966 D0 05              2947 	pop	ar5
   0968 D0 06              2948 	pop	ar6
   096A D0 07              2949 	pop	ar7
                    096C   2950 	C$fb_lpc922.c$691$6$24 ==.
                           2951 ;	../fb_lpc922.c:691: if((apdu&0xC0)==WRITE_GROUP)
   096C EC                 2952 	mov	a,r4
   096D 60 2E              2953 	jz	00150$
                    096F   2954 	C$fb_lpc922.c$696$1$1 ==.
                           2955 ;	../fb_lpc922.c:696: if ((objflags & 0x14) == 0x14)
   096F C0 04              2956 	push	ar4
   0971 74 14              2957 	mov	a,#0x14
   0973 5A                 2958 	anl	a,r2
   0974 FC                 2959 	mov	r4,a
   0975 BC 14 02           2960 	cjne	r4,#0x14,00269$
   0978 80 04              2961 	sjmp	00270$
   097A                    2962 00269$:
   097A D0 04              2963 	pop	ar4
   097C 80 1F              2964 	sjmp	00150$
   097E                    2965 00270$:
   097E D0 04              2966 	pop	ar4
                    0980   2967 	C$fb_lpc922.c$697$7$25 ==.
                           2968 ;	../fb_lpc922.c:697: write_value_req(objno);
   0980 8B 82              2969 	mov	dpl,r3
   0982 C0 07              2970 	push	ar7
   0984 C0 06              2971 	push	ar6
   0986 C0 05              2972 	push	ar5
   0988 C0 04              2973 	push	ar4
   098A C0 03              2974 	push	ar3
   098C C0 02              2975 	push	ar2
   098E 12s00r00           2976 	lcall	_write_value_req
   0991 D0 02              2977 	pop	ar2
   0993 D0 03              2978 	pop	ar3
   0995 D0 04              2979 	pop	ar4
   0997 D0 05              2980 	pop	ar5
   0999 D0 06              2981 	pop	ar6
   099B D0 07              2982 	pop	ar7
   099D                    2983 00150$:
                    099D   2984 	C$fb_lpc922.c$699$6$24 ==.
                           2985 ;	../fb_lpc922.c:699: if(apdu==READ_GROUP_REQUEST)
   099D A8*00              2986 	mov	r0,_bp
   099F 08                 2987 	inc	r0
   09A0 E6                 2988 	mov	a,@r0
   09A1 70 0D              2989 	jnz	00159$
                    09A3   2990 	C$fb_lpc922.c$701$7$26 ==.
                           2991 ;	../fb_lpc922.c:701: if ((objflags & 0x0C) == 0x0C)
   09A3 53 02 0C           2992 	anl	ar2,#0x0C
   09A6 BA 0C 0C           2993 	cjne	r2,#0x0C,00176$
                    09A9   2994 	C$fb_lpc922.c$702$7$26 ==.
                           2995 ;	../fb_lpc922.c:702: read_value_req(objno);	// Objektwert lesen und read_value_response senden	00000000 00000000
   09A9 8B 82              2996 	mov	dpl,r3
   09AB 12s00r00           2997 	lcall	_read_value_req
                    09AE   2998 	C$fb_lpc922.c$703$7$26 ==.
                           2999 ;	../fb_lpc922.c:703: break;
   09AE 80 05              3000 	sjmp	00176$
   09B0                    3001 00159$:
                    09B0   3002 	C$fb_lpc922.c$681$4$22 ==.
                           3003 ;	../fb_lpc922.c:681: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   09B0 0E                 3004 	inc	r6
   09B1 0E                 3005 	inc	r6
   09B2 02s09r36           3006 	ljmp	00157$
   09B5                    3007 00176$:
   09B5 85*00 81           3008 	mov	sp,_bp
   09B8 D0*00              3009 	pop	_bp
                    09BA   3010 	C$fb_lpc922.c$710$1$1 ==.
                    09BA   3011 	XG$process_tel$0$0 ==.
   09BA 22                 3012 	ret
                           3013 ;------------------------------------------------------------
                           3014 ;Allocation info for local variables in function 'read_objflags'
                           3015 ;------------------------------------------------------------
                           3016 ;objno                     Allocated to registers r7 
                           3017 ;------------------------------------------------------------
                    09BB   3018 	G$read_objflags$0$0 ==.
                    09BB   3019 	C$fb_lpc922.c$759$1$1 ==.
                           3020 ;	../fb_lpc922.c:759: unsigned char read_objflags(unsigned char objno)
                           3021 ;	-----------------------------------------
                           3022 ;	 function read_objflags
                           3023 ;	-----------------------------------------
   09BB                    3024 _read_objflags:
   09BB AF 82              3025 	mov	r7,dpl
                    09BD   3026 	C$fb_lpc922.c$762$1$1 ==.
                           3027 ;	../fb_lpc922.c:762: return(eeprom[eeprom[COMMSTABPTR]+3+objno+objno+objno]);
   09BD 90 1D 12           3028 	mov	dptr,#(_eeprom + 0x0012)
   09C0 E4                 3029 	clr	a
   09C1 93                 3030 	movc	a,@a+dptr
   09C2 FE                 3031 	mov	r6,a
   09C3 0E                 3032 	inc	r6
   09C4 0E                 3033 	inc	r6
   09C5 0E                 3034 	inc	r6
   09C6 EF                 3035 	mov	a,r7
   09C7 2E                 3036 	add	a,r6
   09C8 2F                 3037 	add	a,r7
   09C9 2F                 3038 	add	a,r7
   09CA 90 1D 00           3039 	mov	dptr,#_eeprom
   09CD 93                 3040 	movc	a,@a+dptr
                    09CE   3041 	C$fb_lpc922.c$763$1$1 ==.
                    09CE   3042 	XG$read_objflags$0$0 ==.
   09CE F5 82              3043 	mov	dpl,a
   09D0 22                 3044 	ret
                           3045 ;------------------------------------------------------------
                           3046 ;Allocation info for local variables in function 'restart_hw'
                           3047 ;------------------------------------------------------------
                    09D1   3048 	G$restart_hw$0$0 ==.
                    09D1   3049 	C$fb_lpc922.c$798$1$1 ==.
                           3050 ;	../fb_lpc922.c:798: void restart_hw(void)
                           3051 ;	-----------------------------------------
                           3052 ;	 function restart_hw
                           3053 ;	-----------------------------------------
   09D1                    3054 _restart_hw:
                    09D1   3055 	C$fb_lpc922.c$800$1$1 ==.
                           3056 ;	../fb_lpc922.c:800: DIVM=0;			// Taktferquenz nicht teilen -> volles Tempo
   09D1 75 95 00           3057 	mov	_DIVM,#0x00
                    09D4   3058 	C$fb_lpc922.c$802$1$1 ==.
                           3059 ;	../fb_lpc922.c:802: P1M1=0x14;		// Port 1 auf quasi-bidirektional,
   09D4 75 91 14           3060 	mov	_P1M1,#0x14
                    09D7   3061 	C$fb_lpc922.c$803$1$1 ==.
                           3062 ;	../fb_lpc922.c:803: P1M2=0x4C;		// ausser P1.2(T0 als PWM Ausgang)=open-drain,
   09D7 75 92 4C           3063 	mov	_P1M2,#0x4C
                    09DA   3064 	C$fb_lpc922.c$807$1$1 ==.
                           3065 ;	../fb_lpc922.c:807: FBOUTC=0;		// Bus-Ausgang auf low
   09DA C2 96              3066 	clr	_P1_6
                    09DC   3067 	C$fb_lpc922.c$809$1$1 ==.
                           3068 ;	../fb_lpc922.c:809: TMOD=0x21;		// Timer 0 als 16-Bit Timer, Timer 1 als 8 Bit autoreload
   09DC 75 89 21           3069 	mov	_TMOD,#0x21
                    09DF   3070 	C$fb_lpc922.c$810$1$1 ==.
                           3071 ;	../fb_lpc922.c:810: TAMOD=0x00;
   09DF 75 8F 00           3072 	mov	_TAMOD,#0x00
                    09E2   3073 	C$fb_lpc922.c$811$1$1 ==.
                           3074 ;	../fb_lpc922.c:811: TR0=0;			// Timer 0 (zur Verwendung in app) zunaechst stoppen
   09E2 C2 8C              3075 	clr	_TCON_4
                    09E4   3076 	C$fb_lpc922.c$812$1$1 ==.
                           3077 ;	../fb_lpc922.c:812: TR1=0;			// Timer 1 (Empfangs-Timer, nicht in app verwenden!) zunaechst stoppen
   09E4 C2 8E              3078 	clr	_TCON_6
                    09E6   3079 	C$fb_lpc922.c$813$1$1 ==.
                           3080 ;	../fb_lpc922.c:813: TH1=128;		// Timer 1 auf 104us/3
   09E6 75 8D 80           3081 	mov	_TH1,#0x80
                    09E9   3082 	C$fb_lpc922.c$814$1$1 ==.
                           3083 ;	../fb_lpc922.c:814: TL1=128;
   09E9 75 8B 80           3084 	mov	_TL1,#0x80
                    09EC   3085 	C$fb_lpc922.c$815$1$1 ==.
                           3086 ;	../fb_lpc922.c:815: TF1=0;
   09EC C2 8F              3087 	clr	_TCON_7
                    09EE   3088 	C$fb_lpc922.c$822$1$1 ==.
                           3089 ;	../fb_lpc922.c:822: interrupted=0;	// wird durch die interrupt-routine auf 1 gesetzt
   09EE C2*01              3090 	clr	_interrupted
                    09F0   3091 	C$fb_lpc922.c$823$1$1 ==.
                           3092 ;	../fb_lpc922.c:823: IEN0=0x80;// mit 0x80 sind die unten auskommentierten erschlagen.
   09F0 75 A8 80           3093 	mov	_IEN0,#0x80
                    09F3   3094 	C$fb_lpc922.c$824$1$1 ==.
                           3095 ;	../fb_lpc922.c:824: IEN1=0x00;
   09F3 75 E8 00           3096 	mov	_IEN1,#0x00
                    09F6   3097 	C$fb_lpc922.c$831$1$1 ==.
                           3098 ;	../fb_lpc922.c:831: IP0=0x04;		// hÃ¶chste PrioritÃ¤t fuer ext1
   09F6 75 B8 04           3099 	mov	_IP0,#0x04
                    09F9   3100 	C$fb_lpc922.c$832$1$1 ==.
                           3101 ;	../fb_lpc922.c:832: IP0H=0x0C;
   09F9 75 B7 0C           3102 	mov	_IP0H,#0x0C
                    09FC   3103 	C$fb_lpc922.c$833$1$1 ==.
                           3104 ;	../fb_lpc922.c:833: IT1=1;			// Interrupt 1 flankengetriggert=1
   09FC D2 8A              3105 	setb	_TCON_2
                    09FE   3106 	C$fb_lpc922.c$835$1$1 ==.
                           3107 ;	../fb_lpc922.c:835: status60=0x2E;	// Status-Byte (steht normal im userram an 0x60)
   09FE 75*2E 2E           3108 	mov	_status60,#0x2E
                    0A01   3109 	C$fb_lpc922.c$837$1$1 ==.
                           3110 ;	../fb_lpc922.c:837: ack=0;			// ack und nack flag zurÃ¼cksetzen
   0A01 C2*03              3111 	clr	_ack
                    0A03   3112 	C$fb_lpc922.c$838$1$1 ==.
                           3113 ;	../fb_lpc922.c:838: nack=0;
   0A03 C2*04              3114 	clr	_nack
                    0A05   3115 	C$fb_lpc922.c$839$1$1 ==.
                           3116 ;	../fb_lpc922.c:839: send_ack=0;
   0A05 C2*0B              3117 	clr	_send_ack
                    0A07   3118 	C$fb_lpc922.c$840$1$1 ==.
                           3119 ;	../fb_lpc922.c:840: send_nack=0;
   0A07 C2*0C              3120 	clr	_send_nack
                    0A09   3121 	C$fb_lpc922.c$841$1$1 ==.
                           3122 ;	../fb_lpc922.c:841: tel_arrived=0;	// kein Telegramm empfangen
   0A09 C2*06              3123 	clr	_tel_arrived
                    0A0B   3124 	C$fb_lpc922.c$842$1$1 ==.
                           3125 ;	../fb_lpc922.c:842: auto_ack=1;		// empfangene Telegramme automatisch mit ack bestaetigen
   0A0B D2*08              3126 	setb	_auto_ack
                    0A0D   3127 	C$fb_lpc922.c$843$1$1 ==.
                           3128 ;	../fb_lpc922.c:843: tx_nextwrite=0;	// Zeiger auf naechste zu schreibende Objektnr. in tx_buffer
   0A0D 75*2C 00           3129 	mov	_tx_nextwrite,#0x00
                    0A10   3130 	C$fb_lpc922.c$844$1$1 ==.
                           3131 ;	../fb_lpc922.c:844: tx_nextsend=0;	// Zeiger auf naechste zu sendende Objektnr. in tx_buffer
   0A10 75*2D 00           3132 	mov	_tx_nextsend,#0x00
                    0A13   3133 	C$fb_lpc922.c$845$1$1 ==.
                           3134 ;	../fb_lpc922.c:845: pcount=0;		// Paketzaehler initialisieren
   0A13 75*02 00           3135 	mov	_pcount,#0x00
                    0A16   3136 	C$fb_lpc922.c$846$1$1 ==.
                           3137 ;	../fb_lpc922.c:846: inc_pcount=0;
   0A16 C2*0E              3138 	clr	_inc_pcount
                    0A18   3139 	C$fb_lpc922.c$847$1$1 ==.
                           3140 ;	../fb_lpc922.c:847: connected=0;	// keine Verbindung
   0A18 C2*0D              3141 	clr	_connected
                    0A1A   3142 	C$fb_lpc922.c$849$1$1 ==.
                           3143 ;	../fb_lpc922.c:849: init_rx();		// Empfang initialisieren
   0A1A 12s05rB7           3144 	lcall	_init_rx
                    0A1D   3145 	C$fb_lpc922.c$850$1$1 ==.
                    0A1D   3146 	XG$restart_hw$0$0 ==.
   0A1D 22                 3147 	ret
                           3148 	.area CSEG    (CODE)
                           3149 	.area CONST   (CODE)
                    1D00   3150 G$eeprom$0$0 == 0x1d00
                    1D00   3151 _eeprom	=	0x1d00
                           3152 	.area XINIT   (CODE)
                           3153 	.area CABS    (ABS,CODE)
